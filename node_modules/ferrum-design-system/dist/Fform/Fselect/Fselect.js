"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FSelect = void 0;
const react_1 = __importDefault(require("react"));
const react_select_1 = __importDefault(require("react-select"));
const react_hook_form_1 = require("react-hook-form");
const FSelect = (_a) => {
    var { label, placeholder = "", display = "block", className = "", name = "", id = "", value = "", inputSize = "", prefix, prefixAction = () => {
        console.log("prefix action");
    }, postfix, postfixAction = () => {
        console.log("postfix action");
    }, onBlur = () => { }, onChange = () => { }, validations, register, required, isDisabled = false, isReadOnly = false, options, inputRef, formatOptionLabel = undefined, isOptionDisabled, control, error, variant } = _a, otherProps = __rest(_a, ["label", "placeholder", "display", "className", "name", "id", "value", "inputSize", "prefix", "prefixAction", "postfix", "postfixAction", "onBlur", "onChange", "validations", "register", "required", "isDisabled", "isReadOnly", "options", "inputRef", "formatOptionLabel", "isOptionDisabled", "control", "error", "variant"]);
    return (react_1.default.createElement("div", { className: `f-input-group ${variant && `f-input-${variant}-select`} ${display ? `d-${display}` : ""} ${className} ${inputSize} ` },
        label && (react_1.default.createElement("label", { className: `f-input-label ${variant && `f-input-label-${variant}`}` },
            label,
            " ",
            (validations === null || validations === void 0 ? void 0 : validations.required) && react_1.default.createElement("span", { className: "required" }))),
        react_1.default.createElement("div", { className: "f-input-wrap" },
            prefix && (react_1.default.createElement("div", Object.assign({ className: `f-input-group-prepend ${prefixAction ? "has-action" : ""}`, onClick: () => prefixAction() }, otherProps),
                prefix,
                " ")),
            control && register ? (react_1.default.createElement(react_hook_form_1.Controller, Object.assign({ control: control, id: name, name: name }, (register ? register(name, Object.assign({}, validations)) : {}), { render: ({ field: { onChange, onBlur, value, name, ref, id } }) => (react_1.default.createElement(react_select_1.default, Object.assign({ className: "f-select", classNamePrefix: "f-select", placeholder: placeholder, value: value }, (formatOptionLabel && {
                    formatOptionLabel: FSelectCustomOption,
                }), { options: options, name: name, id: id, inputRef: ref, onChange: onChange, onBlur: onBlur, isDisabled: isDisabled }, otherProps))) }))) : (react_1.default.createElement(react_select_1.default, Object.assign({ className: "f-select", classNamePrefix: "f-select", value: value, placeholder: placeholder }, (formatOptionLabel && {
                formatOptionLabel: FSelectCustomOption,
            }), { options: options, name: name, id: id, ref: inputRef, onChange: onChange, onBlur: onBlur, isDisabled: isDisabled }, otherProps))),
            postfix && (react_1.default.createElement("div", Object.assign({ className: `f-input-group-append ${postfixAction ? "has-action" : ""}`, onClick: () => postfixAction() }, otherProps),
                " ",
                postfix))),
        error && react_1.default.createElement("p", { className: `${error ? "input-validation-error" : ""}` }, error ? error : undefined)));
};
exports.FSelect = FSelect;
// CUSTOM OPTIONS
const FSelectCustomOption = ({ label, customLabel }) => {
    return react_1.default.createElement("div", { className: "f-select-custom-label" }, customLabel);
};
//# sourceMappingURL=Fselect.js.map