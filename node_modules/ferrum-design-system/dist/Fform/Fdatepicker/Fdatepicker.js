"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FDatepicker = void 0;
const react_1 = __importDefault(require("react"));
const react_datepicker_1 = __importDefault(require("react-datepicker"));
require("react-datepicker/dist/react-datepicker.css");
const react_hook_form_1 = require("react-hook-form");
const FDatepicker = (_a) => {
    var { label, placeholderText = "MM D, YYYY", display = "block", className = "", inputSize = "", name = "", id = "", value = "", prefix, prefixAction = () => {
        console.log("prefix action");
    }, postfix, postfixAction = () => {
        console.log("postfix action");
    }, selected, showTimeSelect = false, showTimeSelectOnly = false, timeIntervals = 30, dateFormat = "MMMM d, yyyy", timeFormat = "HH:mm", onChange = () => { }, onSelect = () => { }, validations, register, required, error, disabled = false, readonly = false, control, variant } = _a, otherProps = __rest(_a, ["label", "placeholderText", "display", "className", "inputSize", "name", "id", "value", "prefix", "prefixAction", "postfix", "postfixAction", "selected", "showTimeSelect", "showTimeSelectOnly", "timeIntervals", "dateFormat", "timeFormat", "onChange", "onSelect", "validations", "register", "required", "error", "disabled", "readonly", "control", "variant"]);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement("div", { className: `f-input-group f-input-datepicker ${display ? `d-${display}` : ""} ${className} ${inputSize} ` },
            label && (react_1.default.createElement("label", { className: `f-input-label ${variant && `f-input-label-${variant}`}` },
                label,
                " ",
                (validations === null || validations === void 0 ? void 0 : validations.required) && react_1.default.createElement("span", { className: "required" }))),
            react_1.default.createElement("div", { className: "f-input-wrap" },
                prefix && (react_1.default.createElement("div", Object.assign({ className: `f-input-group-prepend ${prefixAction ? "has-action" : ""}`, onClick: () => prefixAction() }, otherProps),
                    prefix,
                    " ")),
                control && register ? (react_1.default.createElement(react_hook_form_1.Controller, Object.assign({ control: control, id: name, name: name }, (register ? register(name, Object.assign({}, validations)) : {}), { render: ({ field: { onChange, name, selected, value } }) => {
                        return (react_1.default.createElement(react_datepicker_1.default, Object.assign({ name: name, className: `f-input-control ${variant && `f-input-control-${variant}`}`, placeholderText: placeholderText, selected: value || selected, onChange: onChange, showTimeSelect: showTimeSelect, showTimeSelectOnly: showTimeSelectOnly }, (showTimeSelect
                            ? {
                                timeFormat: timeFormat,
                                dateFormat: `${dateFormat} ${timeFormat}`,
                                timeIntervals: timeIntervals,
                            }
                            : { dateFormat: dateFormat }), otherProps)));
                    } }))) : (react_1.default.createElement(react_datepicker_1.default, Object.assign({ name: name, className: "f-input-control", placeholderText: placeholderText, selected: selected, onChange: onChange, showTimeSelect: showTimeSelect, showTimeSelectOnly: showTimeSelectOnly }, (showTimeSelect
                    ? {
                        timeFormat: timeFormat,
                        dateFormat: `${dateFormat} ${timeFormat}`,
                        timeIntervals: timeIntervals,
                    }
                    : { dateFormat: dateFormat }), otherProps)))),
            postfix && (react_1.default.createElement("div", Object.assign({ className: `f-input-group-append ${postfixAction ? "has-action" : ""}`, onClick: () => postfixAction() }, otherProps),
                " ",
                postfix)),
            error && (react_1.default.createElement("p", { className: `${error ? "input-validation-error" : ""}` }, error ? error : undefined)))));
};
exports.FDatepicker = FDatepicker;
//# sourceMappingURL=Fdatepicker.js.map