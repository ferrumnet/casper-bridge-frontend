"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThemeBuilder = exports.defaultThemeConfig = void 0;
const react_1 = __importStar(require("react"));
const vsc_1 = require("react-icons/vsc");
// import { Modal } from "react-bootstrap";
//@ts-ignore
const react_color_gradient_picker_1 = require("react-color-gradient-picker");
require("../../assets/css/FthemeBuilder-styles.min.css");
require("react-color-gradient-picker/dist/index.css");
const ri_1 = require("react-icons/ri");
const __1 = require("../..");
const FthemeBuilderInputText_1 = require("./FthemeBuilderInputText");
const FthemeBuilderInputRadio_1 = require("./FthemeBuilderInputRadio");
const FthemeBuilderInputCheckbox_1 = require("./FthemeBuilderInputCheckbox");
// import { THEME_CONFIG } from "../interfaces/Theme";
const color = {
    red: 255,
    green: 0,
    blue: 0,
    alpha: 1,
};
exports.defaultThemeConfig = {
    head: {
        metaDescription: "",
        metaImage: "",
        metaUrl: "",
        title: "",
        favicon: "",
    },
    body: {
        useBackgroundImage: false,
        backgroundImage: "",
        backgroundColor: "",
        removeOverlay: "",
        headingColor: "",
    },
    header: {
        backgroundColor: "",
    },
    sider: {
        brandLogo: "",
        backgroundColor: "",
        textColor: "",
    },
    card: {
        borderRadius: 0,
        primary: {
            backgroundColor: "",
            textColor: "",
            activeBackgroundColor: "",
            activeTextColor: "",
        },
        secondary: {
            backgroundColor: "",
            textColor: "",
            activeBackgroundColor: "",
            activeTextColor: "",
        },
    },
    button: {
        borderRadius: 0,
        primary: {
            backgroundColor: "",
            textColor: "",
            borderColor: "",
            activeBackgroundColor: "",
            activeTextColor: "",
            activeBorderColor: "",
        },
        secondary: {
            backgroundColor: "",
            textColor: "",
            borderColor: "",
            activeBackgroundColor: "",
            activeTextColor: "",
            activeBorderColor: "",
        },
    },
    alert: {
        error: {
            backgroundColor: "",
            textColor: "",
        },
        success: {
            backgroundColor: "",
            textColor: "",
        },
        warning: {
            backgroundColor: "",
            textColor: "",
        },
    },
    dialog: {
        backgroundColor: "",
        textColor: "",
    },
    table: {
        backgroundColor: "",
        textColor: "",
        borderColor: "",
        borderRadius: 0,
    },
};
const gradient = {
    points: [
        {
            left: 0,
            red: 255,
            green: 0,
            blue: 0,
            alpha: 1,
        },
        {
            left: 100,
            red: 255,
            green: 0,
            blue: 0,
            alpha: 1,
        },
    ],
    degree: 0,
    type: "linear",
};
const ThemeBuilder = ({ config, onChange = () => { } }) => {
    const [openThemeBuilder, setOpenThemeBuilder] = (0, react_1.useState)(false);
    const [themeConfig, setThemeConfig] = (0, react_1.useState)(Object.assign({}, config));
    const [fieldName, setFieldName] = (0, react_1.useState)("body.backgroundImage");
    const [isGradient, setIsGradient] = (0, react_1.useState)(false);
    // eslint-disable-next-line
    const [selectedHeading, setSelectedHeading] = (0, react_1.useState)("Page Background Image");
    const [loading, setLoading] = (0, react_1.useState)(false);
    const onColorChange = (gradientAttrs) => {
        if (fieldName.includes("head.")) {
            // handleHeadChanges(fieldName, gradientAttrs);
        }
        else if (fieldName.includes("body.")) {
            handleBodyChanges(fieldName, gradientAttrs);
        }
        else if (fieldName.includes("header.")) {
            // handleHeaderChange(fieldName, gradientAttrs);
        }
        else if (fieldName.includes("button.")) {
            handleButtonChanges(fieldName, gradientAttrs);
        }
        else if (fieldName.includes("sider.")) {
            handleSiderChanges(fieldName, gradientAttrs);
        }
        else if (fieldName.includes("card.")) {
            handleCardChanges(fieldName, gradientAttrs);
        }
        else if (fieldName.includes("alert.")) {
            // handleAlertChanges(fieldName, gradientAttrs);
        }
        else if (fieldName.includes("dialog.")) {
            handleDialogChanges(fieldName, gradientAttrs);
        }
        else if (fieldName.includes("table.")) {
            handleTableChanges(fieldName, gradientAttrs);
        }
        setThemeConfig(Object.assign(Object.assign({}, themeConfig), { [fieldName]: gradientAttrs }));
    };
    (0, react_1.useEffect)(() => {
        if (fieldName) {
            setLoading(true);
        }
    }, [fieldName]);
    (0, react_1.useEffect)(() => {
        if (loading) {
            setLoading(false);
        }
    }, [loading]);
    const handleHeadChanges = () => { };
    const handleBodyChanges = (attributeName, colors) => {
        const toUpdate = attributeName.split(".");
        themeConfig[`${toUpdate[0]}`][`${toUpdate[1]}`] = colors.style;
        setThemeConfig(Object.assign({}, themeConfig));
    };
    const handleHeaderChange = () => {
        setThemeConfig(Object.assign({}, themeConfig));
    };
    const handleButtonChanges = (attributeName, colors) => {
        const toUpdate = attributeName.split(".");
        themeConfig[`${toUpdate[0]}`][`${toUpdate[1]}`][`${toUpdate[2]}`] = colors.style;
    };
    const handleSiderChanges = (attributeName, colors) => {
        const toUpdate = attributeName.split(".");
        themeConfig[`${toUpdate[0]}`][`${toUpdate[1]}`] = colors.style;
        setThemeConfig(Object.assign({}, themeConfig));
    };
    const handleCardChanges = (attributeName, colors) => {
        const toUpdate = attributeName.split(".");
        themeConfig[`${toUpdate[0]}`][`${toUpdate[1]}`][`${toUpdate[2]}`] = colors.style;
    };
    const handleAlertChanges = () => { };
    const handleDialogChanges = (attributeName, colors) => {
        const toUpdate = attributeName.split(".");
        themeConfig[`${toUpdate[0]}`][`${toUpdate[1]}`] = colors.style;
        setThemeConfig(Object.assign({}, themeConfig));
    };
    const handleTableChanges = (attributeName, colors) => {
        const toUpdate = attributeName.split(".");
        themeConfig[`${toUpdate[0]}`][`${toUpdate[1]}`] = colors.style;
        setThemeConfig(Object.assign({}, themeConfig));
    };
    const savehandler = () => {
        onChange(Object.assign({}, themeConfig));
    };
    const exportHandler = () => {
        const element = document.createElement("a");
        const file = new Blob([JSON.stringify(themeConfig)], {
            type: "text/plain",
        });
        element.href = URL.createObjectURL(file);
        element.download = "themeJson.txt";
        document.body.appendChild(element); // Required for this to work in FireFox
        element.click();
    };
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(__1.FDialog, { title: "Theme Builder", className: "theme-builder", type: "drawer", 
            // contentClassName="p-0"
            show: openThemeBuilder, onHide: () => {
                setOpenThemeBuilder(false);
            } },
            react_1.default.createElement("div", { className: "color-picker position-sticky top-0" },
                react_1.default.createElement("h4", null, selectedHeading),
                !loading && fieldName !== "body.backgroundImage" && fieldName !== "mainLogo" ? (react_1.default.createElement(react_color_gradient_picker_1.ColorPicker, Object.assign({ onStartChange: (e) => {
                        onColorChange(e);
                    }, onEndChange: (e) => {
                        onColorChange(e);
                    }, onChange: (e) => {
                        onColorChange(e);
                    } }, (isGradient
                    ? {
                        isGradient: true,
                        gradient: themeConfig[fieldName] ? themeConfig[fieldName] : gradient,
                    }
                    : {
                        color: themeConfig[fieldName] ? themeConfig[fieldName] : color,
                    })))) : null),
            react_1.default.createElement("div", { className: "theme-builder-form" },
                react_1.default.createElement(__1.FGrid, { className: "theme-bulider-component d-block f-pt-1" },
                    react_1.default.createElement(__1.FGridItem, { dir: "column" },
                        react_1.default.createElement(FthemeBuilderInputRadio_1.FThemeBuilderRadio, { label: "Page Background Image", name: "body.backgroundImage", selectedFieldName: fieldName, setFieldName: setFieldName, setSelectedHeading: setSelectedHeading, radioChangeHandler: () => {
                                setThemeConfig(Object.assign(Object.assign({}, themeConfig), { body: Object.assign(Object.assign({}, themeConfig.body), { useBackgroundImage: true }) }));
                            } }),
                        themeConfig.body.useBackgroundImage === true ? (react_1.default.createElement(FthemeBuilderInputText_1.FInputText, { type: "text", id: "body.backgroundImage_Id", name: "body.backgroundImage", placeholder: "Enter image path here ...", value: themeConfig.body.backgroundImage, onChange: (e) => {
                                setThemeConfig(Object.assign(Object.assign({}, themeConfig), { body: Object.assign(Object.assign({}, themeConfig.body), { backgroundImage: e.target.value }) }));
                            } })) : (""),
                        react_1.default.createElement(FthemeBuilderInputCheckbox_1.FThemeBuilderCheckbox, { label: "Remove Page Background Shadow", id: "body.removeOverlay_id", name: "body.removeOverlay", className: "custom-control-input", checked: themeConfig.body.removeOverlay === true, onChange: (e) => {
                                e.preventDefault();
                                setThemeConfig(Object.assign(Object.assign({}, themeConfig), { body: Object.assign(Object.assign({}, themeConfig.body), { removeOverlay: !themeConfig.body.removeOverlay }) }));
                            } }),
                        react_1.default.createElement(FthemeBuilderInputRadio_1.FThemeBuilderRadio, { name: "body.backgroundColor", label: "Page Background Color", selectedFieldName: fieldName, setFieldName: setFieldName, setSelectedHeading: setSelectedHeading, radioChangeHandler: () => {
                                setIsGradient(true);
                                setThemeConfig(Object.assign(Object.assign({}, themeConfig), { body: Object.assign(Object.assign({}, themeConfig.body), { useBackgroundImage: false }) }));
                            } }),
                        react_1.default.createElement(FthemeBuilderInputText_1.FInputText, { label: "Favicon", type: "text", id: "favicon", name: "favicon", placeholder: "Enter favicon path here ...", value: themeConfig.head.favicon, onChange: (e) => {
                                setThemeConfig(Object.assign(Object.assign({}, themeConfig), { head: Object.assign(Object.assign({}, themeConfig.head), { favicon: e.target.value }) }));
                            }, className: "form-control" }),
                        react_1.default.createElement(FthemeBuilderInputText_1.FInputText, { label: "Logo", type: "text", id: "mainLogo", name: "mainLogo", placeholder: "Enter logo path here ...", value: themeConfig.sider.brandLogo, onChange: (e) => {
                                setThemeConfig(Object.assign(Object.assign({}, themeConfig), { sider: Object.assign(Object.assign({}, themeConfig.sider), { brandLogo: e.target.value }) }));
                            }, className: "form-control" }),
                        react_1.default.createElement(__1.FTextarea, { label: "Meta Description", placeholder: "Enter meta description here...", min: "0", rows: "3", id: "metaDescription", name: "metaDescription", value: themeConfig.head.metaDescription, onChange: (e) => {
                                setThemeConfig(Object.assign(Object.assign({}, themeConfig), { head: Object.assign(Object.assign({}, themeConfig.head), { metaDescription: e.target.value }) }));
                            } }),
                        react_1.default.createElement(FthemeBuilderInputText_1.FInputText, { label: "Meta Image", type: "text", id: "metaImage", name: "metaImage", placeholder: "Enter meta image here ...", value: themeConfig.head.metaImage, onChange: (e) => {
                                setThemeConfig(Object.assign(Object.assign({}, themeConfig), { head: Object.assign(Object.assign({}, themeConfig.head), { metaImage: e.target.value }) }));
                            } }),
                        react_1.default.createElement(FthemeBuilderInputText_1.FInputText, { label: "Meta URL", type: "text", id: "metaUrl", name: "metaUrl", placeholder: "Enter meta url here ...", value: themeConfig.head.metaUrl, onChange: (e) => {
                                setThemeConfig(Object.assign(Object.assign({}, themeConfig), { head: Object.assign(Object.assign({}, themeConfig.head), { metaUrl: e.target.value }) }));
                            } }),
                        react_1.default.createElement(FthemeBuilderInputText_1.FInputText, { label: "Project Title", type: "text", id: "projectTitle", name: "projectTitle", placeholder: "Enter project title here ...", value: themeConfig.head.title, onChange: (e) => {
                                setThemeConfig(Object.assign(Object.assign({}, themeConfig), { head: Object.assign(Object.assign({}, themeConfig.head), { title: e.target.value }) }));
                            } }))),
                react_1.default.createElement("div", { className: "component-title" },
                    react_1.default.createElement("h5", null, "Siderbar Design")),
                react_1.default.createElement(__1.FGrid, { className: "theme-bulider-component" },
                    react_1.default.createElement(__1.FGridItem, null,
                        react_1.default.createElement(__1.FCard, { variant: "secondary", style: themeConfig.sider.backgroundColor
                                ? {
                                    background: themeConfig.sider.backgroundColor ? `${themeConfig.sider.backgroundColor.style}` : undefined,
                                    color: themeConfig.sider.textColor ? `${themeConfig.sider.textColor.style}` : undefined,
                                }
                                : {} },
                            react_1.default.createElement(FthemeBuilderInputRadio_1.FThemeBuilderRadio, { name: "sider.backgroundColor", selectedFieldName: fieldName, prefix: "Sider", label: "Background Color", setFieldName: setFieldName, setSelectedHeading: setSelectedHeading, radioChangeHandler: () => {
                                    setIsGradient(true);
                                } }),
                            react_1.default.createElement(FthemeBuilderInputRadio_1.FThemeBuilderRadio, { name: "sider.textColor", selectedFieldName: fieldName, prefix: "Sider", label: "Text Color", setFieldName: setFieldName, setSelectedHeading: setSelectedHeading, radioChangeHandler: () => {
                                    setIsGradient(false);
                                } })))),
                react_1.default.createElement("div", { className: "component-title" },
                    react_1.default.createElement("h5", null, "Button Design")),
                react_1.default.createElement(__1.FGrid, { className: "theme-bulider-component" },
                    react_1.default.createElement(__1.FGridItem, null,
                        react_1.default.createElement(FthemeBuilderInputText_1.FInputText, { type: "number", min: "0", max: "100", id: "btnBorderRadius", name: "btnBorderRadius", placeholder: "Enter radius amount ...", value: themeConfig.button.borderRadius, onChange: (e) => {
                                setThemeConfig(Object.assign(Object.assign({}, themeConfig), { button: Object.assign(Object.assign({}, themeConfig.button), { borderRadius: e.target.value }) }));
                            }, className: "form-control" })),
                    react_1.default.createElement(__1.FGrid, null,
                        react_1.default.createElement(__1.FGridItem, { size: [5], dir: "column" },
                            react_1.default.createElement(__1.FButton, { className: "w-100", title: "Default Button", style: themeConfig.button.primary.backgroundColor || themeConfig.button.primary.textColor
                                    ? {
                                        background: themeConfig.button.primary.backgroundColor ? `${themeConfig.button.primary.backgroundColor.style}` : undefined,
                                        color: themeConfig.button.primary.textColor ? themeConfig.button.primary.textColor.style : undefined,
                                        borderRadius: themeConfig.btnBorderRadius ? `${themeConfig.btnBorderRadius.style}` : undefined,
                                    }
                                    : {} }),
                            react_1.default.createElement(__1.FCard, { variant: "secondary", style: themeConfig.card.primary.backgroundColor
                                    ? {
                                        background: themeConfig.card.primary.backgroundColor ? `${themeConfig.card.primary.backgroundColor.style}` : undefined,
                                        color: themeConfig.card.primary.textColor ? `${themeConfig.card.primary.textColor.style}` : undefined,
                                    }
                                    : {} },
                                react_1.default.createElement(FthemeBuilderInputRadio_1.FThemeBuilderRadio, { name: "button.primary.backgroundColor", selectedFieldName: fieldName, prefix: "Primary Button", label: "Background Color", setFieldName: setFieldName, setSelectedHeading: setSelectedHeading, radioChangeHandler: () => {
                                        setIsGradient(true);
                                    } }),
                                react_1.default.createElement(FthemeBuilderInputRadio_1.FThemeBuilderRadio, { name: "button.primary.textColor", selectedFieldName: fieldName, prefix: "Primary Button", label: "Text Color", setFieldName: setFieldName, setSelectedHeading: setSelectedHeading, radioChangeHandler: () => {
                                        setIsGradient(false);
                                    } }),
                                react_1.default.createElement(FthemeBuilderInputRadio_1.FThemeBuilderRadio, { name: "button.primary.borderColor", selectedFieldName: fieldName, prefix: "Border color", label: "Border Color", setFieldName: setFieldName, setSelectedHeading: setSelectedHeading, radioChangeHandler: () => {
                                        setIsGradient(false);
                                    } }))),
                        react_1.default.createElement(__1.FGridItem, { size: [2], dir: "column" },
                            react_1.default.createElement(__1.FButton, { title: react_1.default.createElement(ri_1.RiSwitchLine, null), className: "btn-icon btn-swap" })),
                        react_1.default.createElement(__1.FGridItem, { size: [5], dir: "column" },
                            react_1.default.createElement(__1.FButton, { className: "w-100", title: "Button Active", style: themeConfig.button || themeConfig.button.primary.activeBackgroundColor
                                    ? {
                                        background: themeConfig.button.primary.activeBackgroundColor
                                            ? `${themeConfig.button.primary.activeBackgroundColor}`
                                            : undefined,
                                        color: themeConfig.button ? themeConfig.button.primary.activeTextColor : undefined,
                                    }
                                    : {} }),
                            react_1.default.createElement(__1.FCard, { variant: "secondary", style: themeConfig.card.secondary.backgroundColor
                                    ? {
                                        background: themeConfig.card.secondary.backgroundColor ? `${themeConfig.card.secondary.backgroundColor.style}` : undefined,
                                        color: themeConfig.card.secondary.textColor ? `${themeConfig.card.secondary.textColor.style}` : undefined,
                                    }
                                    : {} },
                                react_1.default.createElement(FthemeBuilderInputRadio_1.FThemeBuilderRadio, { name: "button.primary.activeBackgroundColor", selectedFieldName: fieldName, prefix: "Primary", label: "Background Color", setFieldName: setFieldName, setSelectedHeading: setSelectedHeading, radioChangeHandler: () => {
                                        setIsGradient(true);
                                    } }),
                                react_1.default.createElement(FthemeBuilderInputRadio_1.FThemeBuilderRadio, { name: "button.primary.activeTextColor", selectedFieldName: fieldName, prefix: "Primary Button Hover", label: "Text Color", setFieldName: setFieldName, setSelectedHeading: setSelectedHeading, radioChangeHandler: () => {
                                        setIsGradient(false);
                                    } }),
                                react_1.default.createElement(FthemeBuilderInputRadio_1.FThemeBuilderRadio, { name: "button.primary.activeBorderColor", selectedFieldName: fieldName, prefix: "Primary", label: "Border Color", setFieldName: setFieldName, setSelectedHeading: setSelectedHeading, radioChangeHandler: () => {
                                        setIsGradient(false);
                                    } }))))),
                react_1.default.createElement("div", { className: "component-title" },
                    react_1.default.createElement("h5", null, "Card Design:")),
                react_1.default.createElement(__1.FGrid, { className: "theme-bulider-component" },
                    react_1.default.createElement(__1.FGridItem, null,
                        react_1.default.createElement(FthemeBuilderInputText_1.FInputText, { type: "number", display: "flex", min: "0", max: "20", id: "cardBorderRadius", name: "cardBorderRadius", placeholder: "Enter radius amount ...", value: themeConfig.card.borderRadius, onChange: (e) => {
                                setThemeConfig(Object.assign(Object.assign({}, themeConfig), { card: Object.assign(Object.assign({}, themeConfig.card), { borderRadius: e.target.value }) }));
                            }, className: "form-control" })),
                    react_1.default.createElement(__1.FGridItem, { size: [6] },
                        react_1.default.createElement(__1.FCard, { variant: "secondary", style: themeConfig.card.secondary.backgroundColor
                                ? {
                                    background: themeConfig.card.secondary.backgroundColor ? `${themeConfig.card.secondary.backgroundColor.style}` : undefined,
                                }
                                : {} },
                            react_1.default.createElement("div", { className: "card-title" },
                                react_1.default.createElement("h5", { style: {
                                        color: themeConfig.card.primary.textColor ? `${themeConfig.card.primary.textColor.style}` : undefined,
                                    } }, "Card Primary")),
                            react_1.default.createElement(FthemeBuilderInputRadio_1.FThemeBuilderRadio, { name: "card.primary.backgroundColor", selectedFieldName: fieldName, prefix: "Primary Card", label: "Background Color", setFieldName: setFieldName, setSelectedHeading: setSelectedHeading, radioChangeHandler: () => {
                                    setIsGradient(true);
                                } }),
                            react_1.default.createElement(FthemeBuilderInputRadio_1.FThemeBuilderRadio, { name: "card.primary.textColor", selectedFieldName: fieldName, prefix: "Primary Card", label: "Text Color", setFieldName: setFieldName, setSelectedHeading: setSelectedHeading, radioChangeHandler: () => {
                                    setIsGradient(false);
                                } }))),
                    react_1.default.createElement(__1.FGridItem, { size: [6] },
                        react_1.default.createElement(__1.FCard, { variant: "secondary", style: themeConfig.card.secondary.backgroundColor
                                ? {
                                    background: themeConfig.card.secondary.backgroundColor ? `${themeConfig.card.secondary.backgroundColor.style}` : undefined,
                                }
                                : {} },
                            react_1.default.createElement("div", { className: "card-title" },
                                react_1.default.createElement("h5", { style: {
                                        color: themeConfig.card.secondary.textColor ? `${themeConfig.card.secondary.textColor.style}` : undefined,
                                    } }, "Card Secondary")),
                            react_1.default.createElement(FthemeBuilderInputRadio_1.FThemeBuilderRadio, { name: "card.secondary.backgroundColor", selectedFieldName: fieldName, prefix: "Secondary Card", label: "Background Color", setFieldName: setFieldName, setSelectedHeading: setSelectedHeading, radioChangeHandler: () => {
                                    setIsGradient(true);
                                } }),
                            react_1.default.createElement(FthemeBuilderInputRadio_1.FThemeBuilderRadio, { name: "card.secondary.textColor", selectedFieldName: fieldName, prefix: "Secondary Card", label: "Text Color", setFieldName: setFieldName, setSelectedHeading: setSelectedHeading, radioChangeHandler: () => {
                                    setIsGradient(false);
                                } })))),
                react_1.default.createElement("div", { className: "component-title" },
                    react_1.default.createElement("h5", null, "Dialog Design")),
                react_1.default.createElement(__1.FGrid, { className: "theme-bulider-component" },
                    react_1.default.createElement(__1.FGridItem, null,
                        react_1.default.createElement(__1.FCard, { variant: "secondary", style: themeConfig.dialog.backgroundColor
                                ? {
                                    background: themeConfig.dialog.backgroundColor ? `${themeConfig.dialog.backgroundColor.style}` : undefined,
                                    color: themeConfig.dialog.textColor ? `${themeConfig.dialog.textColor.style}` : undefined,
                                }
                                : {} },
                            react_1.default.createElement(FthemeBuilderInputRadio_1.FThemeBuilderRadio, { name: "dialog.backgroundColor", selectedFieldName: fieldName, prefix: "Dialog", label: "Background Color", setFieldName: setFieldName, setSelectedHeading: setSelectedHeading, radioChangeHandler: () => {
                                    setIsGradient(true);
                                } }),
                            react_1.default.createElement(FthemeBuilderInputRadio_1.FThemeBuilderRadio, { name: "dialog.textColor", selectedFieldName: fieldName, prefix: "Dialog", label: "Text Color", setFieldName: setFieldName, setSelectedHeading: setSelectedHeading, radioChangeHandler: () => {
                                    setIsGradient(false);
                                } })))),
                react_1.default.createElement("div", { className: "component-title" },
                    react_1.default.createElement("h5", null, "List Design")),
                react_1.default.createElement(__1.FGrid, { className: "theme-bulider-component" },
                    react_1.default.createElement(__1.FGridItem, null,
                        react_1.default.createElement(FthemeBuilderInputText_1.FInputText, { type: "number", min: "0", max: "20", id: "tableBorderRadius", name: "tableBorderRadius", placeholder: "Enter radius amount ...", value: themeConfig.table.borderRadius, onChange: (e) => {
                                setThemeConfig(Object.assign(Object.assign({}, themeConfig), { table: Object.assign(Object.assign({}, themeConfig.table), { borderRadius: e.target.value }) }));
                            } })),
                    react_1.default.createElement(__1.FGridItem, null,
                        react_1.default.createElement(__1.FCard, { variant: "secondary", style: themeConfig.dialog.backgroundColor
                                ? {
                                    background: themeConfig.dialog.backgroundColor ? `${themeConfig.dialog.backgroundColor.style}` : undefined,
                                    color: themeConfig.dialog.textColor ? `${themeConfig.dialog.textColor.style}` : undefined,
                                }
                                : {} },
                            react_1.default.createElement(FthemeBuilderInputRadio_1.FThemeBuilderRadio, { name: "table.backgroundColor", selectedFieldName: fieldName, prefix: "Table", label: "Background Color", setFieldName: setFieldName, setSelectedHeading: setSelectedHeading, radioChangeHandler: () => {
                                    setIsGradient(false);
                                } }),
                            react_1.default.createElement(FthemeBuilderInputRadio_1.FThemeBuilderRadio, { name: "table.textColor", selectedFieldName: fieldName, prefix: "Table", label: "Text Color", setFieldName: setFieldName, setSelectedHeading: setSelectedHeading, radioChangeHandler: () => {
                                    setIsGradient(false);
                                } }),
                            react_1.default.createElement(FthemeBuilderInputRadio_1.FThemeBuilderRadio, { name: "table.borderColor", selectedFieldName: fieldName, prefix: "Table", label: "Border Color", setFieldName: setFieldName, setSelectedHeading: setSelectedHeading, radioChangeHandler: () => {
                                    setIsGradient(false);
                                } })))),
                react_1.default.createElement("div", { className: "btn-bar" },
                    react_1.default.createElement(__1.FButton, { variant: "primary", 
                        // onClick={defaultThemeConfig}
                        title: "Set Default" }),
                    react_1.default.createElement(__1.FButton, { variant: "primary", onClick: () => savehandler(), title: "Apply" }),
                    react_1.default.createElement(__1.FButton, { variant: "primary", onClick: () => exportHandler(), title: "Export" })))),
        react_1.default.createElement(__1.FButton, { title: react_1.default.createElement(vsc_1.VscSymbolColor, { size: "25" }), variant: "primary", className: "theme-builder-btn", onClick: () => {
                setOpenThemeBuilder(true);
            } })));
};
exports.ThemeBuilder = ThemeBuilder;
//# sourceMappingURL=ThemeBuilder.js.map