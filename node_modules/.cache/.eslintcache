[{"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/index.tsx":"1","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/App.tsx":"2","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/redux/store.ts":"3","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/Routes.tsx":"4","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/redux/casper/casperSlice.ts":"5","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/walletAuthenticationSlice.ts":"6","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/index.ts":"7","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/Withdrawals.tsx":"8","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/header/header.tsx":"9","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/pages/CasperSwap.tsx":"10","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/WalletAuthenticationInterfaces.ts":"11","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/redux/casper/casperActions.ts":"12","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/network.ts":"13","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/web3Helper.ts":"14","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/stringUtils.ts":"15","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/index.ts":"16","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/index.ts":"17","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/dialogs/ConfirmationDialog.tsx":"18","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/dialogs/AddressSelector.tsx":"19","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/dialogs/TxProcessingDialog.tsx":"20","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/connect-wallet/ConnectWalletDialog.tsx":"21","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/stringParser.ts":"22","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/client/index.ts":"23","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/walletApplicationWrapperInterfaces.ts":"24","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/walletApplicationWrapper.tsx":"25","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/wallet-connector.tsx":"26","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/redux/walletApplicationWrapperActions.ts":"27","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/redux/walletConnectorActions.ts":"28","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/redux/walletConnectorSlice.ts":"29","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/redux/walletApplicationWrapperSlice.ts":"30","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/walletAuthenticationActions.ts":"31","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/walletConnectorInterfaces.ts":"32","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/web3React/connectors.ts":"33","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/pages/CasperAddLiquidity.tsx":"34","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/approvalButtonWrapper.tsx":"35","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/pages/Landing/CasperLanding.tsx":"36","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/types.ts":"37","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/crucibleClient.ts":"38","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/web3Helper.ts":"39","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/chainEventItem.tsx":"40","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/Api.js":"41"},{"size":687,"mtime":1708521343903,"results":"42","hashOfConfig":"43"},{"size":884,"mtime":1708521343901,"results":"44","hashOfConfig":"43"},{"size":1367,"mtime":1708521285630,"results":"45","hashOfConfig":"43"},{"size":1670,"mtime":1708521343902,"results":"46","hashOfConfig":"43"},{"size":1944,"mtime":1703678328385,"results":"47","hashOfConfig":"43"},{"size":2502,"mtime":1688388176131,"results":"48","hashOfConfig":"43"},{"size":133,"mtime":1688388176127,"results":"49","hashOfConfig":"43"},{"size":12444,"mtime":1708521285625,"results":"50","hashOfConfig":"43"},{"size":8279,"mtime":1708521285628,"results":"51","hashOfConfig":"43"},{"size":30950,"mtime":1708521399056,"results":"52","hashOfConfig":"43"},{"size":729,"mtime":1688388176129,"results":"53","hashOfConfig":"43"},{"size":1981,"mtime":1708521060643,"results":"54","hashOfConfig":"43"},{"size":3980,"mtime":1708521285631,"results":"55","hashOfConfig":"43"},{"size":1284,"mtime":1708521285631,"results":"56","hashOfConfig":"43"},{"size":468,"mtime":1708521285631,"results":"57","hashOfConfig":"43"},{"size":197,"mtime":1688388176130,"results":"58","hashOfConfig":"43"},{"size":285,"mtime":1688388176127,"results":"59","hashOfConfig":"43"},{"size":7491,"mtime":1708521285628,"results":"60","hashOfConfig":"43"},{"size":1184,"mtime":1688388176133,"results":"61","hashOfConfig":"43"},{"size":830,"mtime":1688388176133,"results":"62","hashOfConfig":"43"},{"size":1536,"mtime":1702920575448,"results":"63","hashOfConfig":"43"},{"size":499,"mtime":1708521032897,"results":"64","hashOfConfig":"43"},{"size":759,"mtime":1708521285625,"results":"65","hashOfConfig":"43"},{"size":3719,"mtime":1688388176128,"results":"66","hashOfConfig":"43"},{"size":4642,"mtime":1703678328383,"results":"67","hashOfConfig":"43"},{"size":7270,"mtime":1708521285625,"results":"68","hashOfConfig":"43"},{"size":3934,"mtime":1688388176127,"results":"69","hashOfConfig":"43"},{"size":690,"mtime":1688388176130,"results":"70","hashOfConfig":"43"},{"size":2243,"mtime":1689599604041,"results":"71","hashOfConfig":"43"},{"size":2122,"mtime":1688388176127,"results":"72","hashOfConfig":"43"},{"size":2122,"mtime":1688388176131,"results":"73","hashOfConfig":"43"},{"size":812,"mtime":1689596068552,"results":"74","hashOfConfig":"43"},{"size":228,"mtime":1688388176132,"results":"75","hashOfConfig":"43"},{"size":13692,"mtime":1708521285629,"results":"76","hashOfConfig":"43"},{"size":7135,"mtime":1708521285626,"results":"77","hashOfConfig":"43"},{"size":13610,"mtime":1708521399057,"results":"78","hashOfConfig":"43"},{"size":4349,"mtime":1708521285627,"results":"79","hashOfConfig":"43"},{"size":4640,"mtime":1708521285627,"results":"80","hashOfConfig":"43"},{"size":5135,"mtime":1708521285627,"results":"81","hashOfConfig":"43"},{"size":4059,"mtime":1708521285626,"results":"82","hashOfConfig":"43"},{"size":749,"mtime":1708521285626,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hsgj5i",{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"93"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"93"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":1,"source":"141","usedDeprecatedRules":"93"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"93"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"93"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"93"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"93"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"93"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"93"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"93"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/index.tsx",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/App.tsx",["219"],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/redux/store.ts",[],[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/Routes.tsx",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/redux/casper/casperSlice.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/walletAuthenticationSlice.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/index.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/Withdrawals.tsx",["220","221","222","223","224"],[],"import { FTypo, FGrid, FTable, FButton } from \"ferrum-design-system\";\nimport { useEffect, useState } from \"react\";\nimport DatatableWrapper from \"react-bs-datatable\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { crucibleApi } from \"../client\";\nimport { fetchWithdrawals } from \"../redux/casper/casperActions\";\nimport { Networks, NetworksId } from \"../utils/stringUtils\";\n\nimport { Web3Helper } from \"../utils/web3Helper\";\nimport { MetaMaskConnector } from \"./connector\";\nimport { ConnectWalletDialog } from \"../utils/connect-wallet/ConnectWalletDialog\";\nimport { \n    CLPublicKey,\n    CLValueBuilder, \n    decodeBase16, \n    DeployUtil,\n    RuntimeArgs,\n    CasperClient\n} from \"casper-js-sdk\";\nimport toast from \"react-hot-toast\";\nimport ConfirmationDialog from \"../dialogs/ConfirmationDialog\";\nimport TxProcessingDialog from \"../dialogs/TxProcessingDialog\";\nimport Web3 from \"web3\";\nimport { networksToChainIdMap } from \"../utils/network\";\nimport moment from \"moment\";\nimport withdrawIcon from './../assets/images/wiithdrawIcon2.svg';\nimport { walletConnectorActions } from \"./connector/wallet-connector\";\n\n\nconst RPC_API = \"https://casper-proxy-app-03c23ef9f855.herokuapp.com?url=https://rpc.mainnet.casperlabs.io/rpc\";\nconst casperClient = new CasperClient(RPC_API);\n\nexport const Withdrawals = () => {\n    const [evmLoading, setEvmLoading] = useState<boolean>(false);\n    const { connect: { config, selectedAccount, isWalletConnected, withdrawalItems } } = useSelector((state: any) => state.casper);\n    const { walletAddress, isConnected, networkClient, currentWalletNetwork } = useSelector((state: any) => state.casper.walletConnector);\n    const [loading, setLoading] = useState(false);\n    const [processMsg, setProcessMsg] = useState('');\n    const [showConfirmation, setShowConfirmation] = useState(false);\n    const [evmSuccessful, setEvmSuccessful] = useState<boolean>(false);\n\n\n    const dispatch = useDispatch();\n    async function withdrawEvm(id: string, item: any):Promise<any>{\n      try {\n        setEvmLoading(true)\n        //@ts-ignore\n        const networkData = networksToChainIdMap[currentWalletNetwork]\n        const Api = new crucibleApi()\n        await Api.signInToServer(walletAddress)\n            const res = await Api.gatewayApi({\n              \"command\": \"updateEvmAndNonEvmTransaction\",\n               \"data\": {\n                \"id\": id,\n                \"txType\": \"swap\",\n                \"sendNetwork\": 109090,\n                \"receiveNetwork\": `${item.receiveNetwork || networkData?.sendCurrencyFormatted || networkData?.sendNetwork || 'BSC_TESTNET'}`,\n                \"used\": \"\",\n                \"user\": walletAddress,\n                \"sendAddress\": walletAddress,\n                \"receiveAddress\": selectedAccount?.address,\n                \"sendCurrency\": item?.sendCurrency || networkData?.sendCurrency || `${networkData.sendNetwork}:0xfe00ee6f00dd7ed533157f6250656b4e007e7179`,\n                \"sendAmount\":  item.sendAmount,\n                \"receiveCurrency\": \"CSPR:222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473\"\n              },\n              \"params\": []\n            });\n        if (res.data) {\n          const helper = new Web3Helper(networkClient)\n          const tx = await helper.sendTransactionAsync(\n            dispatch,\n            [res.data]\n          )\n          if(tx) {\n            setEvmLoading(false)\n            setShowConfirmation(true)\n            setEvmSuccessful(true)\n            await Api.gatewayApi({\n              \"command\": \"updateEvmAndNonEvmTransaction\",\n               \"data\": {\n                \"id\": id,\n                \"used\": true,\n              },\n              \"params\": []\n            }\n            );\n            \n            await fetchEvmWithdrawalItems()\n          }\n        }\n      } catch (error) {\n        //@ts-ignore\n        if (error?.response?.data?.error) {\n          //@ts-ignore\n          toast(error?.response?.data?.error)\n        }else {\n          toast(\"Error occured processing transaction, kindly try again\")\n        }\n        setEvmLoading(false)\n      }\n    }    \n\n    const fetchEvmWithdrawalItems = async () => {\n        const Api = new crucibleApi()\n        await Api.signInToServer(`CSPR:${selectedAccount?.address}`)\n        const userWithdrawals = await Api.gatewayApi({\n          command: 'getUserNonEvmWithdrawItems', data: {\n            userAddress: `${selectedAccount?.address}`,\n            network: \"MUMBAI_TESTNET\",\n            receiveAddress: walletAddress,\n        }, params: [] });\n        if (userWithdrawals.data){\n            await fetchWithdrawals(userWithdrawals.data.withdrawableBalanceItems)(dispatch);\n        }\n    }\n\n    const performCasperWithdraw = async (amount: string) => {\n        if (\n          isWalletConnected &&\n          selectedAccount\n        ) {\n          //@ts-ignore\n          const casperWalletProvider = await window.CasperWalletProvider;    \n          const provider = casperWalletProvider();\n          try {\n            // (selectedAccount?.address, Number(amount));\n            const publicKeyHex = selectedAccount?.address;\n            const senderPublicKey = CLPublicKey.fromHex(publicKeyHex);\n\n            const deployParams = new DeployUtil.DeployParams(\n            senderPublicKey,\n            'casper'\n            );\n\n            const args = RuntimeArgs.fromMap({\n                \"amount\": CLValueBuilder.u256((Number(amount)) * 100),\n                \"token_address\": CLValueBuilder.string('contract-package-wasm5fe4b52b2b1a3a0eebdc221ec9e290df1535ad12a7fac37050095201f449acc4'),\n              });\n    \n            const session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(\n            decodeBase16('e0f1bcfbbc1554dc0cbd1316cc1658645b58898aa5add056985f9d6cb0f6f75b'),\n            'withdraw',\n            args\n            );\n\n            const payment = DeployUtil.standardPayment(10000000000);\n\n            const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n\n            const deployJson: any = DeployUtil.deployToJson(deploy);\n        \n            provider.sign(JSON.stringify(deployJson), publicKeyHex).then(async (signedDeployJson: any) => {\n                const signedDeploy = DeployUtil.setSignature(\n                  deploy,\n                  signedDeployJson.signature,\n                  CLPublicKey.fromHex(publicKeyHex)\n                );\n\n                if (signedDeploy) {\n                    const res = await casperClient.putDeploy(signedDeploy);\n                    console.log(res, 'resres');\n                    if (res) {\n                    \n                    }\n                    setProcessMsg(res)\n                    setLoading(false)\n                    setShowConfirmation(true)\n                }\n            });\n              // navigate.push(`/${config._id}`);\n            //toast.success(`${amount} tokens are staked successfully`);\n            \n            } catch (e) {\n              console.log(\"ERROR : \", e);\n                toast.error(\"An error occured please see console for details\");\n                // navigate.push(`/${config?._id}`);\n            } finally {\n            //setLoading(false)\n            }\n\n        } else {\n            // navigate.push(`/${config._id}`);\n        }\n    };\n        \n\n\n    useEffect(() => {\n       fetchEvmWithdrawalItems()\n    }, [selectedAccount, walletAddress]);\n\n    const tableHeads: any[] = [\n        { width: 200, prop: \"sourceNetwork\", title: \"FROM\" },\n        { prop: \"targetNetwork\", title: \"TO\" },\n        { prop: \"amount\", title: \"Amount\" },\n        { prop: \"hash\", title: \"Transaction Hash\" },\n        { prop: \"created\", title: \"Created\" },\n        { prop: \"action\", title: \"Action\" }\n    ];\n\n    function start_and_end(str: string) {\n      if (str.length > 15) {\n        return str.substr(0, 10) + '...' + str.substr(str.length-10, str.length);\n      }\n      return str;\n    }\n\n    const performSwitchNetwork = async (item: any) => {\n      console.log(item)\n      try {\n        //@ts-ignore\n        let ethereum = window.ethereum;\n        if (ethereum) {\n          const hexChainId = Number(item.networkId).toString(16);\n          await ethereum.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [{ chainId: `0x${hexChainId}` }],\n          });\n  \n          //@ts-ignore\n          let network3 = window.ethereum?.networkVersion\n          dispatch(walletConnectorActions.resetWalletConnector());\n          dispatch(walletConnectorActions.reconnectWallet());\n\n          console.log(network3, 'network3network3')\n        }\n      } catch (err: any) {\n          console.log(err)\n          //@ts-ignore\n          let ethereum = window.ethereum;\n          toast.error(err?.message);\n     \n      }\n    };\n\n    const body = (withdrawalItems || []).map((item: any) => {\n      //@ts-ignore\n      const networkData = networksToChainIdMap[currentWalletNetwork]\n      //@ts-ignore\n      const chainInfo = NetworksId[item.receiveNetwork]\n        return {\n          created: <FTypo className={\"col-amount\"}>{moment(item.sendTimestamp).fromNow()}</FTypo>,\n          amount: <FTypo className={\"col-amount\"}>{Number(item.sendAmount || 0) > 10000 ? Web3.utils.fromWei(item.sendAmount, 'ether') : item.sendAmount}</FTypo>,\n          hash: <FTypo className={\"col-amount\"}>{start_and_end(item.id)}</FTypo>,\n          sourceNetwork: <FTypo className={\"col-amount\"}>{\n            //@ts-ignore\n            Networks[item.sendNetwork] || item.sendNetwork\n        }</FTypo>,\n          targetNetwork: <FTypo className={\"col-amount\"}>{\n            //@ts-ignore\n            Networks[item.receiveNetwork] || item.receiveCurrency.split(\":\")[0]\n        }</FTypo>,\n          action: (\n            <div className=\"col-action\">\n            {\n                isConnected\n                ? ( <FButton \n                      title={\n                        //@ts-ignore\n                        <span><img width={25} src={withdrawIcon}/> {((item.sendNetwork === \"109090\") && networkData['chain'] !=  Networks[item.receiveNetwork]) ? 'Switch Network' : item?.used ? \"Withdrawn\" :\"Withdraw\"} </span>\n                      } \n                      disabled={false}\n                      //@ts-ignore\n                      onClick={() => ((item.sendNetwork === \"109090\") && networkData['chain'] !=  Networks[item.receiveNetwork]) ? performSwitchNetwork({\"networkId\": networksToChainIdMap[chainInfo]['chainId']})\n                        : !(item.sendNetwork === \"109090\") ? performCasperWithdraw((item.sendAmount).toString()) : withdrawEvm(item.id, item)\n                      }\n                    />\n                  )\n                : (\n                    <MetaMaskConnector.WalletConnector\n                      WalletConnectView={FButton}\n                      WalletConnectModal={ConnectWalletDialog}\n                      isAuthenticationNeeded={false}\n                      WalletConnectViewProps={{ className: \"w-100\" }}\n                    />\n                )\n            }\n            </div>\n          ),\n        }; \n    }).reverse(); \n\n    return (\n        <div className=\"container_withdrawal_parent\">\n            <FGrid alignX={\"center\"} className=\"f-mb-1 withdrawals_container\">\n                <FTypo size={18} align={\"center\"} className={\"f-mb-14 f-mt--7 f-mb-1 title\"}>\n                    Token Withdrawals\n                </FTypo>\n                <FTable>\n<<<<<<< HEAD\n                  <DatatableWrapper tableBody={body || []} tableHeaders={tableHeads} rowsPerPage={10} />\n=======\n                    <Datatable tableBody={body || []} tableHeaders={tableHeads} rowsPerPage={7} />\n>>>>>>> c8f7910e (completed redesign)\n                </FTable>\n            </FGrid>\n            <ConfirmationDialog\n              evmSuccessful={evmSuccessful}\n              onHide={() => {\n                setShowConfirmation(false)\n                setEvmSuccessful(false)\n                setProcessMsg(\"\")\n              }}\n              transaction={processMsg}\n              message={'Transaction sent to network and is processing.'}\n              show={showConfirmation}\n              isSwap={false}\n            />\n            <TxProcessingDialog onHide={() =>setLoading(false)} message={ processMsg || \"Transaction Processing....\"} show={loading}/>\n            <TxProcessingDialog onHide={() =>setEvmLoading(false)} message={ processMsg || \"Transaction Processing....\"} show={evmLoading}/>\n\n        </div>\n    )\n}\n\nexport default Withdrawals;\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/header/header.tsx",["225","226","227","228","229","230","231","232","233","234","235"],[],"import React, { useEffect, useState } from \"react\";\nimport {\n  FHeader,\n  // FHeaderCollapse,\n  FButton,\n  FItem,\n  FTruncateText,\n  // FHeaderMenuItem,\n} from \"ferrum-design-system\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ReactComponent as IconNetwork } from \"../assets/images/casper.svg\";\n\nimport logo from \"../assets/images/logo-light.svg\";\nimport logoFrm from \"../assets/images/logo-frm.png\";\n\nimport { CgArrowsExchangeAlt } from \"react-icons/cg\";\nimport { CasperClient, CasperServiceByJsonRPC, CLPublicKey } from \"casper-js-sdk\";\nimport { \n  connectWallet as connectWalletDispatch,\n  resetWallet,\n  configLoaded,\n  signed\n} from '../redux/casper/casperActions';\nimport toast from \"react-hot-toast\";\nimport AddressSelector from \"../dialogs/AddressSelector\";\nimport { useHistory, useParams } from \"react-router\";\nimport TxProcessingDialog from \"../dialogs/TxProcessingDialog\";\nimport metamask from './../assets/images/Group 334.png';\n\nimport './../assets/scss/styles.scss';\n\nconst RPC_API = \"https://casper-proxy-app-03c23ef9f855.herokuapp.com?url=https://rpc.mainnet.casperlabs.io/rpc\";\nconst STATUS_API = \"https://4211-2a01-4b00-832a-3100-f467-7086-4cda-bb21.eu.ngrok.io/http://159.65.203.12:8888\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\n\nconst Header = () => {\n  const dispatch = useDispatch();\n  const { bridgePoolAddress }: any = useParams();\n  const navigate = useHistory();\n  const connection = useSelector((state: any) => state.casper.connect)\n  const [loading, setLoading] = useState(false);\n\n  var path = window.location.pathname;\n\n  const [showAddressSelectorDlg, setShowAddressSelectorDlg] =  useState<boolean>(false);\n  const { isConnected, isConnecting, currentWalletNetwork, walletAddress, networkClient } = useSelector((state: any) => state.casper.walletConnector);\n\n  const connectWallet = async () => {\n    //@ts-ignore\n    const casperWalletProvider = await window.CasperWalletProvider;    \n    const provider = casperWalletProvider();\n    await provider?.requestConnection()\n\n    const isConnected = await provider.isConnected();\n\n    if (isConnected) {\n      setLoading(true)\n      await AccountInformation();\n      setLoading(false)\n    }\n \n    return;\n  };\n\n  const disconnectWallet = async () => {\n    //@ts-ignore\n    const casperWalletProvider = await window.CasperWalletProvider;    \n    const provider = casperWalletProvider();\n    provider.disconnectFromSite();\n    //@ts-ignore\n    await resetWallet()(dispatch)\n  };\n\n  async function AccountInformation() {\n    //@ts-ignore\n    const casperWalletProvider = await window.CasperWalletProvider;    \n    const provider = casperWalletProvider();\n    const isConnected = await provider.isConnected();\n\n    if (isConnected) {\n      try {\n        const publicKey = await provider.getActivePublicKey();\n        //textAddress.textContent += publicKey;\n\n        const latestBlock = await casperService.getLatestBlockInfo();\n\n        // const root = await casperService.getStateRootHash(latestBlock?.block?.header?.state_root_hash);\n\n        await connectWalletDispatch([{\n          \"address\": publicKey\n        }])(dispatch)\n        const balanceUref = await casperService.getAccountBalanceUrefByPublicKey(latestBlock?.block?.header?.state_root_hash || '', CLPublicKey.fromHex(publicKey));\n\n        if (latestBlock?.block?.header?.state_root_hash) {\n          const balance = await casperService.getAccountBalance(latestBlock?.block?.header?.state_root_hash, balanceUref);\n        }\n\n        const info = await casperService.getDeployInfo(\n          'aaa631f3491be84ebd92485f95e0d311288fc6f4e529756b4da63870eee8a416'\n        )\n        \n        console.log(info, 'infoinfo')\n\n        // @ts-ignore\n        const infoArguments = (info.deploy.session.ModuleBytes.args || []).find(\n          (e: any) => e[0] === 'erc20_contract_hash'\n        )\n\n        if (infoArguments) {\n          const token = infoArguments[1].parsed.split('-')[1]\n\n\n          const tokenName = await casperService.getBlockState(\n            //@ts-ignore\n            latestBlock?.block?.header?.state_root_hash,\n            `hash-${token}`,\n            ['name']\n          )\n  \n          const tokenSymbol = await casperService.getBlockState(\n             //@ts-ignore\n             latestBlock?.block?.header?.state_root_hash,\n             `hash-${token}`,\n             ['symbol']\n          )\n  \n\n          if(info.deploy.session) {\n            // @ts-ignore\n            configLoaded({\n              // @ts-ignore\n              config: info.deploy.session.ModuleBytes.args,\n              tokenInfo: {\n                tokenSymbol: tokenSymbol.CLValue?.data,\n                tokenName: tokenName.CLValue?.data\n              }\n            })(dispatch);\n            //@ts-ignore\n            signed(info.deploy.approvals)(dispatch)\n            //@ts-ignore\n          }\n        }\n        \n      } catch (error: unknown) {\n        if (error?.toString().includes('params')) return\n        toast.error(`An error occured Error: ${error}`);\n      }\n    }\n  }\n  console.log(path, 'pathtesting')\n  return (\n    <div>\n      <FHeader showLogo={true} headerLogo={logoFrm} className=\"bg-none header f-pl-0\">\n        {\n          (path.includes('swap') || path.includes('withdraw') || path.includes('liquidity')) &&\n            <FItem display={\"flex\"} align=\"right\" alignY={\"center\"}>\n              {\n                connection?.isWalletConnected && (\n                  <>\n                    <FItem display={\"flex\"} align=\"right\" alignY={\"center\"}>\n                      <span style={{\"cursor\": \"pointer\"}} onClick={() => navigate.push(`/withdraw`)}>My Withdrawals</span>\n                    </FItem>\n                    <FItem display={\"flex\"} align=\"right\" alignY={\"center\"}>\n                      <span style={{\"cursor\": \"pointer\", \"marginRight\": \"1rem\"}} onClick={() => navigate.push(`/liquidity`)}>Add liquidity</span>\n                    </FItem>\n                  </>\n                )\n              }\n              {connection?.isWalletConnected ? (\n                <>\n                  <FButton\n                    className=\"f-p-0 f-mr-2 view_address\"\n                    prefix={CgArrowsExchangeAlt && <CgArrowsExchangeAlt />}\n                    onClick={() => {\n                      setShowAddressSelectorDlg(true);\n                    }}\n                  ></FButton>\n                  <FButton\n                    className=\"f-mr-1\"\n                    title={\"Disconnect Wallet\"}\n                    onClick={disconnectWallet}\n                    btnInfo={\n                      <>\n                        <FItem display={\"flex\"}>\n                          {IconNetwork && <IconNetwork width={20} /> }\n                          <FTruncateText\n                            className=\"f-ml-1\"\n                            text={connection?.selectedAccount?.address || ''}\n                          />\n                        </FItem>\n                        {\n                          walletAddress && (\n                            <FItem display={\"flex f-pl-2\"}>\n                              {<img src={metamask} width={0} style={{\"minWidth\": \"10px\", \"width\": \"25px\"}} /> }\n                              <FTruncateText\n                                className=\"f-ml-1\"\n                                text={walletAddress || ''}\n                              />\n                            </FItem>\n                          )\n                        }\n                      </>\n                    }\n                  />\n                </>\n              ) : (\n                <FButton\n                  className=\"f-mr-1\"\n                  title={\"Connect to Casper Wallet\"}\n                  onClick={connectWallet}\n                ></FButton>\n              )}\n            </FItem>\n        }\n      </FHeader>\n      <TxProcessingDialog showClose={false} message={\"Loading Configuration\"} show={loading}/>\n      {showAddressSelectorDlg && (\n        <AddressSelector\n          show={showAddressSelectorDlg}\n          onHide={() => setShowAddressSelectorDlg(false)}\n          connectedAccounts={connection?.connectedAccounts || []}\n          onAccountSelect={(account: any) => {\n           // onAccountSelect(account);\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Header;\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/pages/CasperSwap.tsx",["236"],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/WalletAuthenticationInterfaces.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/redux/casper/casperActions.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/network.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/web3Helper.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/stringUtils.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/index.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/index.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/dialogs/ConfirmationDialog.tsx",["237","238","239","240","241","242","243","244","245","246","247"],[],"import { CasperClient, CasperServiceByJsonRPC } from \"casper-js-sdk\";\nimport { FDialog, FList, FTruncateText, FTypo, FLink } from \"ferrum-design-system\";\nimport { useEffect, useState } from \"react\";\nimport Loader from \"./../assets/images/loaderIcon.svg\";\nimport Success from \"./../assets/images/SuccessIcon2.png\";\nimport Failure from \"./../assets/images/FailureIcon.svg\";\nimport LoaderGif from \"./../assets/images/loading2.gif\";\nimport { crucibleApi } from \"../client\";\nimport { useSelector } from \"react-redux\";\nimport { networksToChainIdMap } from \"../utils/network\";\nimport { useHistory } from \"react-router\";\nimport Web3 from \"web3\";\n\nconst RPC_API = \"https://casper-proxy-app-03c23ef9f855.herokuapp.com?url=https://rpc.mainnet.casperlabs.io/rpc\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\nconst casperClient = new CasperClient(RPC_API);\n\nconst ConfirmationDialog = ({\n    show,\n    onHide,\n    message,\n    transaction,\n    amount,\n    network = \"BSC_TESTNET\",\n    isSwap = false,\n    onSuccessful,\n    evmSuccessful\n  }: any) => {\n    const [processing, setProcessing] = useState(false)\n    const [isSuccessful, setIsSuccessful] = useState(false)\n    const [isDone, setIsDone] = useState(false)\n    const [intervalId, setIntervalId] = useState(null as any)\n    const { connect: { config, selectedAccount, isWalletConnected, signedAddresses } } = useSelector((state: any) => state.casper);\n    const { walletAddress, currentWalletNetwork } = useSelector((state: any) => state.casper.walletConnector);\n    const navigate = useHistory();\n\n    const checkTransaction = async () => {\n      console.log(processing)\n      if (!processing) {\n        console.log('called checkTransaction')\n        const res = await casperService.getDeployInfo(transaction)\n        if(res.execution_results.length) {\n          //@ts-ignore\n          if(res.execution_results[0].result.Failure) {\n            //@ts-ignore\n            setProcessing(false)\n            setIsDone(true)\n            setIsSuccessful(false)\n            clearInterval(intervalId)\n          }\n          //@ts-ignore\n          if(res.execution_results[0].result.Success && !isDone) {\n              setProcessing(false)\n              setIsDone(true)\n              setIsSuccessful(true)\n\n              if (onSuccessful) {\n                onSuccessful()\n              }\n              //@ts-ignore\n              if (isSwap && !isDone) {\n                console.log('called', isDone)\n                await setIsDone(true)\n                clearInterval(intervalId)\n                console.log(isDone)\n              }\n          }\n        }\n      }\n    }\n\n    // useEffect(() => {\n    //   console.log(isSuccessful, processing, isDone, transaction, 'isSuccessfulisSuccessful')\n    //   if (isSuccessful) {\n    //     //@ts-ignore\n    //     const networkData = networksToChainIdMap[currentWalletNetwork]\n    //     const Api = new crucibleApi()\n    //     Api.signInToServer(walletAddress)\n    //     Api.gatewayApi({\n    //       command: 'logCsprTransaction', data: {\n    //         receiveNetwork: networkData.sendNetwork,\n    //         sendAmount: amount,\n    //         sendAddress: `${selectedAccount?.address}`,\n    //         receiveAddress: walletAddress,\n    //         sendNetwork: '109090',\n    //         sendTimestamp: Date.now(),\n    //         sendCurrency: `CSPR:222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473`,\n    //         receiveCurrency: `${networkData.sendCurrency}`,\n    //         creator: `cspr:${selectedAccount?.address}`,\n    //         id: transaction\n    //     }, params: [] });\n    //   }\n    // }, [isSuccessful])\n\n    useEffect(() => {\n        if (transaction && !isDone) {\n          console.log('here', transaction, isDone)\n          setProcessing(true)\n          let intervalId = setInterval(\n            () =>  checkTransaction()\n          , 30000)\n          setIntervalId(intervalId)\n        }\n\n        if (transaction && isDone) {\n          clearInterval(intervalId)\n        }\n    }, [transaction, isDone])\n\n    // useEffect(() => {\n    //   return () => {\n    //     setIsSuccessful(false)\n    //     setProcessing(false)\n    //   }\n    // }, [])\n\n    const generateWithdraw = () => {\n      if (isSuccessful && isSwap) {\n        //@ts-ignore\n        const networkData = networksToChainIdMap[currentWalletNetwork]\n        const Api = new crucibleApi()\n        Api.signInToServer(walletAddress)\n        Api.gatewayApi({\n          command: 'logCsprTransaction', data: {\n            receiveNetwork: networkData.sendNetwork,\n            sendAmount: currentWalletNetwork === 1 ? (Number(amount) * 1000000) : Web3.utils.toWei(amount, 'ether'),\n            sendAddress: `${selectedAccount?.address}`,\n            receiveAddress: walletAddress,\n            sendNetwork: '109090',\n            sendTimestamp: Date.now(),\n            sendCurrency: `CSPR:222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473`,\n            receiveCurrency: `${networkData.sendCurrency}`,\n            creator: `cspr:${selectedAccount?.address}`,\n            id: transaction\n        }, params: [] });\n      }\n    }\n\n    return (\n      <FDialog\n        variant={\"dark\"}\n        size={\"medium\"}\n        onHide={() => {\n          onHide()\n          setIsDone(false)\n          setProcessing(false)\n          setIsSuccessful(false)\n          generateWithdraw()\n        }}\n        show={show}\n        className=\"connect-wallet-dialog text-center\"\n        showClose={true}\n        title={\"\"}\n      >\n        <FList display=\"block\" type=\"number\" variant=\"connect-wallet\">\n          {\n            isDone && transaction ?\n              isSuccessful ?\n                <img src={Success} width={\"120px\"} />\n              : <img src={Failure} width={\"120px\"} />\n            : transaction && processing ?\n              <img src={LoaderGif} width={\"120px\"} />\n            : evmSuccessful ?\n              <img src={Success} width={\"120px\"} />\n            : <img src={Loader} width={\"120px\"} />\n          }\n          <FTypo size={20} className={\"f-mb--5 f-mt--9\"}> \n            {\n              isDone && transaction ?\n               isSuccessful ?\n                  (\n                    <p>\n                      <p>Transaction processed successfully</p>\n                      {\n                        isSwap && <p style={{fontSize: 12, marginTop: \"2px\", color: '#D9B373'}} onClick={async () => { await generateWithdraw(); navigate.push('/withdraw') }}>Kindly Proceed to withdraw</p>\n                      }\n                    </p>\n                  )\n               : ('Transaction failed on chain')\n              :  evmSuccessful ?\n                (\n                  <p>\n                    <p>Transaction processed successfully</p>\n                    {\n                      isSwap && <p style={{fontSize: 12, marginTop: \"2px\", color: '#D9B373'}} onClick={async () => { await generateWithdraw(); navigate.push('/withdraw') }}>Kindly Proceed to withdraw</p>\n                    }\n                  </p>\n                )\n              : (message || 'Loading')\n            }\n          </FTypo>\n          <a href={`https://cspr.live/deploy/${transaction}`} target=\"_blank\" style={{\"color\": \"white\"}}>\n            <FTypo size={15} className={\"f-mb--5 f-mt--9\"}>\n              <FTruncateText text={transaction} />\n            </FTypo>\n          </a>\n        </FList>\n        {/* <FButton onClick={onHide} title={\"Close\"}></FButton> */}\n      </FDialog>\n    );\n  };\n  \nexport default ConfirmationDialog\n  ","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/dialogs/AddressSelector.tsx",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/dialogs/TxProcessingDialog.tsx",["248","249"],[],"import React from \"react\";\nimport {\n  // FButton,\n  FDialog,\n  FList,\n  FLoader,\n  FTypo,\n} from \"ferrum-design-system\";\nimport Loader from \"./../assets/images/loading2.gif\";\n\nconst TxProcessingDialog = ({\n  show,\n  showClose = true,\n  onHide,\n  message\n}: any) => {\n  return (\n    <FDialog\n      variant={\"dark\"}\n      size={\"medium\"}\n      onHide={() => onHide()}\n      show={show}\n      className=\"connect-wallet-dialog text-center\"\n      showClose={showClose}\n      title={\"\"}\n    >\n      <FList display=\"block\" type=\"number\" variant=\"connect-wallet\">\n        <img src={Loader} width={\"170px\"} />\n        <FTypo size={20} className={\"f-mb--5 f-mt--9\"}> {message || 'Loading'} </FTypo>\n      </FList>\n      {/* <FButton onClick={onHide} title={\"Close\"}></FButton> */}\n    </FDialog>\n  );\n};\n\nexport default TxProcessingDialog;\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/connect-wallet/ConnectWalletDialog.tsx",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/stringParser.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/client/index.ts",["250","251"],[],"import { Dispatch } from \"react\";\nimport { AnyAction } from \"redux\";\nimport axios from \"axios\";\n\nexport class crucibleApi {\n  jwtToken = \"\";\n  address = \"\"\n\n  async signInToServer(userAddress: string) {\n    const res = await axios.post('http://localhost:8080', {\n      command: \"signInUsingAddress\",\n      data: { userAddress },\n      params: [],\n    });\n    const { unsecureSession } = res.data;\n    this.address = userAddress;\n    this.jwtToken = unsecureSession;\n    return unsecureSession;\n  }\n\n  gatewayApi(data: any) {\n    return axios.post('http://localhost:8080', data, {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Content-type\": \"Application/json\",\n        Authorization: `Bearer ${this.jwtToken}`,\n      },\n    });\n  }\n}\n\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/walletApplicationWrapperInterfaces.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/walletApplicationWrapper.tsx",[],["252"],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/wallet-connector.tsx",["253"],["254","255","256","257","258","259"],"import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { WalletConnectorProps } from \"./walletConnectorInterfaces\";\nimport { walletConnectorActions } from \".\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"./web3React/connectors\";\nimport Web3 from \"web3\";\nimport { RootState } from \"../../../redux/rootReducer\";\nimport { AiOutlineDisconnect, AiOutlineLoading3Quarters } from \"react-icons/ai\";\nimport { VscDebugDisconnect } from \"react-icons/vsc\";\nimport toast from \"react-hot-toast\";\n// import { WalletAuthencationOnSignIn } from \"../../components/common/wallet-authentication/WalletAuthenticationSignIn\";\nimport * as walletAuthenticatorActions from \"./walletAuthenticationActions\";\n\nexport const WalletConnector = ({\n  WalletConnectView,\n  WalletConnectModal, \n  WalletConnectViewProps,\n}: WalletConnectorProps) => {\n  const [showWalletDialog, setShowWalletDialog] = useState<boolean>(false);\n  const [reconnect, setReconnect] = useState<boolean>(false);\n  const [networkClient, setNetworkClient] = useState<Web3 | undefined>(\n    undefined\n  );\n  const state =  useSelector((state: RootState) => state);\n\n  const dispatch = useDispatch();\n  const { active, activate, deactivate, library, account, chainId, error } =\n    useWeb3React();\n  const { isConnected, isConnecting, currentWalletNetwork, walletAddress } =\n    useSelector((state: any) => state.casper.walletConnector);\n  const {\n    // nonce,\n    applicationUserToken,\n    //  signature, isAllowedonGateway, allowedNetworksonGateway, getSignatureFromMetamask, tokenV2, meV2\n  } = useSelector((state: any) => state.casper.walletAuthenticator);\n\n  \n  useEffect(() => {\n    if (\n      account &&\n      walletAddress &&\n      walletAddress !== account &&\n      isConnected &&\n      active\n    ) {\n      // console.log(\"Account Changed reconnect wallet\");\n      activate(injected);\n      setReconnect(true);\n    }\n    // eslint-disable-next-line\n  }, [walletAddress, account, isConnected, active]);\n\n  useEffect(() => {\n    injected\n      .isAuthorized()\n      .then((isAuthorized) => {\n        // console.log(isAuthorized, active, \"isAuthorized\");\n        if (isAuthorized && !active && !error && isConnected) {\n          activate(injected);\n        }\n      })\n      .catch(() => {});\n    // eslint-disable-next-line\n  }, [activate, active, error, isConnected]);\n\n  useEffect(() => {\n    if (\n      chainId &&\n      currentWalletNetwork &&\n      currentWalletNetwork !== chainId &&\n      isConnected &&\n      active\n    ) {\n      // console.log(\"Chain Changed reconnect wallet\");\n      activate(injected);\n      setReconnect(true);\n    }\n    // eslint-disable-next-line\n  }, [currentWalletNetwork, chainId, isConnected, active]);\n\n  useEffect(() => {\n    if (active && !isConnected && library && !networkClient) {\n      // console.log(\"web3 react connect set network client\");\n      dispatch(walletConnectorActions.connectWallet());\n      setNetworkClient(library);\n    }\n    if (!active && isConnected && !library && !isConnecting) {\n      // console.log(\"connected in currenct browser session reconnect wallet\");\n      activate(injected);\n      setReconnect(true);\n    }\n    // eslint-disable-next-line\n  }, [isConnected, active, library, isConnecting, networkClient]);\n\n  useEffect(() => {\n    if (reconnect && active) {\n      // console.log(\n      //   \"reconnect called and web3 is active again reset network client to set again\"\n      // );\n      dispatch(walletConnectorActions.reconnectWallet());\n      setNetworkClient(undefined);\n      setReconnect(false);\n    }\n    // eslint-disable-next-line\n  }, [reconnect, active]);\n\n  useEffect(() => {\n    if (\n      active &&\n      networkClient &&\n      library &&\n      !isConnected &&\n      account &&\n      chainId &&\n      isConnecting\n    ) {\n      // console.log(\n      //   \"network client is set, web3 react is also active test by fetching account balance\"\n      // );\n      networkClient.eth\n        .getBalance(account?.toString())\n        .then((balance) => {\n          // console.log(\n          //   \"newtork ping completed successfully update redux with wallet and network client information\",\n          //   balance,\n          //   account?.toString()\n          // );\n          dispatch(\n            walletConnectorActions.walletConnected({\n              chainId,\n              account,\n              balance,\n              currentWallet: undefined,\n              networkClient,\n            })\n          );\n        })\n        .catch((err) => {\n          // console.log(\"newtork ping failed reset wallet state\");\n          // console.log(err, \" : error connecting wallet\");\n          toast.error(err || \"Error connecting wallet\");\n          dispatch(walletConnectorActions.resetWalletConnector());\n        });\n    }\n    // eslint-disable-next-line\n  }, [\n    networkClient,\n    library,\n    isConnected,\n    active,\n    account,\n    chainId,\n    isConnecting,\n  ]);\n\n  const openWalletSelectorDialog = () => {\n    // console.log(\"open wallet selector to connect\");\n    if (!isConnecting) {\n      if (!isConnected) {\n        setShowWalletDialog(true);\n      } else {\n        // console.log(\"wallet is already connect disconnect wallet\");\n        dispatch(walletConnectorActions.resetWalletConnector());\n        dispatch(\n          walletAuthenticatorActions.resetWalletAuthentication({\n            userToken: applicationUserToken,\n          })\n        );\n        dispatch(\n          walletAuthenticatorActions.removeSession({\n            userToken: applicationUserToken,\n          })\n        );\n        setNetworkClient(undefined);\n        deactivate();\n      }\n    } else {\n    }\n  };\n\n\n  const connectMetaMask = () => {\n    if (isConnected) {\n      dispatch(walletConnectorActions.resetWalletConnector());\n      setNetworkClient(undefined);\n      deactivate();\n    } else {\n      activate(injected);\n      setShowWalletDialog(false);\n      setNetworkClient(undefined);\n    }\n  };\n\n  useEffect(() => {\n    if (error) {\n      dispatch(walletConnectorActions.resetWalletConnector());\n      toast.error(error?.message || \"Error connecting wallet\");\n    }\n    // eslint-disable-next-line\n  }, [error]);\n\n  console.log(WalletConnectView, 'WalletConnectView')\n  return (\n    <>\n      <WalletConnectView\n        {...{\n          ...WalletConnectViewProps,\n          prefix: {\n            ...(isConnecting ? (\n              <AiOutlineLoading3Quarters />\n            ) : !isConnected ? (\n              <VscDebugDisconnect />\n            ) : (\n              <AiOutlineDisconnect />\n            )),\n          },\n\n          title: isConnecting\n            ? \"Connecting...\"\n            : !isConnected\n            ? \"Connect to Metamask\"\n            : \"Disconnect\",\n          disabled: isConnecting,\n        }}\n        onClick={() => {\n          openWalletSelectorDialog();\n        }}\n      />\n      <WalletConnectModal\n        show={showWalletDialog}\n        metaMaskClickEvent={() => {\n          connectMetaMask();\n        }}\n        onHide={() => setShowWalletDialog(false)}\n      />\n      {/* { isAuthenticationNeeded && <WalletAuthencationOnSignIn account={account} networkClient={networkClient} isAuthenticationNeeded={isAuthenticationNeeded} /> } */}\n    </>\n  );\n};\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/redux/walletApplicationWrapperActions.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/redux/walletConnectorActions.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/redux/walletConnectorSlice.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/redux/walletApplicationWrapperSlice.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/walletAuthenticationActions.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/walletConnectorInterfaces.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/web3React/connectors.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/pages/CasperAddLiquidity.tsx",["260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275"],[],"import { useEffect, useState } from \"react\";\nimport { FButton, FCard, FGrid, FGridItem, FInputText, FItem, FTypo } from \"ferrum-design-system\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStakingInfo } from \"../utils/DateUtil\";\nimport { connectWallet, connectWallet as connectWalletDispatch } from '../redux/casper/casperActions';\nimport { useHistory, useParams } from \"react-router\";\nimport { CasperServiceByJsonRPC, CLPublicKey, CLValue, \n  CLValueBuilder, \n  decodeBase16, \n  DeployUtil,\n  RuntimeArgs,\n  Signer,\n  CasperClient\n} from \"casper-js-sdk\";\nimport toast from \"react-hot-toast\";\nimport TxProcessingDialog from \"../dialogs/TxProcessingDialog\";\nimport ConfirmationDialog from \"../dialogs/ConfirmationDialog\";\nimport { crucibleApi } from \"../client\";\nimport { Web3Helper } from \"../utils/web3Helper\";\nimport { networksToChainIdMap } from \"../utils/network\";\nimport { setContractHash } from \"../utils/stringParser\";\n\nconst RPC_API = \"https://casper-proxy-app-03c23ef9f855.herokuapp.com?url=https://rpc.mainnet.casperlabs.io/rpc\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\nconst casperClient = new CasperClient(RPC_API);\n\nexport const CasperAddLiquidity = () => {\n  const navigate = useHistory();\n  const { bridgePoolAddress }: any = useParams();\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const [amount, setAmount] = useState();\n  const [targetNetwork, setTargetNetwork] = useState('30');\n  const [targetToken, setTargetToken] = useState('BASE_FRM_T');\n  const [processMsg, setProcessMsg] = useState('');\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const connection = useSelector((state: any) => state.casper.connect)\n  const cspr = useSelector((state: any) => state.casper)\n\n  const { connect: { config, selectedAccount, isWalletConnected, signedAddresses, network } } = useSelector((state: any) => state.casper);\n  console.log(cspr)\n  useEffect(() => {\n    //@ts-ignore\n    const casperWalletProvider = window.CasperWalletProvider;  \n    const provider = casperWalletProvider();\n    console.log(provider)\n  }, [])\n\n  const { isConnected, isConnecting, currentWalletNetwork, walletAddress, networkClient } =\n    useSelector((state: any) => state.casper.walletConnector);\n\n  async function swapEvm():Promise<any>{\n    //@ts-ignore\n    const networkData = networksToChainIdMap[currentWalletNetwork]\n    const Api = new crucibleApi()\n    await Api.signInToServer(walletAddress)\n\t\tconst res = await Api.gatewayApi({\n            command: 'swapGetTransaction', data: {\n              amount: amount,\n              targetCurrency: `CSPR:222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473`,\n              currency: networkData?.currency || 'BSC_TESTNET:0xfe00ee6f00dd7ed533157f6250656b4e007e7179'\n          },\n\t\t\tparams: [] });\n    \n    if (res.data.requests) {\n      const helper = new Web3Helper(networkClient)\n      const tx = await helper.sendTransactionAsync(\n        dispatch,\n        res.data.requests\n      )\n      if (tx) {\n        // const res = await Api.gatewayApi({\n        //   command: 'logEvmAndNonEvmTransaction', data: {\n        //     \"id\": tx.split(\"|\")[0],\n        //     \"sendNetwork\": networkData?.sendNetwork || \"BSC_TESTNET\",\n        //     \"sendAddress\":  `${walletAddress}`,\n        //     \"receiveAddress\": `${selectedAccount?.address}`,\n        //     \"sendCurrency\": networkData?.currency || \"BSC_TESTNET:0xfe00ee6f00dd7ed533157f6250656b4e007e7179\",\n        //     \"sendAmount\": amount,\n        //     \"receiveCurrency\": `CSPR:222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473`,\n        // },\n        // params: [] });\n        setShowConfirmation(true)\n      }\n    }\n\t}\n\n  async function AccountInformation() {\n    //@ts-ignore\n    const casperWalletProvider = await window.CasperWalletProvider;    \n    const provider = casperWalletProvider();\n    const isConnected = await provider.isConnected();\n\n    if (isConnected) {\n      try {\n        const publicKey = await provider.getActivePublicKey();\n        //textAddress.textContent += publicKey;\n\n        const latestBlock = await casperService.getLatestBlockInfo();\n\n        // const root = await casperService.getStateRootHash(latestBlock?.block?.header?.state_root_hash);\n\n        await connectWalletDispatch([{\n          \"address\": publicKey\n        }])(dispatch)\n        const balanceUref = await casperService.getAccountBalanceUrefByPublicKey(latestBlock?.block?.header?.state_root_hash || '', CLPublicKey.fromHex(publicKey));\n        \n        if (latestBlock?.block?.header?.state_root_hash) {\n          const balance = await casperService.getAccountBalance(latestBlock?.block?.header?.state_root_hash, balanceUref);\n        }\n\n        const info = await casperService.getDeployInfo(\n          'aaa631f3491be84ebd92485f95e0d311288fc6f4e529756b4da63870eee8a416'\n        )\n\n        // @ts-ignore\n        const infoArguments = (info.deploy.session.ModuleBytes.args || []).find(\n          (e: any) => e[0] === 'erc20_contract_hash'\n        )\n\n        if (infoArguments) {\n          const token = infoArguments[1].parsed.split('-')[1]\n\n\n          const tokenName = await casperService.getBlockState(\n            //@ts-ignore\n            latestBlock?.block?.header?.state_root_hash,\n            `hash-${token}`,\n            ['name']\n          )\n  \n          const tokenSymbol = await casperService.getBlockState(\n             //@ts-ignore\n             latestBlock?.block?.header?.state_root_hash,\n             `hash-${token}`,\n             ['symbol']\n          )\n  \n\n          if(info.deploy.session) {\n            // @ts-ignore\n            configLoaded({\n              // @ts-ignore\n              config: info.deploy.session.ModuleBytes.args,\n              tokenInfo: {\n                tokenSymbol: tokenSymbol.CLValue?.data,\n                tokenName: tokenName.CLValue?.data\n              }\n            })(dispatch);\n            //@ts-ignore\n            signed(info.deploy.approvals)(dispatch)\n            //@ts-ignore\n          }\n        }\n        \n      } catch (error: unknown) {\n        if (error?.toString().includes('params')) return\n        toast.error(`An error occured Error: ${error}`);\n      }\n    }\n  }\n\n  const connectWallet = async () => {\n    //@ts-ignore\n    const casperWalletProvider = await window.CasperWalletProvider;    \n    const provider = casperWalletProvider();\n\n    const isConnected = await provider.isConnected();\n\n    if (isConnected) {\n      await AccountInformation();\n    }   \n  };\n\n  const performAddLiquidty = async () => {\n    //@ts-ignore\n    const networkData = networksToChainIdMap[currentWalletNetwork]\n    console.log(networkData)\n    if (\n      isWalletConnected &&\n      selectedAccount\n    ) {\n      //@ts-ignore\n      const casperWalletProvider = await window.CasperWalletProvider;    \n      const provider = casperWalletProvider();\n      setLoading(true)\n      try {\n        const publicKeyHex = selectedAccount?.address;\n        const senderPublicKey = CLPublicKey.fromHex(publicKeyHex);\n\n        const deployParams = new DeployUtil.DeployParams(\n          senderPublicKey,\n          'casper'\n        );\n\n        const args = RuntimeArgs.fromMap({\n          \"amount\": CLValueBuilder.u256(Number(amount) * 100),\n          \"token_address\": CLValueBuilder.string('contract-package-wasm5fe4b52b2b1a3a0eebdc221ec9e290df1535ad12a7fac37050095201f449acc4'),\n          \"bridge_pool_contract_package_hash\": CLValueBuilder.string('contract-package-wasme0f1bcfbbc1554dc0cbd1316cc1658645b58898aa5add056985f9d6cb0f6f75b'),\n        });\n\n        const session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(\n          decodeBase16('e0f1bcfbbc1554dc0cbd1316cc1658645b58898aa5add056985f9d6cb0f6f75b'),\n          'add_liquidity',\n          args\n        );\n\n        const payment = DeployUtil.standardPayment(10000000000);\n\n        const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n\n        const deployJson: any = DeployUtil.deployToJson(deploy);\n      \n        provider.sign(JSON.stringify(deployJson), publicKeyHex).then(async (signedDeployJson: any) => {\n          const signedDeploy = DeployUtil.setSignature(\n            deploy,\n            signedDeployJson.signature,\n            CLPublicKey.fromHex(publicKeyHex)\n          );\n          // const signedDeploy = DeployUtil.deployFromJson(signedDeployJson);\n          if (signedDeploy) {\n            const res = await casperClient.putDeploy(signedDeploy);\n            setProcessMsg(res)\n            setLoading(false)\n            setShowConfirmation(true)\n          }\n          \n        });\n          // navigate.push(`/${config._id}`);\n          //toast.success(`${amount} tokens are staked successfully`);\n       \n      } catch (e) {\n        toast.error(\"An error occured please see console for details\");\n      } finally {\n        //setLoading(false)\n      }\n\n    } else {\n      // navigate.push(`/${config._id}`);\n    }\n  };\n\n  const performCasperApproval = async () => {\n    if (\n      isWalletConnected &&\n      selectedAccount\n    ) {\n      //@ts-ignore\n      const casperWalletProvider = await window.CasperWalletProvider;    \n      const provider = casperWalletProvider();\n      try {\n        // (selectedAccount?.address, Number(amount));\n        const publicKeyHex = selectedAccount?.address;\n        const senderPublicKey = CLPublicKey.fromHex(publicKeyHex);\n\n        const deployParams = new DeployUtil.DeployParams(\n        senderPublicKey,\n        'casper'\n        );\n\n        const args = RuntimeArgs.fromMap({\n            \"amount\": CLValueBuilder.u256(Number(5000000000000000).toFixed()),\n            'spender': setContractHash(`hash-a690c81a73e604c90541b05214b512181cfe457ae393ba68e74b111f66cde3d5`)\n          });\n\n        const session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(\n          decodeBase16('31dbbadf2b6e06be54d834da408469783abe63e404ede27d83e900ed2886f1b6'),\n          'approve',\n        args\n        );\n\n        const payment = DeployUtil.standardPayment(2000000000);\n\n        const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n\n        const deployJson: any = DeployUtil.deployToJson(deploy);\n    \n        provider.sign(JSON.stringify(deployJson), publicKeyHex).then(async (signedDeployJson: any) => {\n            const signedDeploy = DeployUtil.setSignature(\n              deploy,\n              signedDeployJson.signature,\n              CLPublicKey.fromHex(publicKeyHex)\n            );\n\n            if (signedDeploy) {\n                const res = await casperClient.putDeploy(signedDeploy);\n                console.log(res, 'resres');\n                if (res) {\n                \n                }\n                setProcessMsg(res)\n                setLoading(false)\n                setShowConfirmation(true)\n            }\n        });\n          // navigate.push(`/${config._id}`);\n        //toast.success(`${amount} tokens are staked successfully`);\n        \n        } catch (e) {\n          console.log(\"ERROR : \", e);\n            toast.error(\"An error occured please see console for details\");\n            // navigate.push(`/${config._id}`);\n        } finally {\n        //setLoading(false)\n        }\n\n    } else {\n        // navigate.push(`/${config._id}`);\n    }\n  };\n\n  //@ts-ignore\n  const networkData = networksToChainIdMap[currentWalletNetwork]\n\n  return (\n    <>\n        <FCard className={\"card-staking f-mb-2\"}>\n        <FGrid>\n          <FTypo size={18} align={\"center\"} className={\"f-mb--5 f-mt--7\"}>\n            Add Liquidity to CASPER\n          </FTypo>\n          <FGridItem alignX={\"center\"} size={[8, 8, 12]} className=\"f-m-auto f-mb-1\">\n            <FItem align={\"center\"}>\n              <FInputText\n                className={\"f-mt-2\"}\n                label={\"LIQUIDITY AMOUNT\"}\n                placeholder={\"0\"}\n                value={amount}\n                onChange={(e: any) => {\n                  e.preventDefault();\n                  const re = /^-?\\d*\\.?\\d*$/;\n                  if (e.target.value === \"\" || re.test(e.target.value)) {\n                    setAmount(e.target.value);\n                  }\n                }}\n                postfix={\n                  <FTypo className={\"f-pr-1\"} color=\"#dab46e\">\n                    TOKEN\n                  </FTypo>\n                }\n              />\n              <FInputText\n                className={\"f-mt-2\"}\n                label={\"Target Network\"}\n                disabled\n                value={'CASPER'}\n                onChange={(e: any) => {}}\n              />\n              {\n                connection.isWalletConnected && (\n                  <>\n                    <FButton \n                      title={\"Add Liquidity\"}\n                      className=\"w-100 f-mt-2\"\n                      onClick={() => performAddLiquidty()}\n                    />\n                    <div className=\"w-100 f-mt-2 flex jc jc-end\" style={{\"cursor\": \"pointer\"}} onClick={() => performCasperApproval()}>Approve</div>\n                  </>\n                )\n              }\n            </FItem>\n          </FGridItem>\n         \n        </FGrid>\n        <ConfirmationDialog\n          amount={amount}\n          onHide={() => {\n            setShowConfirmation(false)\n            setProcessMsg(\"\")\n          }} \n          transaction={processMsg}\n          message={'Transaction sent to network and is processing.'}\n          show={showConfirmation}\n          isSwap={false}\n          network={networkData?.sendNetwork}\n        />\n        <TxProcessingDialog onHide={() =>setLoading(false)} message={ processMsg || \"Transaction Processing....\"} show={loading}/>\n        </FCard>\n    </>\n  );\n};\n\nexport default CasperAddLiquidity\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/approvalButtonWrapper.tsx",["276"],["277"],"import { AnyAction, createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport React, { Dispatch, useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ApprovalState } from \"./types\";\nimport { BigUtils, parseCurrency } from \"./types\";\nimport { CrucibleClient } from \"./crucibleClient\";\nimport { Web3Helper } from \"./web3Helper\";\nimport Web3 from \"web3\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { ChainEventBase, ChainEventItem } from \"./chainEventItem\";\nexport interface IApprovableButtonWrapperViewProps {\n  isApprovalMode: boolean;\n  pendingApproval: boolean;\n  approvalTransactionId: string;\n  error?: string;\n  onApproveClick: () => void;\n}\nexport interface IApprovableButtonWrapperOwnProps {\n  currency: string;\n  contractAddress: string;\n  userAddress: string;\n  amount: string;\n  View: (props: IApprovableButtonWrapperViewProps) => any;\n}\nfunction mapStateToProps(state: any): ApprovalState {\n  return state.approval;\n}\nexport function approvalKey(userAddress: string, contractAddress: string, currency: string) {\n  return `${userAddress}|${contractAddress}|${currency}`;\n}\nexport const doGetApproval = createAsyncThunk(\n  \"approveButton/doGetApproval\",\n  async (\n    payload: {\n      userAddress: string;\n      contractAddress: string;\n      currency: string;\n      web3Sdk: any;\n    },\n    ctx\n  ) => {\n    const { userAddress, contractAddress, currency, web3Sdk } = payload;\n    const web3Helper = new Web3Helper(web3Sdk as any);\n    const client = new CrucibleClient(web3Helper);\n    const allocation = await client.getContractAllocation(userAddress, contractAddress, currency);\n    if (!!allocation && allocation.data) {\n      ctx.dispatch(\n        approvableButtonSlice.actions.allocationUpdated({\n          contractAddress,\n          userAddress,\n          currency,\n          allocation: allocation.data.allocation,\n        })\n      );\n    }\n    // const api = inject<ApiClient>(ApiClient);\n    // const allocation = await api.getContractAllocation(userAddress, contractAddress, currency);\n    // console.log('doGetApproval', payload, {allocation});\n    // if (!!allocation) {\n    //  ctx.dispatch(approvableButtonSlice.actions.allocationUpdated({\n    //    contractAddress, userAddress, currency, allocation: allocation.allocation }))\n    // }\n  }\n);\nexport const doApprove = createAsyncThunk(\n  \"approveButton/doApprove\",\n  async (\n    payload: {\n      userAddress: string;\n      contractAddress: string;\n      currency: string;\n      web3Sdk: any;\n    },\n    ctx\n  ) => {\n    const { userAddress, contractAddress, currency, web3Sdk } = payload;\n    const web3Helper = new Web3Helper(web3Sdk as any);\n    const client = new CrucibleClient(web3Helper);\n    const transactionId = await client.setContractAllocation(ctx.dispatch, userAddress, contractAddress, currency, \"\");\n    if (!!transactionId) {\n      ctx.dispatch(\n        approvableButtonSlice.actions.approveTransactionReceived({\n          transactionId,\n        })\n      );\n    }\n  }\n);\n//Action.approvableButtonSlice/approveTransactionReceived\nexport const approvableButtonSlice = createSlice({\n  name: \"approvableButton\",\n  initialState: {\n    approveTransactionId: \"\",\n    pending: false,\n    approvals: {},\n  } as ApprovalState,\n  reducers: {\n    allocationUpdated: (state, action) => {\n      const { userAddress, contractAddress, currency, allocation } = action.payload;\n      state.approvals[approvalKey(userAddress, contractAddress, currency)] = allocation;\n    },\n    transactionFailed: (state, action) => {\n      state.error = action.payload.message || \"Error while getting transaction\";\n      state.pending = false;\n      state.status = \"failed\";\n    },\n    transactionCompleted: (state, action) => {\n      state.error = undefined;\n      state.pending = false;\n      state.status = \"completed\";\n    },\n    approveTransactionReceived: (state, action) => {\n      state.approveTransactionId = action.payload.transactionId;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(doApprove.pending, (state, action) => {\n      state.pending = true;\n      state.error = undefined;\n      state.approveTransactionId = \"\";\n      state.status = \"pending\";\n    });\n    builder.addCase(doApprove.fulfilled, (state, action) => {\n      state.pending = false;\n      state.error = undefined;\n      // state.status = 'completed';\n    });\n    builder.addCase(doApprove.rejected, (state, action) => {\n      state.pending = false;\n      console.log(\"Error running approval\", action.payload);\n      state.error = (action.payload || ({} as any)).toString();\n      state.status = \"failed\";\n    });\n  },\n});\nasync function updateEvent(dispatch: Dispatch<AnyAction>, e: ChainEventBase, web3Sdk: any): Promise<ChainEventBase> {\n  try {\n    const web3TxId = await e.id; // await possible web3 tx id\n    const t = await web3Sdk.eth.getTransaction(e.id);\n    console.log(\"Checking the transloota \", t);\n    if (t && t.blockNumber) {\n      console.log(\"Translo iso componte \", t);\n      dispatch(\n        approvableButtonSlice.actions.transactionCompleted({\n          transactionId: e.id,\n        })\n      );\n      return { ...e, status: \"completed\" }; // TODO: Check for failed\n    }\n    console.log(\"Noting inderezding \", e);\n    return { ...e, status: \"pending\" };\n  } catch (ex) {\n    console.log(\"ApprovableButton.updateEvent\");\n    dispatch(\n      approvableButtonSlice.actions.transactionFailed({\n        message: (ex as any).message,\n      })\n    );\n    return { ...e, status: \"failed\" };\n  }\n}\nexport function ApprovableButtonWrapper(ownProps: IApprovableButtonWrapperOwnProps) {\n  const dispatch = useDispatch();\n  const props = useSelector(mapStateToProps);\n\n  const [network] = parseCurrency(ownProps.currency || \"\");\n  const { userAddress, contractAddress, currency } = ownProps;\n  const { status } = props;\n  const currentApproval = props.approvals[approvalKey(userAddress, contractAddress, currency)];\n\n  const [web3Sdk, setweb3Sdk] = useState<Web3 | undefined>(undefined);\n  const { library } = useWeb3React();\n  useEffect(() => {\n    if (userAddress && contractAddress && currency) {\n      dispatch(doGetApproval({ userAddress, contractAddress, currency, web3Sdk }));\n    }\n    if (library && !web3Sdk) {\n      // console.log(\"web3 react connect set network client\");\n      setweb3Sdk(library);\n    }\n    // eslint-disable-next-line\n  }, [userAddress, contractAddress, currency, status, web3Sdk]); \n  \n  return (\n    <>\n      <div>\n        <ChainEventItem\n          id={props.approveTransactionId}\n          network={network as any}\n          initialStatus={\"pending\"}\n          eventType={\"approval\"}\n          updater={(e: any) => updateEvent(dispatch, e, web3Sdk)}\n        >\n          <ownProps.View\n            isApprovalMode={BigUtils.safeParse(currentApproval).lt(BigUtils.safeParse(ownProps.amount || \"0.0001\"))}\n            pendingApproval={props.status === \"pending\"}\n            approvalTransactionId={props.approveTransactionId}\n            onApproveClick={() => dispatch(doApprove({ web3Sdk, ...ownProps }))}\n          />\n        </ChainEventItem>\n      </div>\n    </>\n  );\n}\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/pages/Landing/CasperLanding.tsx",["278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295"],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/types.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/crucibleClient.ts",["296","297","298","299"],[],"import { AnyAction, Dispatch } from \"@reduxjs/toolkit\";\n// import Web3 from \"web3\";\nimport { Web3Helper } from \"./web3Helper\";\nimport { crucibleApi } from \"./Api\";\nimport { toast } from \"react-hot-toast\";\n\nexport class CrucibleClient {\n  public web3Client: any;\n\n  constructor(Web3Client: any) {\n    this.web3Client = Web3Client;\n  }\n\n  __name__() {\n    return \"CrucibleClient\";\n  }\n\n  async getContractAllocation(\n    userAddress: string,\n    contractAddress: string,\n    currency: string\n  ): Promise<any> {\n    const Api = new Web3Helper(this.web3Client)\n    await Api.signInToServer(userAddress);\n    return Api.gatewayApi({\n      command: \"getContractAllocation\",\n      data: { userAddress, contractAddress, currency },\n      params: [],\n    });\n  }\n\n  async setContractAllocation(\n    dispatch: any,\n    userAddress: string,\n    contractAddress: string,\n    currency: string,\n    network: string,\n    amount?: string\n  ): Promise<string> {\n    const Api = new crucibleApi();\n    await Api.signInToServer(userAddress);\n    const requests = await Api.crucibleApi({\n      command: \"approveAllocationGetTransaction\",\n      data: { currency, amount: amount || \"1\", userAddress, contractAddress },\n      params: [],\n    });\n    // console.log('About to submit request', {requests});\n\n    if (requests.data) {\n      const request = await this.networkOverrides(Array.isArray(requests.data) ? requests.data : [requests.data], network)\n      const requestId = await this.web3Client.sendTransactionAsync(\n        dispatch,\n        currency,\n        request,\n        { currency, amount, userAddress, contractAddress }\n      );\n      return requestId.split(\"|\")[0]; // Convert the requestId to transction Id. TODO: Do this a better way\n      //showmodal\n    }\n    return \"\";\n  }\n\n  private getGasFees = async (network: number, type='GENERAL') => {\n    const response = await fetch(\n        `https://api-gateway-v1.svcs.ferrumnetwork.io/api/v1/gasFees/${network}?type=${type}`,\n    )\n\n    if (response.status == 200) {\n        const res = await response.json()\n        return res.body.gasFees\n    }\n    return null;\n  }\n\n  private networkOverrides = async (transactions: any[], networkItem?: string) => {\n    const networks = {\n        \"ETHEREUM_ARBITRUM\": {\n            maxFeePerGas: 200000000,\n            maxPriorityFeePerGas: 100000000,\n            gas: 3500000000,\n            gasLimit: 4000000\n        },\n        \"BSC\": {\n            maxFeePerGas: 3500000000,\n            maxPriorityFeePerGas: 3500000000,\n            gas: 3500000000,\n            gasLimit: 2000000\n        },\n        \"ETHEREUM\": {\n            maxFeePerGas: 100000000000,\n            maxPriorityFeePerGas: 800000000,\n            gas: 550000000,\n            gasLimit: 1000000\n        }\n    }\n\n    const networksMap = {\n        \"ETHEREUM_ARBITRUM\": 42161,\n        \"BSC\": 56,\n        \"ETHEREUM\": 1,\n        \"POLYGON_MAINNET\": 137,\n        \"POLYGON\": 137,\n        \"AVAX_MAINNET\": 43114,\n        \"AVAX\": 43114,\n    }\n\n    console.log(transactions, 'transactionstransactions')\n\n    const res = await Promise.all(transactions.map(\n        async (e: any) => {\n            console.log('called')\n            const txType = (e?.description && (e?.data.startsWith('0x095ea7b')) ? 'approval' : 'general');\n            const network = (e.currency.split(':') || [])[0] || networkItem\n            const chainId = networksMap[network as keyof typeof networksMap]\n            //@ts-ignore\n            const gasOverride = networks[network as any]\n            const gasRes = await this.getGasFees(chainId, txType)\n            console.log(chainId, gasRes, 'called22')\n\n            if (chainId && gasRes) {\n                const gasFee = {\n                    gas: gasRes?.gasLimit,\n                    gasPrice: gasRes?.gasLimit,\n                    gasLimit: Number(gasRes.gasLimit),\n                    maxFeePerGas: Number(gasRes.maxFeePerGas) * 1000000000,\n                    maxPriorityFeePerGas: Number(gasRes.maxPriorityFeePerGas) * 1000000000,\n                }\n                e.gas = gasFee;\n                return e\n            }else {\n                if(network && gasOverride) {\n                    e.gas = gasOverride\n                    return e\n                }else {\n                    return e\n                }\n            }               \n        }\n    ))\n    return res;\n  }\n\n  async contract(userAddress: string, network: string) {\n    //@ts-ignore\n    const Api = new crucibleApi();\n    await Api.signInToServer(userAddress);\n    const response = await Api.crucibleApi({\n      command: \"getCrucible\",\n      data: {},\n      params: [],\n    });\n\n    return response;\n  }\n}\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/web3Helper.ts",["300"],[],"import Web3 from \"web3\";\nimport { Big } from \"big.js\";\nimport axios from \"axios\";\n\nexport class Web3Helper {\n  web3Client: Web3;\n  jwtToken = \"\";\n  address = \"\"\n\n  constructor(web3: Web3) {\n    this.web3Client = web3;\n  }\n\n  async signInToServer(userAddress: string) {\n    const res = await axios.post('http://localhost:8080', {\n      command: \"signInUsingAddress\",\n      data: { userAddress },\n      params: [],\n    });\n    const { unsecureSession } = res.data;\n    this.address = userAddress;\n    this.jwtToken = unsecureSession;\n    return unsecureSession;\n  }\n\n  gatewayApi(data: any) {\n    return axios.post('http://localhost:8080', data, {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Content-type\": \"Application/json\",\n        Authorization: `Bearer ${this.jwtToken}`,\n      },\n    });\n  }\n\n  async sendTransactionAsync(\n    dispatch: any,\n    currency: string,\n    transactions: any[],\n    payload?: any\n  ): Promise<string> {\n    const txIds: string[] = [];\n    const txs = await this.networkOverrides(transactions, currency)\n    for (const tx of txs) {\n      const txId = await new Promise<{ [k: string]: string }>(\n        (resolve, reject) =>\n          this.web3Client.eth\n            .sendTransaction({\n              from: tx.from,\n              to: tx.contract,\n              value: tx.value || \"0x\",\n              data: tx.data,\n              gas: tx.gas?.gasLimit,\n              gasPrice: tx.gas?.gasPrice,\n              maxPriorityFeePerGas: tx.gas?.maxPriorityFeePerGas,\n              maxFeePerGas: tx.gas?.maxFeePerGas\n              // chainId: this.connection.netId()\n            })\n            // .on(\"confirmation\", function (part1, part2) {\n            //   console.log(\"confirmation\", part1, part2);\n            // })\n            .on(\"transactionHash\", (transactionHash) => {\n              //dispatch(transactionHash);\n            })\n            .then((h: any) => {\n              resolve(h);\n            })\n            .catch(reject)\n      );\n      // console.log(txId);\n      txIds.push(txId.transactionHash);\n    }\n    // console.log(txIds, \"txIdstxIds\");\n    return txIds.join(\",\") + \"|\" + JSON.stringify(payload || \"\");\n  }\n\n  async amountToHuman(amount: string, decimal: number) {\n    const decimalFactor = 10 ** decimal;\n    return new Big(amount).div(decimalFactor).toFixed();\n  }\n\n  weiToEther(wei: any) {\n    return Web3.utils.fromWei(String(wei), \"ether\");\n  }\n\n\n  private getGasFees = async (network: number, type='general') => {\n    const response = await fetch(\n        `https://api-gateway-v1.svcs.ferrumnetwork.io/api/v1/gasFees/${network}?type=${type}`,\n    )\n\n    if (response.status == 200) {\n        const res = await response.json()\n        return res.body.gasFees\n    }\n    return null;\n  }\n\n  private networkOverrides = async (transactions: any[], networkItem?: string) => {\n    const networks = {\n        \"ETHEREUM_ARBITRUM\": {\n            maxFeePerGas: 200000000,\n            maxPriorityFeePerGas: 100000000,\n            gas: 3500000000,\n            gasLimit: 4000000\n        },\n        \"BSC\": {\n            maxFeePerGas: 3500000000,\n            maxPriorityFeePerGas: 3500000000,\n            gas: 3500000000,\n            gasLimit: 2000000\n        },\n        \"ETHEREUM\": {\n            maxFeePerGas: 100000000000,\n            maxPriorityFeePerGas: 800000000,\n            gas: 550000000,\n            gasLimit: 1000000\n        }\n    }\n\n    const networksMap = {\n        \"ETHEREUM_ARBITRUM\": 42161,\n        \"BSC\": 56,\n        \"ETHEREUM\": 1,\n        \"POLYGON_MAINNET\": 137,\n        \"POLYGON\": 137,\n        \"AVAX_MAINNET\": 43114,\n        \"AVAX\": 43114,\n    }\n\n    const res = await Promise.all(transactions.map(\n        async (e: any) => {\n            console.log('called')\n            const txType = (e?.description && (e?.data.startsWith('0x095ea7b')) ? 'approval' : 'general');\n            const network = (e.currency.split(':') || [])[0] || networkItem\n            const chainId = networksMap[network as keyof typeof networksMap]\n            //@ts-ignore\n            const gasOverride = networks[network as any]\n            const gasRes = await this.getGasFees(chainId, txType)\n            console.log(chainId, gasRes, 'called22')\n\n            if (chainId && gasRes) {\n                const gasFee = {\n                    gas: gasRes?.gasLimit,\n                    gasLimit: Number(gasRes.gasLimit),\n                    maxFeePerGas: Number(gasRes.maxFeePerGas) * 1000000000,\n                    maxPriorityFeePerGas: Number(gasRes.maxPriorityFeePerGas) * 1000000000,\n                }\n                e.gas = gasFee;\n                return e\n            }else {\n                if(network && gasOverride) {\n                    e.gas = gasOverride\n                    return e\n                }else {\n                    return e\n                }\n            }               \n        }\n    ))\n    return res;\n  }\n\n  async checkTransactionReceipt(txId: any) {\n    try {\n      const receipt = await this.web3Client.eth.getTransactionReceipt(txId);\n      return receipt;\n    } catch (e) {\n      console.log(\"checkTransactionStatus\", e);\n    }\n\n    return null;\n  }\n}\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/chainEventItem.tsx",[],["301","302"],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/Api.js",[],[],[],{"ruleId":"303","severity":1,"message":"304","line":2,"column":19,"nodeType":"305","messageId":"306","endLine":2,"endColumn":24},{"ruleId":"303","severity":1,"message":"307","line":1,"column":32,"nodeType":"305","messageId":"306","endLine":1,"endColumn":39},{"ruleId":"303","severity":1,"message":"308","line":13,"column":47,"nodeType":"305","messageId":"306","endLine":13,"endColumn":54},{"ruleId":"303","severity":1,"message":"309","line":18,"column":5,"nodeType":"305","messageId":"306","endLine":18,"endColumn":11},{"ruleId":"303","severity":1,"message":"310","line":31,"column":7,"nodeType":"305","messageId":"306","endLine":31,"endColumn":20},{"ruleId":"311","severity":1,"message":"312","line":184,"column":8,"nodeType":"313","endLine":184,"endColumn":40,"suggestions":"314"},{"ruleId":"303","severity":1,"message":"315","line":1,"column":17,"nodeType":"305","messageId":"306","endLine":1,"endColumn":26},{"ruleId":"303","severity":1,"message":"316","line":13,"column":8,"nodeType":"305","messageId":"306","endLine":13,"endColumn":12},{"ruleId":"303","severity":1,"message":"317","line":17,"column":10,"nodeType":"305","messageId":"306","endLine":17,"endColumn":22},{"ruleId":"303","severity":1,"message":"318","line":33,"column":7,"nodeType":"305","messageId":"306","endLine":33,"endColumn":17},{"ruleId":"303","severity":1,"message":"319","line":39,"column":11,"nodeType":"305","messageId":"306","endLine":39,"endColumn":28},{"ruleId":"303","severity":1,"message":"320","line":47,"column":11,"nodeType":"305","messageId":"306","endLine":47,"endColumn":22},{"ruleId":"303","severity":1,"message":"321","line":47,"column":24,"nodeType":"305","messageId":"306","endLine":47,"endColumn":36},{"ruleId":"303","severity":1,"message":"322","line":47,"column":38,"nodeType":"305","messageId":"306","endLine":47,"endColumn":58},{"ruleId":"303","severity":1,"message":"323","line":47,"column":75,"nodeType":"305","messageId":"306","endLine":47,"endColumn":88},{"ruleId":"303","severity":1,"message":"324","line":96,"column":17,"nodeType":"305","messageId":"306","endLine":96,"endColumn":24},{"ruleId":"325","severity":1,"message":"326","line":195,"column":32,"nodeType":"327","endLine":195,"endColumn":110},{"ruleId":null,"fatal":true,"severity":2,"message":"328","line":41,"column":0,"nodeType":null},{"ruleId":"303","severity":1,"message":"329","line":2,"column":48,"nodeType":"305","messageId":"306","endLine":2,"endColumn":53},{"ruleId":"303","severity":1,"message":"330","line":15,"column":7,"nodeType":"305","messageId":"306","endLine":15,"endColumn":19},{"ruleId":"303","severity":1,"message":"331","line":30,"column":24,"nodeType":"305","messageId":"306","endLine":30,"endColumn":30},{"ruleId":"303","severity":1,"message":"332","line":30,"column":49,"nodeType":"305","messageId":"306","endLine":30,"endColumn":66},{"ruleId":"303","severity":1,"message":"333","line":30,"column":68,"nodeType":"305","messageId":"306","endLine":30,"endColumn":83},{"ruleId":"311","severity":1,"message":"334","line":100,"column":8,"nodeType":"313","endLine":100,"endColumn":29,"suggestions":"335"},{"ruleId":"325","severity":1,"message":"326","line":148,"column":17,"nodeType":"327","endLine":148,"endColumn":54},{"ruleId":"325","severity":1,"message":"326","line":149,"column":17,"nodeType":"327","endLine":149,"endColumn":54},{"ruleId":"325","severity":1,"message":"326","line":151,"column":15,"nodeType":"327","endLine":151,"endColumn":54},{"ruleId":"325","severity":1,"message":"326","line":152,"column":15,"nodeType":"327","endLine":152,"endColumn":51},{"ruleId":"336","severity":1,"message":"337","line":163,"column":11,"nodeType":"327","messageId":"338","endLine":163,"endColumn":106,"fix":"339"},{"ruleId":"303","severity":1,"message":"340","line":6,"column":3,"nodeType":"305","messageId":"306","endLine":6,"endColumn":10},{"ruleId":"325","severity":1,"message":"326","line":28,"column":9,"nodeType":"327","endLine":28,"endColumn":45},{"ruleId":"303","severity":1,"message":"341","line":1,"column":10,"nodeType":"305","messageId":"306","endLine":1,"endColumn":18},{"ruleId":"303","severity":1,"message":"342","line":2,"column":10,"nodeType":"305","messageId":"306","endLine":2,"endColumn":19},{"ruleId":"311","severity":1,"message":"343","line":57,"column":6,"nodeType":"313","endLine":57,"endColumn":45,"suggestions":"344","suppressions":"345"},{"ruleId":"303","severity":1,"message":"346","line":25,"column":9,"nodeType":"305","messageId":"306","endLine":25,"endColumn":14},{"ruleId":"311","severity":1,"message":"347","line":52,"column":6,"nodeType":"313","endLine":52,"endColumn":51,"suggestions":"348","suppressions":"349"},{"ruleId":"311","severity":1,"message":"347","line":80,"column":6,"nodeType":"313","endLine":80,"endColumn":58,"suggestions":"350","suppressions":"351"},{"ruleId":"311","severity":1,"message":"352","line":94,"column":6,"nodeType":"313","endLine":94,"endColumn":65,"suggestions":"353","suppressions":"354"},{"ruleId":"311","severity":1,"message":"355","line":106,"column":6,"nodeType":"313","endLine":106,"endColumn":25,"suggestions":"356","suppressions":"357"},{"ruleId":"311","severity":1,"message":"355","line":147,"column":6,"nodeType":"313","endLine":155,"endColumn":4,"suggestions":"358","suppressions":"359"},{"ruleId":"311","severity":1,"message":"355","line":201,"column":6,"nodeType":"313","endLine":201,"endColumn":13,"suggestions":"360","suppressions":"361"},{"ruleId":"303","severity":1,"message":"362","line":4,"column":10,"nodeType":"305","messageId":"306","endLine":4,"endColumn":24},{"ruleId":"303","severity":1,"message":"363","line":5,"column":10,"nodeType":"305","messageId":"306","endLine":5,"endColumn":23},{"ruleId":"303","severity":1,"message":"308","line":8,"column":47,"nodeType":"305","messageId":"306","endLine":8,"endColumn":54},{"ruleId":"303","severity":1,"message":"309","line":13,"column":3,"nodeType":"305","messageId":"306","endLine":13,"endColumn":9},{"ruleId":"303","severity":1,"message":"319","line":31,"column":11,"nodeType":"305","messageId":"306","endLine":31,"endColumn":28},{"ruleId":"303","severity":1,"message":"364","line":35,"column":10,"nodeType":"305","messageId":"306","endLine":35,"endColumn":23},{"ruleId":"303","severity":1,"message":"365","line":35,"column":25,"nodeType":"305","messageId":"306","endLine":35,"endColumn":41},{"ruleId":"303","severity":1,"message":"366","line":36,"column":10,"nodeType":"305","messageId":"306","endLine":36,"endColumn":21},{"ruleId":"303","severity":1,"message":"367","line":36,"column":23,"nodeType":"305","messageId":"306","endLine":36,"endColumn":37},{"ruleId":"303","severity":1,"message":"333","line":42,"column":66,"nodeType":"305","messageId":"306","endLine":42,"endColumn":81},{"ruleId":"303","severity":1,"message":"368","line":42,"column":83,"nodeType":"305","messageId":"306","endLine":42,"endColumn":90},{"ruleId":"303","severity":1,"message":"320","line":51,"column":11,"nodeType":"305","messageId":"306","endLine":51,"endColumn":22},{"ruleId":"303","severity":1,"message":"321","line":51,"column":24,"nodeType":"305","messageId":"306","endLine":51,"endColumn":36},{"ruleId":"303","severity":1,"message":"369","line":54,"column":18,"nodeType":"305","messageId":"306","endLine":54,"endColumn":25},{"ruleId":"303","severity":1,"message":"324","line":111,"column":17,"nodeType":"305","messageId":"306","endLine":111,"endColumn":24},{"ruleId":"303","severity":1,"message":"370","line":165,"column":9,"nodeType":"305","messageId":"306","endLine":165,"endColumn":22},{"ruleId":"303","severity":1,"message":"371","line":138,"column":11,"nodeType":"305","messageId":"306","endLine":138,"endColumn":19},{"ruleId":"311","severity":1,"message":"372","line":182,"column":6,"nodeType":"313","endLine":182,"endColumn":63,"suggestions":"373","suppressions":"374"},{"ruleId":"303","severity":1,"message":"375","line":1,"column":47,"nodeType":"305","messageId":"306","endLine":1,"endColumn":58},{"ruleId":"303","severity":1,"message":"376","line":7,"column":8,"nodeType":"305","messageId":"306","endLine":7,"endColumn":14},{"ruleId":"303","severity":1,"message":"377","line":14,"column":22,"nodeType":"305","messageId":"306","endLine":14,"endColumn":31},{"ruleId":"303","severity":1,"message":"318","line":29,"column":7,"nodeType":"305","messageId":"306","endLine":29,"endColumn":17},{"ruleId":"303","severity":1,"message":"378","line":42,"column":11,"nodeType":"305","messageId":"306","endLine":42,"endColumn":21},{"ruleId":"303","severity":1,"message":"331","line":44,"column":24,"nodeType":"305","messageId":"306","endLine":44,"endColumn":30},{"ruleId":"303","severity":1,"message":"333","line":44,"column":68,"nodeType":"305","messageId":"306","endLine":44,"endColumn":83},{"ruleId":"303","severity":1,"message":"368","line":44,"column":85,"nodeType":"305","messageId":"306","endLine":44,"endColumn":92},{"ruleId":"303","severity":1,"message":"320","line":45,"column":13,"nodeType":"305","messageId":"306","endLine":45,"endColumn":24},{"ruleId":"303","severity":1,"message":"321","line":45,"column":26,"nodeType":"305","messageId":"306","endLine":45,"endColumn":38},{"ruleId":"303","severity":1,"message":"323","line":45,"column":77,"nodeType":"305","messageId":"306","endLine":45,"endColumn":90},{"ruleId":"303","severity":1,"message":"379","line":48,"column":12,"nodeType":"305","messageId":"306","endLine":48,"endColumn":34},{"ruleId":"303","severity":1,"message":"380","line":48,"column":36,"nodeType":"305","messageId":"306","endLine":48,"endColumn":61},{"ruleId":"303","severity":1,"message":"324","line":105,"column":19,"nodeType":"305","messageId":"306","endLine":105,"endColumn":26},{"ruleId":"325","severity":1,"message":"326","line":240,"column":13,"nodeType":"327","endLine":240,"endColumn":35},{"ruleId":"325","severity":1,"message":"326","line":244,"column":63,"nodeType":"327","endLine":244,"endColumn":95},{"ruleId":"325","severity":1,"message":"326","line":276,"column":33,"nodeType":"327","endLine":276,"endColumn":53},{"ruleId":"325","severity":1,"message":"326","line":280,"column":104,"nodeType":"327","endLine":280,"endColumn":140},{"ruleId":"303","severity":1,"message":"342","line":1,"column":10,"nodeType":"305","messageId":"306","endLine":1,"endColumn":19},{"ruleId":"303","severity":1,"message":"341","line":1,"column":21,"nodeType":"305","messageId":"306","endLine":1,"endColumn":29},{"ruleId":"303","severity":1,"message":"381","line":5,"column":10,"nodeType":"305","messageId":"306","endLine":5,"endColumn":15},{"ruleId":"382","severity":1,"message":"383","line":68,"column":25,"nodeType":"384","messageId":"385","endLine":68,"endColumn":27},{"ruleId":"382","severity":1,"message":"383","line":92,"column":25,"nodeType":"384","messageId":"385","endLine":92,"endColumn":27},{"ruleId":"311","severity":1,"message":"386","line":136,"column":6,"nodeType":"313","endLine":136,"endColumn":34,"suggestions":"387","suppressions":"388"},{"ruleId":"311","severity":1,"message":"355","line":140,"column":6,"nodeType":"313","endLine":140,"endColumn":8,"suggestions":"389","suppressions":"390"},"@typescript-eslint/no-unused-vars","'FMain' is defined but never used.","Identifier","unusedVar","'FHeader' is defined but never used.","'CLValue' is defined but never used.","'Signer' is defined but never used.","'casperService' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchEvmWithdrawalItems'. Either include it or remove the dependency array.","ArrayExpression",["391"],"'useEffect' is defined but never used.","'logo' is defined but never used.","'CasperClient' is defined but never used.","'STATUS_API' is assigned a value but never used.","'bridgePoolAddress' is assigned a value but never used.","'isConnected' is assigned a value but never used.","'isConnecting' is assigned a value but never used.","'currentWalletNetwork' is assigned a value but never used.","'networkClient' is assigned a value but never used.","'balance' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Parsing error: Merge conflict marker encountered.","'FLink' is defined but never used.","'casperClient' is assigned a value but never used.","'config' is assigned a value but never used.","'isWalletConnected' is assigned a value but never used.","'signedAddresses' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'checkTransaction' and 'intervalId'. Either include them or remove the dependency array.",["392"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"393","text":"394"},"'FLoader' is defined but never used.","'Dispatch' is defined but never used.","'AnyAction' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'isWeb3Initialized', 'networkClient', and 'signIntoServer'. Either include them or remove the dependency array.",["395"],["396"],"'state' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'activate'. Either include it or remove the dependency array.",["397"],["398"],["399"],["400"],"React Hook useEffect has missing dependencies: 'activate' and 'dispatch'. Either include them or remove the dependency array.",["401"],["402"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["403"],["404"],["405"],["406"],["407"],["408"],"'getStakingInfo' is defined but never used.","'connectWallet' is defined but never used.","'targetNetwork' is assigned a value but never used.","'setTargetNetwork' is assigned a value but never used.","'targetToken' is assigned a value but never used.","'setTargetToken' is assigned a value but never used.","'network' is assigned a value but never used.","'swapEvm' is defined but never used.","'connectWallet' is assigned a value but never used.","'web3TxId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'library'. Either include them or remove the dependency array.",["409"],["410"],"'FInputRadio' is defined but never used.","'toggle' is defined but never used.","'useParams' is defined but never used.","'connection' is assigned a value but never used.","'showAddressSelectorDlg' is assigned a value but never used.","'setShowAddressSelectorDlg' is assigned a value but never used.","'toast' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'dispatch', 'event', 'props.eventType', 'props.id', 'props.initialStatus', 'props.network', and 'props.updater'. Either include them or remove the dependency array.",["411"],["412"],["413"],["414"],{"desc":"415","fix":"416"},{"desc":"417","fix":"418"},[6034,6034]," rel=\"noreferrer\"",{"desc":"419","fix":"420"},{"kind":"421","justification":"422"},{"desc":"423","fix":"424"},{"kind":"421","justification":"422"},{"desc":"425","fix":"426"},{"kind":"421","justification":"422"},{"desc":"427","fix":"428"},{"kind":"421","justification":"422"},{"desc":"429","fix":"430"},{"kind":"421","justification":"422"},{"desc":"431","fix":"432"},{"kind":"421","justification":"422"},{"desc":"433","fix":"434"},{"kind":"421","justification":"422"},{"desc":"435","fix":"436"},{"kind":"421","justification":"422"},{"desc":"437","fix":"438"},{"kind":"421","justification":"422"},{"desc":"439","fix":"440"},{"kind":"421","justification":"422"},"Update the dependencies array to be: [fetchEvmWithdrawalItems, selectedAccount, walletAddress]",{"range":"441","text":"442"},"Update the dependencies array to be: [transaction, isDone, checkTransaction, intervalId]",{"range":"443","text":"444"},"Update the dependencies array to be: [dispatch, isConnected, isWeb3Initialized, networkClient, signIntoServer, walletWrapperInitialized]",{"range":"445","text":"446"},"directive","","Update the dependencies array to be: [walletAddress, account, isConnected, active, activate]",{"range":"447","text":"448"},"Update the dependencies array to be: [currentWalletNetwork, chainId, isConnected, active, activate]",{"range":"449","text":"450"},"Update the dependencies array to be: [isConnected, active, library, isConnecting, networkClient, dispatch, activate]",{"range":"451","text":"452"},"Update the dependencies array to be: [reconnect, active, dispatch]",{"range":"453","text":"454"},"Update the dependencies array to be: [networkClient, library, isConnected, active, account, chainId, isConnecting, dispatch]",{"range":"455","text":"456"},"Update the dependencies array to be: [dispatch, error]",{"range":"457","text":"458"},"Update the dependencies array to be: [userAddress, contractAddress, currency, status, web3Sdk, library, dispatch]",{"range":"459","text":"460"},"Update the dependencies array to be: [network, id, initialStatus, dispatch, event, props.updater, props.id, props.initialStatus, props.network, props.eventType]",{"range":"461","text":"462"},"Update the dependencies array to be: [dispatch]",{"range":"463","text":"464"},[7482,7514],"[fetchEvmWithdrawalItems, selectedAccount, walletAddress]",[3788,3809],"[transaction, isDone, checkTransaction, intervalId]",[1692,1731],"[dispatch, isConnected, isWeb3Initialized, networkClient, signIntoServer, walletWrapperInitialized]",[1994,2039],"[walletAddress, account, isConnected, active, activate]",[2719,2771],"[currentWalletNetwork, chainId, isConnected, active, activate]",[3254,3313],"[isConnected, active, library, isConnecting, networkClient, dispatch, activate]",[3654,3673],"[reconnect, active, dispatch]",[4863,4973],"[networkClient, library, isConnected, active, account, chainId, isConnecting, dispatch]",[6199,6206],"[dispatch, error]",[6385,6442],"[userAddress, contractAddress, currency, status, web3Sdk, library, dispatch]",[3917,3945],"[network, id, initialStatus, dispatch, event, props.updater, props.id, props.initialStatus, props.network, props.eventType]",[4028,4030],"[dispatch]"]