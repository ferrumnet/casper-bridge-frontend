[{"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/index.tsx":"1","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/App.tsx":"2","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/redux/store.ts":"3","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/Routes.tsx":"4","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/redux/casper/casperSlice.ts":"5","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/walletAuthenticationSlice.ts":"6","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/index.ts":"7","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/Withdrawals.tsx":"8","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/header/header.tsx":"9","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/pages/CasperSwap.tsx":"10","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/WalletAuthenticationInterfaces.ts":"11","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/redux/casper/casperActions.ts":"12","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/network.ts":"13","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/web3Helper.ts":"14","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/stringUtils.ts":"15","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/index.ts":"16","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/index.ts":"17","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/dialogs/ConfirmationDialog.tsx":"18","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/dialogs/AddressSelector.tsx":"19","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/dialogs/TxProcessingDialog.tsx":"20","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/connect-wallet/ConnectWalletDialog.tsx":"21","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/stringParser.ts":"22","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/client/index.ts":"23","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/walletApplicationWrapperInterfaces.ts":"24","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/walletApplicationWrapper.tsx":"25","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/wallet-connector.tsx":"26","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/redux/walletApplicationWrapperActions.ts":"27","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/redux/walletConnectorActions.ts":"28","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/redux/walletConnectorSlice.ts":"29","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/redux/walletApplicationWrapperSlice.ts":"30","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/walletAuthenticationActions.ts":"31","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/walletConnectorInterfaces.ts":"32","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/web3React/connectors.ts":"33","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/pages/CasperAddLiquidity.tsx":"34","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/approvalButtonWrapper.tsx":"35","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/pages/Landing/CasperLanding.tsx":"36","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/types.ts":"37","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/crucibleClient.ts":"38","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/web3Helper.ts":"39","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/chainEventItem.tsx":"40","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/Api.js":"41"},{"size":687,"mtime":1708521343903,"results":"42","hashOfConfig":"43"},{"size":884,"mtime":1708521343901,"results":"44","hashOfConfig":"43"},{"size":1367,"mtime":1708521285630,"results":"45","hashOfConfig":"43"},{"size":1670,"mtime":1708521343902,"results":"46","hashOfConfig":"43"},{"size":1944,"mtime":1703678328385,"results":"47","hashOfConfig":"43"},{"size":2502,"mtime":1688388176131,"results":"48","hashOfConfig":"43"},{"size":133,"mtime":1688388176127,"results":"49","hashOfConfig":"43"},{"size":13000,"mtime":1708523186724,"results":"50","hashOfConfig":"43"},{"size":8279,"mtime":1708521285628,"results":"51","hashOfConfig":"43"},{"size":26008,"mtime":1708521644646,"results":"52","hashOfConfig":"43"},{"size":729,"mtime":1688388176129,"results":"53","hashOfConfig":"43"},{"size":1819,"mtime":1708521519238,"results":"54","hashOfConfig":"43"},{"size":3980,"mtime":1708521285631,"results":"55","hashOfConfig":"43"},{"size":1284,"mtime":1708521285631,"results":"56","hashOfConfig":"43"},{"size":468,"mtime":1708521285631,"results":"57","hashOfConfig":"43"},{"size":197,"mtime":1688388176130,"results":"58","hashOfConfig":"43"},{"size":285,"mtime":1688388176127,"results":"59","hashOfConfig":"43"},{"size":7173,"mtime":1708521488355,"results":"60","hashOfConfig":"43"},{"size":1184,"mtime":1688388176133,"results":"61","hashOfConfig":"43"},{"size":830,"mtime":1688388176133,"results":"62","hashOfConfig":"43"},{"size":1536,"mtime":1702920575448,"results":"63","hashOfConfig":"43"},{"size":499,"mtime":1708521032897,"results":"64","hashOfConfig":"43"},{"size":759,"mtime":1708521285625,"results":"65","hashOfConfig":"43"},{"size":3719,"mtime":1688388176128,"results":"66","hashOfConfig":"43"},{"size":4642,"mtime":1703678328383,"results":"67","hashOfConfig":"43"},{"size":7270,"mtime":1708521285625,"results":"68","hashOfConfig":"43"},{"size":3934,"mtime":1688388176127,"results":"69","hashOfConfig":"43"},{"size":690,"mtime":1688388176130,"results":"70","hashOfConfig":"43"},{"size":2243,"mtime":1689599604041,"results":"71","hashOfConfig":"43"},{"size":2122,"mtime":1688388176127,"results":"72","hashOfConfig":"43"},{"size":2122,"mtime":1688388176131,"results":"73","hashOfConfig":"43"},{"size":812,"mtime":1689596068552,"results":"74","hashOfConfig":"43"},{"size":228,"mtime":1688388176132,"results":"75","hashOfConfig":"43"},{"size":13692,"mtime":1708521285629,"results":"76","hashOfConfig":"43"},{"size":7135,"mtime":1708521285626,"results":"77","hashOfConfig":"43"},{"size":13582,"mtime":1708521519238,"results":"78","hashOfConfig":"43"},{"size":4349,"mtime":1708521285627,"results":"79","hashOfConfig":"43"},{"size":4458,"mtime":1708521500851,"results":"80","hashOfConfig":"43"},{"size":5082,"mtime":1708521488355,"results":"81","hashOfConfig":"43"},{"size":4059,"mtime":1708521285626,"results":"82","hashOfConfig":"43"},{"size":749,"mtime":1708521285626,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hsgj5i",{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"93"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"93"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"93"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"93"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"93"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"93"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/index.tsx",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/App.tsx",["215"],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/redux/store.ts",[],[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/Routes.tsx",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/redux/casper/casperSlice.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/walletAuthenticationSlice.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/index.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/Withdrawals.tsx",["216","217","218","219","220","221","222"],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/header/header.tsx",["223","224","225","226","227","228","229","230","231","232","233"],[],"import React, { useEffect, useState } from \"react\";\nimport {\n  FHeader,\n  // FHeaderCollapse,\n  FButton,\n  FItem,\n  FTruncateText,\n  // FHeaderMenuItem,\n} from \"ferrum-design-system\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ReactComponent as IconNetwork } from \"../assets/images/casper.svg\";\n\nimport logo from \"../assets/images/logo-light.svg\";\nimport logoFrm from \"../assets/images/logo-frm.png\";\n\nimport { CgArrowsExchangeAlt } from \"react-icons/cg\";\nimport { CasperClient, CasperServiceByJsonRPC, CLPublicKey } from \"casper-js-sdk\";\nimport { \n  connectWallet as connectWalletDispatch,\n  resetWallet,\n  configLoaded,\n  signed\n} from '../redux/casper/casperActions';\nimport toast from \"react-hot-toast\";\nimport AddressSelector from \"../dialogs/AddressSelector\";\nimport { useHistory, useParams } from \"react-router\";\nimport TxProcessingDialog from \"../dialogs/TxProcessingDialog\";\nimport metamask from './../assets/images/Group 334.png';\n\nimport './../assets/scss/styles.scss';\n\nconst RPC_API = \"https://casper-proxy-app-03c23ef9f855.herokuapp.com?url=https://rpc.mainnet.casperlabs.io/rpc\";\nconst STATUS_API = \"https://4211-2a01-4b00-832a-3100-f467-7086-4cda-bb21.eu.ngrok.io/http://159.65.203.12:8888\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\n\nconst Header = () => {\n  const dispatch = useDispatch();\n  const { bridgePoolAddress }: any = useParams();\n  const navigate = useHistory();\n  const connection = useSelector((state: any) => state.casper.connect)\n  const [loading, setLoading] = useState(false);\n\n  var path = window.location.pathname;\n\n  const [showAddressSelectorDlg, setShowAddressSelectorDlg] =  useState<boolean>(false);\n  const { isConnected, isConnecting, currentWalletNetwork, walletAddress, networkClient } = useSelector((state: any) => state.casper.walletConnector);\n\n  const connectWallet = async () => {\n    //@ts-ignore\n    const casperWalletProvider = await window.CasperWalletProvider;    \n    const provider = casperWalletProvider();\n    await provider?.requestConnection()\n\n    const isConnected = await provider.isConnected();\n\n    if (isConnected) {\n      setLoading(true)\n      await AccountInformation();\n      setLoading(false)\n    }\n \n    return;\n  };\n\n  const disconnectWallet = async () => {\n    //@ts-ignore\n    const casperWalletProvider = await window.CasperWalletProvider;    \n    const provider = casperWalletProvider();\n    provider.disconnectFromSite();\n    //@ts-ignore\n    await resetWallet()(dispatch)\n  };\n\n  async function AccountInformation() {\n    //@ts-ignore\n    const casperWalletProvider = await window.CasperWalletProvider;    \n    const provider = casperWalletProvider();\n    const isConnected = await provider.isConnected();\n\n    if (isConnected) {\n      try {\n        const publicKey = await provider.getActivePublicKey();\n        //textAddress.textContent += publicKey;\n\n        const latestBlock = await casperService.getLatestBlockInfo();\n\n        // const root = await casperService.getStateRootHash(latestBlock?.block?.header?.state_root_hash);\n\n        await connectWalletDispatch([{\n          \"address\": publicKey\n        }])(dispatch)\n        const balanceUref = await casperService.getAccountBalanceUrefByPublicKey(latestBlock?.block?.header?.state_root_hash || '', CLPublicKey.fromHex(publicKey));\n\n        if (latestBlock?.block?.header?.state_root_hash) {\n          const balance = await casperService.getAccountBalance(latestBlock?.block?.header?.state_root_hash, balanceUref);\n        }\n\n        const info = await casperService.getDeployInfo(\n          'aaa631f3491be84ebd92485f95e0d311288fc6f4e529756b4da63870eee8a416'\n        )\n        \n        console.log(info, 'infoinfo')\n\n        // @ts-ignore\n        const infoArguments = (info.deploy.session.ModuleBytes.args || []).find(\n          (e: any) => e[0] === 'erc20_contract_hash'\n        )\n\n        if (infoArguments) {\n          const token = infoArguments[1].parsed.split('-')[1]\n\n\n          const tokenName = await casperService.getBlockState(\n            //@ts-ignore\n            latestBlock?.block?.header?.state_root_hash,\n            `hash-${token}`,\n            ['name']\n          )\n  \n          const tokenSymbol = await casperService.getBlockState(\n             //@ts-ignore\n             latestBlock?.block?.header?.state_root_hash,\n             `hash-${token}`,\n             ['symbol']\n          )\n  \n\n          if(info.deploy.session) {\n            // @ts-ignore\n            configLoaded({\n              // @ts-ignore\n              config: info.deploy.session.ModuleBytes.args,\n              tokenInfo: {\n                tokenSymbol: tokenSymbol.CLValue?.data,\n                tokenName: tokenName.CLValue?.data\n              }\n            })(dispatch);\n            //@ts-ignore\n            signed(info.deploy.approvals)(dispatch)\n            //@ts-ignore\n          }\n        }\n        \n      } catch (error: unknown) {\n        if (error?.toString().includes('params')) return\n        toast.error(`An error occured Error: ${error}`);\n      }\n    }\n  }\n  console.log(path, 'pathtesting')\n  return (\n    <div>\n      <FHeader showLogo={true} headerLogo={logoFrm} className=\"bg-none header f-pl-0\">\n        {\n          (path.includes('swap') || path.includes('withdraw') || path.includes('liquidity')) &&\n            <FItem display={\"flex\"} align=\"right\" alignY={\"center\"}>\n              {\n                connection?.isWalletConnected && (\n                  <>\n                    <FItem display={\"flex\"} align=\"right\" alignY={\"center\"}>\n                      <span style={{\"cursor\": \"pointer\"}} onClick={() => navigate.push(`/withdraw`)}>My Withdrawals</span>\n                    </FItem>\n                    <FItem display={\"flex\"} align=\"right\" alignY={\"center\"}>\n                      <span style={{\"cursor\": \"pointer\", \"marginRight\": \"1rem\"}} onClick={() => navigate.push(`/liquidity`)}>Add liquidity</span>\n                    </FItem>\n                  </>\n                )\n              }\n              {connection?.isWalletConnected ? (\n                <>\n                  <FButton\n                    className=\"f-p-0 f-mr-2 view_address\"\n                    prefix={CgArrowsExchangeAlt && <CgArrowsExchangeAlt />}\n                    onClick={() => {\n                      setShowAddressSelectorDlg(true);\n                    }}\n                  ></FButton>\n                  <FButton\n                    className=\"f-mr-1\"\n                    title={\"Disconnect Wallet\"}\n                    onClick={disconnectWallet}\n                    btnInfo={\n                      <>\n                        <FItem display={\"flex\"}>\n                          {IconNetwork && <IconNetwork width={20} /> }\n                          <FTruncateText\n                            className=\"f-ml-1\"\n                            text={connection?.selectedAccount?.address || ''}\n                          />\n                        </FItem>\n                        {\n                          walletAddress && (\n                            <FItem display={\"flex f-pl-2\"}>\n                              {<img src={metamask} width={0} style={{\"minWidth\": \"10px\", \"width\": \"25px\"}} /> }\n                              <FTruncateText\n                                className=\"f-ml-1\"\n                                text={walletAddress || ''}\n                              />\n                            </FItem>\n                          )\n                        }\n                      </>\n                    }\n                  />\n                </>\n              ) : (\n                <FButton\n                  className=\"f-mr-1\"\n                  title={\"Connect to Casper Wallet\"}\n                  onClick={connectWallet}\n                ></FButton>\n              )}\n            </FItem>\n        }\n      </FHeader>\n      <TxProcessingDialog showClose={false} message={\"Loading Configuration\"} show={loading}/>\n      {showAddressSelectorDlg && (\n        <AddressSelector\n          show={showAddressSelectorDlg}\n          onHide={() => setShowAddressSelectorDlg(false)}\n          connectedAccounts={connection?.connectedAccounts || []}\n          onAccountSelect={(account: any) => {\n           // onAccountSelect(account);\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Header;\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/pages/CasperSwap.tsx",["234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263"],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/WalletAuthenticationInterfaces.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/redux/casper/casperActions.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/network.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/web3Helper.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/stringUtils.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/index.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/index.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/dialogs/ConfirmationDialog.tsx",["264","265","266","267","268","269","270","271","272","273"],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/dialogs/AddressSelector.tsx",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/dialogs/TxProcessingDialog.tsx",["274","275"],[],"import React from \"react\";\nimport {\n  // FButton,\n  FDialog,\n  FList,\n  FLoader,\n  FTypo,\n} from \"ferrum-design-system\";\nimport Loader from \"./../assets/images/loading2.gif\";\n\nconst TxProcessingDialog = ({\n  show,\n  showClose = true,\n  onHide,\n  message\n}: any) => {\n  return (\n    <FDialog\n      variant={\"dark\"}\n      size={\"medium\"}\n      onHide={() => onHide()}\n      show={show}\n      className=\"connect-wallet-dialog text-center\"\n      showClose={showClose}\n      title={\"\"}\n    >\n      <FList display=\"block\" type=\"number\" variant=\"connect-wallet\">\n        <img src={Loader} width={\"170px\"} />\n        <FTypo size={20} className={\"f-mb--5 f-mt--9\"}> {message || 'Loading'} </FTypo>\n      </FList>\n      {/* <FButton onClick={onHide} title={\"Close\"}></FButton> */}\n    </FDialog>\n  );\n};\n\nexport default TxProcessingDialog;\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/connect-wallet/ConnectWalletDialog.tsx",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/utils/stringParser.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/client/index.ts",["276","277"],[],"import { Dispatch } from \"react\";\nimport { AnyAction } from \"redux\";\nimport axios from \"axios\";\n\nexport class crucibleApi {\n  jwtToken = \"\";\n  address = \"\"\n\n  async signInToServer(userAddress: string) {\n    const res = await axios.post('http://localhost:8080', {\n      command: \"signInUsingAddress\",\n      data: { userAddress },\n      params: [],\n    });\n    const { unsecureSession } = res.data;\n    this.address = userAddress;\n    this.jwtToken = unsecureSession;\n    return unsecureSession;\n  }\n\n  gatewayApi(data: any) {\n    return axios.post('http://localhost:8080', data, {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Content-type\": \"Application/json\",\n        Authorization: `Bearer ${this.jwtToken}`,\n      },\n    });\n  }\n}\n\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/walletApplicationWrapperInterfaces.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/walletApplicationWrapper.tsx",[],["278"],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/wallet-connector.tsx",["279"],["280","281","282","283","284","285"],"import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { WalletConnectorProps } from \"./walletConnectorInterfaces\";\nimport { walletConnectorActions } from \".\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"./web3React/connectors\";\nimport Web3 from \"web3\";\nimport { RootState } from \"../../../redux/rootReducer\";\nimport { AiOutlineDisconnect, AiOutlineLoading3Quarters } from \"react-icons/ai\";\nimport { VscDebugDisconnect } from \"react-icons/vsc\";\nimport toast from \"react-hot-toast\";\n// import { WalletAuthencationOnSignIn } from \"../../components/common/wallet-authentication/WalletAuthenticationSignIn\";\nimport * as walletAuthenticatorActions from \"./walletAuthenticationActions\";\n\nexport const WalletConnector = ({\n  WalletConnectView,\n  WalletConnectModal, \n  WalletConnectViewProps,\n}: WalletConnectorProps) => {\n  const [showWalletDialog, setShowWalletDialog] = useState<boolean>(false);\n  const [reconnect, setReconnect] = useState<boolean>(false);\n  const [networkClient, setNetworkClient] = useState<Web3 | undefined>(\n    undefined\n  );\n  const state =  useSelector((state: RootState) => state);\n\n  const dispatch = useDispatch();\n  const { active, activate, deactivate, library, account, chainId, error } =\n    useWeb3React();\n  const { isConnected, isConnecting, currentWalletNetwork, walletAddress } =\n    useSelector((state: any) => state.casper.walletConnector);\n  const {\n    // nonce,\n    applicationUserToken,\n    //  signature, isAllowedonGateway, allowedNetworksonGateway, getSignatureFromMetamask, tokenV2, meV2\n  } = useSelector((state: any) => state.casper.walletAuthenticator);\n\n  \n  useEffect(() => {\n    if (\n      account &&\n      walletAddress &&\n      walletAddress !== account &&\n      isConnected &&\n      active\n    ) {\n      // console.log(\"Account Changed reconnect wallet\");\n      activate(injected);\n      setReconnect(true);\n    }\n    // eslint-disable-next-line\n  }, [walletAddress, account, isConnected, active]);\n\n  useEffect(() => {\n    injected\n      .isAuthorized()\n      .then((isAuthorized) => {\n        // console.log(isAuthorized, active, \"isAuthorized\");\n        if (isAuthorized && !active && !error && isConnected) {\n          activate(injected);\n        }\n      })\n      .catch(() => {});\n    // eslint-disable-next-line\n  }, [activate, active, error, isConnected]);\n\n  useEffect(() => {\n    if (\n      chainId &&\n      currentWalletNetwork &&\n      currentWalletNetwork !== chainId &&\n      isConnected &&\n      active\n    ) {\n      // console.log(\"Chain Changed reconnect wallet\");\n      activate(injected);\n      setReconnect(true);\n    }\n    // eslint-disable-next-line\n  }, [currentWalletNetwork, chainId, isConnected, active]);\n\n  useEffect(() => {\n    if (active && !isConnected && library && !networkClient) {\n      // console.log(\"web3 react connect set network client\");\n      dispatch(walletConnectorActions.connectWallet());\n      setNetworkClient(library);\n    }\n    if (!active && isConnected && !library && !isConnecting) {\n      // console.log(\"connected in currenct browser session reconnect wallet\");\n      activate(injected);\n      setReconnect(true);\n    }\n    // eslint-disable-next-line\n  }, [isConnected, active, library, isConnecting, networkClient]);\n\n  useEffect(() => {\n    if (reconnect && active) {\n      // console.log(\n      //   \"reconnect called and web3 is active again reset network client to set again\"\n      // );\n      dispatch(walletConnectorActions.reconnectWallet());\n      setNetworkClient(undefined);\n      setReconnect(false);\n    }\n    // eslint-disable-next-line\n  }, [reconnect, active]);\n\n  useEffect(() => {\n    if (\n      active &&\n      networkClient &&\n      library &&\n      !isConnected &&\n      account &&\n      chainId &&\n      isConnecting\n    ) {\n      // console.log(\n      //   \"network client is set, web3 react is also active test by fetching account balance\"\n      // );\n      networkClient.eth\n        .getBalance(account?.toString())\n        .then((balance) => {\n          // console.log(\n          //   \"newtork ping completed successfully update redux with wallet and network client information\",\n          //   balance,\n          //   account?.toString()\n          // );\n          dispatch(\n            walletConnectorActions.walletConnected({\n              chainId,\n              account,\n              balance,\n              currentWallet: undefined,\n              networkClient,\n            })\n          );\n        })\n        .catch((err) => {\n          // console.log(\"newtork ping failed reset wallet state\");\n          // console.log(err, \" : error connecting wallet\");\n          toast.error(err || \"Error connecting wallet\");\n          dispatch(walletConnectorActions.resetWalletConnector());\n        });\n    }\n    // eslint-disable-next-line\n  }, [\n    networkClient,\n    library,\n    isConnected,\n    active,\n    account,\n    chainId,\n    isConnecting,\n  ]);\n\n  const openWalletSelectorDialog = () => {\n    // console.log(\"open wallet selector to connect\");\n    if (!isConnecting) {\n      if (!isConnected) {\n        setShowWalletDialog(true);\n      } else {\n        // console.log(\"wallet is already connect disconnect wallet\");\n        dispatch(walletConnectorActions.resetWalletConnector());\n        dispatch(\n          walletAuthenticatorActions.resetWalletAuthentication({\n            userToken: applicationUserToken,\n          })\n        );\n        dispatch(\n          walletAuthenticatorActions.removeSession({\n            userToken: applicationUserToken,\n          })\n        );\n        setNetworkClient(undefined);\n        deactivate();\n      }\n    } else {\n    }\n  };\n\n\n  const connectMetaMask = () => {\n    if (isConnected) {\n      dispatch(walletConnectorActions.resetWalletConnector());\n      setNetworkClient(undefined);\n      deactivate();\n    } else {\n      activate(injected);\n      setShowWalletDialog(false);\n      setNetworkClient(undefined);\n    }\n  };\n\n  useEffect(() => {\n    if (error) {\n      dispatch(walletConnectorActions.resetWalletConnector());\n      toast.error(error?.message || \"Error connecting wallet\");\n    }\n    // eslint-disable-next-line\n  }, [error]);\n\n  console.log(WalletConnectView, 'WalletConnectView')\n  return (\n    <>\n      <WalletConnectView\n        {...{\n          ...WalletConnectViewProps,\n          prefix: {\n            ...(isConnecting ? (\n              <AiOutlineLoading3Quarters />\n            ) : !isConnected ? (\n              <VscDebugDisconnect />\n            ) : (\n              <AiOutlineDisconnect />\n            )),\n          },\n\n          title: isConnecting\n            ? \"Connecting...\"\n            : !isConnected\n            ? \"Connect to Metamask\"\n            : \"Disconnect\",\n          disabled: isConnecting,\n        }}\n        onClick={() => {\n          openWalletSelectorDialog();\n        }}\n      />\n      <WalletConnectModal\n        show={showWalletDialog}\n        metaMaskClickEvent={() => {\n          connectMetaMask();\n        }}\n        onHide={() => setShowWalletDialog(false)}\n      />\n      {/* { isAuthenticationNeeded && <WalletAuthencationOnSignIn account={account} networkClient={networkClient} isAuthenticationNeeded={isAuthenticationNeeded} /> } */}\n    </>\n  );\n};\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/redux/walletApplicationWrapperActions.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/redux/walletConnectorActions.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/redux/walletConnectorSlice.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/redux/walletApplicationWrapperSlice.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/walletAuthenticationActions.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/walletConnectorInterfaces.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/wallet-connector/web3React/connectors.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/pages/CasperAddLiquidity.tsx",["286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301"],[],"import { useEffect, useState } from \"react\";\nimport { FButton, FCard, FGrid, FGridItem, FInputText, FItem, FTypo } from \"ferrum-design-system\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStakingInfo } from \"../utils/DateUtil\";\nimport { connectWallet, connectWallet as connectWalletDispatch } from '../redux/casper/casperActions';\nimport { useHistory, useParams } from \"react-router\";\nimport { CasperServiceByJsonRPC, CLPublicKey, CLValue, \n  CLValueBuilder, \n  decodeBase16, \n  DeployUtil,\n  RuntimeArgs,\n  Signer,\n  CasperClient\n} from \"casper-js-sdk\";\nimport toast from \"react-hot-toast\";\nimport TxProcessingDialog from \"../dialogs/TxProcessingDialog\";\nimport ConfirmationDialog from \"../dialogs/ConfirmationDialog\";\nimport { crucibleApi } from \"../client\";\nimport { Web3Helper } from \"../utils/web3Helper\";\nimport { networksToChainIdMap } from \"../utils/network\";\nimport { setContractHash } from \"../utils/stringParser\";\n\nconst RPC_API = \"https://casper-proxy-app-03c23ef9f855.herokuapp.com?url=https://rpc.mainnet.casperlabs.io/rpc\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\nconst casperClient = new CasperClient(RPC_API);\n\nexport const CasperAddLiquidity = () => {\n  const navigate = useHistory();\n  const { bridgePoolAddress }: any = useParams();\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const [amount, setAmount] = useState();\n  const [targetNetwork, setTargetNetwork] = useState('30');\n  const [targetToken, setTargetToken] = useState('BASE_FRM_T');\n  const [processMsg, setProcessMsg] = useState('');\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const connection = useSelector((state: any) => state.casper.connect)\n  const cspr = useSelector((state: any) => state.casper)\n\n  const { connect: { config, selectedAccount, isWalletConnected, signedAddresses, network } } = useSelector((state: any) => state.casper);\n  console.log(cspr)\n  useEffect(() => {\n    //@ts-ignore\n    const casperWalletProvider = window.CasperWalletProvider;  \n    const provider = casperWalletProvider();\n    console.log(provider)\n  }, [])\n\n  const { isConnected, isConnecting, currentWalletNetwork, walletAddress, networkClient } =\n    useSelector((state: any) => state.casper.walletConnector);\n\n  async function swapEvm():Promise<any>{\n    //@ts-ignore\n    const networkData = networksToChainIdMap[currentWalletNetwork]\n    const Api = new crucibleApi()\n    await Api.signInToServer(walletAddress)\n\t\tconst res = await Api.gatewayApi({\n            command: 'swapGetTransaction', data: {\n              amount: amount,\n              targetCurrency: `CSPR:222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473`,\n              currency: networkData?.currency || 'BSC_TESTNET:0xfe00ee6f00dd7ed533157f6250656b4e007e7179'\n          },\n\t\t\tparams: [] });\n    \n    if (res.data.requests) {\n      const helper = new Web3Helper(networkClient)\n      const tx = await helper.sendTransactionAsync(\n        dispatch,\n        res.data.requests\n      )\n      if (tx) {\n        // const res = await Api.gatewayApi({\n        //   command: 'logEvmAndNonEvmTransaction', data: {\n        //     \"id\": tx.split(\"|\")[0],\n        //     \"sendNetwork\": networkData?.sendNetwork || \"BSC_TESTNET\",\n        //     \"sendAddress\":  `${walletAddress}`,\n        //     \"receiveAddress\": `${selectedAccount?.address}`,\n        //     \"sendCurrency\": networkData?.currency || \"BSC_TESTNET:0xfe00ee6f00dd7ed533157f6250656b4e007e7179\",\n        //     \"sendAmount\": amount,\n        //     \"receiveCurrency\": `CSPR:222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473`,\n        // },\n        // params: [] });\n        setShowConfirmation(true)\n      }\n    }\n\t}\n\n  async function AccountInformation() {\n    //@ts-ignore\n    const casperWalletProvider = await window.CasperWalletProvider;    \n    const provider = casperWalletProvider();\n    const isConnected = await provider.isConnected();\n\n    if (isConnected) {\n      try {\n        const publicKey = await provider.getActivePublicKey();\n        //textAddress.textContent += publicKey;\n\n        const latestBlock = await casperService.getLatestBlockInfo();\n\n        // const root = await casperService.getStateRootHash(latestBlock?.block?.header?.state_root_hash);\n\n        await connectWalletDispatch([{\n          \"address\": publicKey\n        }])(dispatch)\n        const balanceUref = await casperService.getAccountBalanceUrefByPublicKey(latestBlock?.block?.header?.state_root_hash || '', CLPublicKey.fromHex(publicKey));\n        \n        if (latestBlock?.block?.header?.state_root_hash) {\n          const balance = await casperService.getAccountBalance(latestBlock?.block?.header?.state_root_hash, balanceUref);\n        }\n\n        const info = await casperService.getDeployInfo(\n          'aaa631f3491be84ebd92485f95e0d311288fc6f4e529756b4da63870eee8a416'\n        )\n\n        // @ts-ignore\n        const infoArguments = (info.deploy.session.ModuleBytes.args || []).find(\n          (e: any) => e[0] === 'erc20_contract_hash'\n        )\n\n        if (infoArguments) {\n          const token = infoArguments[1].parsed.split('-')[1]\n\n\n          const tokenName = await casperService.getBlockState(\n            //@ts-ignore\n            latestBlock?.block?.header?.state_root_hash,\n            `hash-${token}`,\n            ['name']\n          )\n  \n          const tokenSymbol = await casperService.getBlockState(\n             //@ts-ignore\n             latestBlock?.block?.header?.state_root_hash,\n             `hash-${token}`,\n             ['symbol']\n          )\n  \n\n          if(info.deploy.session) {\n            // @ts-ignore\n            configLoaded({\n              // @ts-ignore\n              config: info.deploy.session.ModuleBytes.args,\n              tokenInfo: {\n                tokenSymbol: tokenSymbol.CLValue?.data,\n                tokenName: tokenName.CLValue?.data\n              }\n            })(dispatch);\n            //@ts-ignore\n            signed(info.deploy.approvals)(dispatch)\n            //@ts-ignore\n          }\n        }\n        \n      } catch (error: unknown) {\n        if (error?.toString().includes('params')) return\n        toast.error(`An error occured Error: ${error}`);\n      }\n    }\n  }\n\n  const connectWallet = async () => {\n    //@ts-ignore\n    const casperWalletProvider = await window.CasperWalletProvider;    \n    const provider = casperWalletProvider();\n\n    const isConnected = await provider.isConnected();\n\n    if (isConnected) {\n      await AccountInformation();\n    }   \n  };\n\n  const performAddLiquidty = async () => {\n    //@ts-ignore\n    const networkData = networksToChainIdMap[currentWalletNetwork]\n    console.log(networkData)\n    if (\n      isWalletConnected &&\n      selectedAccount\n    ) {\n      //@ts-ignore\n      const casperWalletProvider = await window.CasperWalletProvider;    \n      const provider = casperWalletProvider();\n      setLoading(true)\n      try {\n        const publicKeyHex = selectedAccount?.address;\n        const senderPublicKey = CLPublicKey.fromHex(publicKeyHex);\n\n        const deployParams = new DeployUtil.DeployParams(\n          senderPublicKey,\n          'casper'\n        );\n\n        const args = RuntimeArgs.fromMap({\n          \"amount\": CLValueBuilder.u256(Number(amount) * 100),\n          \"token_address\": CLValueBuilder.string('contract-package-wasm5fe4b52b2b1a3a0eebdc221ec9e290df1535ad12a7fac37050095201f449acc4'),\n          \"bridge_pool_contract_package_hash\": CLValueBuilder.string('contract-package-wasme0f1bcfbbc1554dc0cbd1316cc1658645b58898aa5add056985f9d6cb0f6f75b'),\n        });\n\n        const session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(\n          decodeBase16('e0f1bcfbbc1554dc0cbd1316cc1658645b58898aa5add056985f9d6cb0f6f75b'),\n          'add_liquidity',\n          args\n        );\n\n        const payment = DeployUtil.standardPayment(10000000000);\n\n        const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n\n        const deployJson: any = DeployUtil.deployToJson(deploy);\n      \n        provider.sign(JSON.stringify(deployJson), publicKeyHex).then(async (signedDeployJson: any) => {\n          const signedDeploy = DeployUtil.setSignature(\n            deploy,\n            signedDeployJson.signature,\n            CLPublicKey.fromHex(publicKeyHex)\n          );\n          // const signedDeploy = DeployUtil.deployFromJson(signedDeployJson);\n          if (signedDeploy) {\n            const res = await casperClient.putDeploy(signedDeploy);\n            setProcessMsg(res)\n            setLoading(false)\n            setShowConfirmation(true)\n          }\n          \n        });\n          // navigate.push(`/${config._id}`);\n          //toast.success(`${amount} tokens are staked successfully`);\n       \n      } catch (e) {\n        toast.error(\"An error occured please see console for details\");\n      } finally {\n        //setLoading(false)\n      }\n\n    } else {\n      // navigate.push(`/${config._id}`);\n    }\n  };\n\n  const performCasperApproval = async () => {\n    if (\n      isWalletConnected &&\n      selectedAccount\n    ) {\n      //@ts-ignore\n      const casperWalletProvider = await window.CasperWalletProvider;    \n      const provider = casperWalletProvider();\n      try {\n        // (selectedAccount?.address, Number(amount));\n        const publicKeyHex = selectedAccount?.address;\n        const senderPublicKey = CLPublicKey.fromHex(publicKeyHex);\n\n        const deployParams = new DeployUtil.DeployParams(\n        senderPublicKey,\n        'casper'\n        );\n\n        const args = RuntimeArgs.fromMap({\n            \"amount\": CLValueBuilder.u256(Number(5000000000000000).toFixed()),\n            'spender': setContractHash(`hash-a690c81a73e604c90541b05214b512181cfe457ae393ba68e74b111f66cde3d5`)\n          });\n\n        const session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(\n          decodeBase16('31dbbadf2b6e06be54d834da408469783abe63e404ede27d83e900ed2886f1b6'),\n          'approve',\n        args\n        );\n\n        const payment = DeployUtil.standardPayment(2000000000);\n\n        const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n\n        const deployJson: any = DeployUtil.deployToJson(deploy);\n    \n        provider.sign(JSON.stringify(deployJson), publicKeyHex).then(async (signedDeployJson: any) => {\n            const signedDeploy = DeployUtil.setSignature(\n              deploy,\n              signedDeployJson.signature,\n              CLPublicKey.fromHex(publicKeyHex)\n            );\n\n            if (signedDeploy) {\n                const res = await casperClient.putDeploy(signedDeploy);\n                console.log(res, 'resres');\n                if (res) {\n                \n                }\n                setProcessMsg(res)\n                setLoading(false)\n                setShowConfirmation(true)\n            }\n        });\n          // navigate.push(`/${config._id}`);\n        //toast.success(`${amount} tokens are staked successfully`);\n        \n        } catch (e) {\n          console.log(\"ERROR : \", e);\n            toast.error(\"An error occured please see console for details\");\n            // navigate.push(`/${config._id}`);\n        } finally {\n        //setLoading(false)\n        }\n\n    } else {\n        // navigate.push(`/${config._id}`);\n    }\n  };\n\n  //@ts-ignore\n  const networkData = networksToChainIdMap[currentWalletNetwork]\n\n  return (\n    <>\n        <FCard className={\"card-staking f-mb-2\"}>\n        <FGrid>\n          <FTypo size={18} align={\"center\"} className={\"f-mb--5 f-mt--7\"}>\n            Add Liquidity to CASPER\n          </FTypo>\n          <FGridItem alignX={\"center\"} size={[8, 8, 12]} className=\"f-m-auto f-mb-1\">\n            <FItem align={\"center\"}>\n              <FInputText\n                className={\"f-mt-2\"}\n                label={\"LIQUIDITY AMOUNT\"}\n                placeholder={\"0\"}\n                value={amount}\n                onChange={(e: any) => {\n                  e.preventDefault();\n                  const re = /^-?\\d*\\.?\\d*$/;\n                  if (e.target.value === \"\" || re.test(e.target.value)) {\n                    setAmount(e.target.value);\n                  }\n                }}\n                postfix={\n                  <FTypo className={\"f-pr-1\"} color=\"#dab46e\">\n                    TOKEN\n                  </FTypo>\n                }\n              />\n              <FInputText\n                className={\"f-mt-2\"}\n                label={\"Target Network\"}\n                disabled\n                value={'CASPER'}\n                onChange={(e: any) => {}}\n              />\n              {\n                connection.isWalletConnected && (\n                  <>\n                    <FButton \n                      title={\"Add Liquidity\"}\n                      className=\"w-100 f-mt-2\"\n                      onClick={() => performAddLiquidty()}\n                    />\n                    <div className=\"w-100 f-mt-2 flex jc jc-end\" style={{\"cursor\": \"pointer\"}} onClick={() => performCasperApproval()}>Approve</div>\n                  </>\n                )\n              }\n            </FItem>\n          </FGridItem>\n         \n        </FGrid>\n        <ConfirmationDialog\n          amount={amount}\n          onHide={() => {\n            setShowConfirmation(false)\n            setProcessMsg(\"\")\n          }} \n          transaction={processMsg}\n          message={'Transaction sent to network and is processing.'}\n          show={showConfirmation}\n          isSwap={false}\n          network={networkData?.sendNetwork}\n        />\n        <TxProcessingDialog onHide={() =>setLoading(false)} message={ processMsg || \"Transaction Processing....\"} show={loading}/>\n        </FCard>\n    </>\n  );\n};\n\nexport default CasperAddLiquidity\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/approvalButtonWrapper.tsx",["302"],["303"],"import { AnyAction, createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport React, { Dispatch, useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ApprovalState } from \"./types\";\nimport { BigUtils, parseCurrency } from \"./types\";\nimport { CrucibleClient } from \"./crucibleClient\";\nimport { Web3Helper } from \"./web3Helper\";\nimport Web3 from \"web3\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { ChainEventBase, ChainEventItem } from \"./chainEventItem\";\nexport interface IApprovableButtonWrapperViewProps {\n  isApprovalMode: boolean;\n  pendingApproval: boolean;\n  approvalTransactionId: string;\n  error?: string;\n  onApproveClick: () => void;\n}\nexport interface IApprovableButtonWrapperOwnProps {\n  currency: string;\n  contractAddress: string;\n  userAddress: string;\n  amount: string;\n  View: (props: IApprovableButtonWrapperViewProps) => any;\n}\nfunction mapStateToProps(state: any): ApprovalState {\n  return state.approval;\n}\nexport function approvalKey(userAddress: string, contractAddress: string, currency: string) {\n  return `${userAddress}|${contractAddress}|${currency}`;\n}\nexport const doGetApproval = createAsyncThunk(\n  \"approveButton/doGetApproval\",\n  async (\n    payload: {\n      userAddress: string;\n      contractAddress: string;\n      currency: string;\n      web3Sdk: any;\n    },\n    ctx\n  ) => {\n    const { userAddress, contractAddress, currency, web3Sdk } = payload;\n    const web3Helper = new Web3Helper(web3Sdk as any);\n    const client = new CrucibleClient(web3Helper);\n    const allocation = await client.getContractAllocation(userAddress, contractAddress, currency);\n    if (!!allocation && allocation.data) {\n      ctx.dispatch(\n        approvableButtonSlice.actions.allocationUpdated({\n          contractAddress,\n          userAddress,\n          currency,\n          allocation: allocation.data.allocation,\n        })\n      );\n    }\n    // const api = inject<ApiClient>(ApiClient);\n    // const allocation = await api.getContractAllocation(userAddress, contractAddress, currency);\n    // console.log('doGetApproval', payload, {allocation});\n    // if (!!allocation) {\n    //  ctx.dispatch(approvableButtonSlice.actions.allocationUpdated({\n    //    contractAddress, userAddress, currency, allocation: allocation.allocation }))\n    // }\n  }\n);\nexport const doApprove = createAsyncThunk(\n  \"approveButton/doApprove\",\n  async (\n    payload: {\n      userAddress: string;\n      contractAddress: string;\n      currency: string;\n      web3Sdk: any;\n    },\n    ctx\n  ) => {\n    const { userAddress, contractAddress, currency, web3Sdk } = payload;\n    const web3Helper = new Web3Helper(web3Sdk as any);\n    const client = new CrucibleClient(web3Helper);\n    const transactionId = await client.setContractAllocation(ctx.dispatch, userAddress, contractAddress, currency, \"\");\n    if (!!transactionId) {\n      ctx.dispatch(\n        approvableButtonSlice.actions.approveTransactionReceived({\n          transactionId,\n        })\n      );\n    }\n  }\n);\n//Action.approvableButtonSlice/approveTransactionReceived\nexport const approvableButtonSlice = createSlice({\n  name: \"approvableButton\",\n  initialState: {\n    approveTransactionId: \"\",\n    pending: false,\n    approvals: {},\n  } as ApprovalState,\n  reducers: {\n    allocationUpdated: (state, action) => {\n      const { userAddress, contractAddress, currency, allocation } = action.payload;\n      state.approvals[approvalKey(userAddress, contractAddress, currency)] = allocation;\n    },\n    transactionFailed: (state, action) => {\n      state.error = action.payload.message || \"Error while getting transaction\";\n      state.pending = false;\n      state.status = \"failed\";\n    },\n    transactionCompleted: (state, action) => {\n      state.error = undefined;\n      state.pending = false;\n      state.status = \"completed\";\n    },\n    approveTransactionReceived: (state, action) => {\n      state.approveTransactionId = action.payload.transactionId;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(doApprove.pending, (state, action) => {\n      state.pending = true;\n      state.error = undefined;\n      state.approveTransactionId = \"\";\n      state.status = \"pending\";\n    });\n    builder.addCase(doApprove.fulfilled, (state, action) => {\n      state.pending = false;\n      state.error = undefined;\n      // state.status = 'completed';\n    });\n    builder.addCase(doApprove.rejected, (state, action) => {\n      state.pending = false;\n      console.log(\"Error running approval\", action.payload);\n      state.error = (action.payload || ({} as any)).toString();\n      state.status = \"failed\";\n    });\n  },\n});\nasync function updateEvent(dispatch: Dispatch<AnyAction>, e: ChainEventBase, web3Sdk: any): Promise<ChainEventBase> {\n  try {\n    const web3TxId = await e.id; // await possible web3 tx id\n    const t = await web3Sdk.eth.getTransaction(e.id);\n    console.log(\"Checking the transloota \", t);\n    if (t && t.blockNumber) {\n      console.log(\"Translo iso componte \", t);\n      dispatch(\n        approvableButtonSlice.actions.transactionCompleted({\n          transactionId: e.id,\n        })\n      );\n      return { ...e, status: \"completed\" }; // TODO: Check for failed\n    }\n    console.log(\"Noting inderezding \", e);\n    return { ...e, status: \"pending\" };\n  } catch (ex) {\n    console.log(\"ApprovableButton.updateEvent\");\n    dispatch(\n      approvableButtonSlice.actions.transactionFailed({\n        message: (ex as any).message,\n      })\n    );\n    return { ...e, status: \"failed\" };\n  }\n}\nexport function ApprovableButtonWrapper(ownProps: IApprovableButtonWrapperOwnProps) {\n  const dispatch = useDispatch();\n  const props = useSelector(mapStateToProps);\n\n  const [network] = parseCurrency(ownProps.currency || \"\");\n  const { userAddress, contractAddress, currency } = ownProps;\n  const { status } = props;\n  const currentApproval = props.approvals[approvalKey(userAddress, contractAddress, currency)];\n\n  const [web3Sdk, setweb3Sdk] = useState<Web3 | undefined>(undefined);\n  const { library } = useWeb3React();\n  useEffect(() => {\n    if (userAddress && contractAddress && currency) {\n      dispatch(doGetApproval({ userAddress, contractAddress, currency, web3Sdk }));\n    }\n    if (library && !web3Sdk) {\n      // console.log(\"web3 react connect set network client\");\n      setweb3Sdk(library);\n    }\n    // eslint-disable-next-line\n  }, [userAddress, contractAddress, currency, status, web3Sdk]); \n  \n  return (\n    <>\n      <div>\n        <ChainEventItem\n          id={props.approveTransactionId}\n          network={network as any}\n          initialStatus={\"pending\"}\n          eventType={\"approval\"}\n          updater={(e: any) => updateEvent(dispatch, e, web3Sdk)}\n        >\n          <ownProps.View\n            isApprovalMode={BigUtils.safeParse(currentApproval).lt(BigUtils.safeParse(ownProps.amount || \"0.0001\"))}\n            pendingApproval={props.status === \"pending\"}\n            approvalTransactionId={props.approveTransactionId}\n            onApproveClick={() => dispatch(doApprove({ web3Sdk, ...ownProps }))}\n          />\n        </ChainEventItem>\n      </div>\n    </>\n  );\n}\n","/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/pages/Landing/CasperLanding.tsx",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/types.ts",[],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/crucibleClient.ts",["304","305","306","307"],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/web3Helper.ts",["308"],[],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/chainEventItem.tsx",[],["309","310"],"/Users/kabiribraheem/Documents/ferrum/casper-bridge-frontend/src/components/connector/web3Client/Api.js",[],[],[],{"ruleId":"311","severity":1,"message":"312","line":2,"column":19,"nodeType":"313","messageId":"314","endLine":2,"endColumn":24},{"ruleId":"311","severity":1,"message":"315","line":36,"column":24,"nodeType":"313","messageId":"314","endLine":36,"endColumn":30},{"ruleId":"311","severity":1,"message":"316","line":50,"column":15,"nodeType":"313","messageId":"314","endLine":50,"endColumn":26},{"ruleId":"317","severity":1,"message":"318","line":196,"column":8,"nodeType":"319","endLine":196,"endColumn":40,"suggestions":"320"},{"ruleId":"311","severity":1,"message":"321","line":236,"column":15,"nodeType":"313","messageId":"314","endLine":236,"endColumn":23},{"ruleId":"322","severity":1,"message":"323","line":266,"column":31,"nodeType":"324","endLine":266,"endColumn":67},{"ruleId":"325","severity":1,"message":"326","line":266,"column":126,"nodeType":"327","messageId":"328","endLine":266,"endColumn":128},{"ruleId":"325","severity":1,"message":"326","line":270,"column":95,"nodeType":"327","messageId":"328","endLine":270,"endColumn":97},{"ruleId":"311","severity":1,"message":"329","line":1,"column":17,"nodeType":"313","messageId":"314","endLine":1,"endColumn":26},{"ruleId":"311","severity":1,"message":"330","line":13,"column":8,"nodeType":"313","messageId":"314","endLine":13,"endColumn":12},{"ruleId":"311","severity":1,"message":"331","line":17,"column":10,"nodeType":"313","messageId":"314","endLine":17,"endColumn":22},{"ruleId":"311","severity":1,"message":"332","line":33,"column":7,"nodeType":"313","messageId":"314","endLine":33,"endColumn":17},{"ruleId":"311","severity":1,"message":"333","line":39,"column":11,"nodeType":"313","messageId":"314","endLine":39,"endColumn":28},{"ruleId":"311","severity":1,"message":"334","line":47,"column":11,"nodeType":"313","messageId":"314","endLine":47,"endColumn":22},{"ruleId":"311","severity":1,"message":"335","line":47,"column":24,"nodeType":"313","messageId":"314","endLine":47,"endColumn":36},{"ruleId":"311","severity":1,"message":"336","line":47,"column":38,"nodeType":"313","messageId":"314","endLine":47,"endColumn":58},{"ruleId":"311","severity":1,"message":"337","line":47,"column":75,"nodeType":"313","messageId":"314","endLine":47,"endColumn":88},{"ruleId":"311","severity":1,"message":"338","line":96,"column":17,"nodeType":"313","messageId":"314","endLine":96,"endColumn":24},{"ruleId":"322","severity":1,"message":"323","line":195,"column":32,"nodeType":"324","endLine":195,"endColumn":110},{"ruleId":"311","severity":1,"message":"339","line":4,"column":10,"nodeType":"313","messageId":"314","endLine":4,"endColumn":24},{"ruleId":"311","severity":1,"message":"340","line":5,"column":10,"nodeType":"313","messageId":"314","endLine":5,"endColumn":23},{"ruleId":"311","severity":1,"message":"341","line":7,"column":47,"nodeType":"313","messageId":"314","endLine":7,"endColumn":54},{"ruleId":"311","severity":1,"message":"342","line":12,"column":3,"nodeType":"313","messageId":"314","endLine":12,"endColumn":9},{"ruleId":"311","severity":1,"message":"333","line":38,"column":11,"nodeType":"313","messageId":"314","endLine":38,"endColumn":28},{"ruleId":"322","severity":1,"message":"323","line":49,"column":48,"nodeType":"324","endLine":49,"endColumn":84},{"ruleId":"322","severity":1,"message":"323","line":57,"column":101,"nodeType":"324","endLine":57,"endColumn":133},{"ruleId":"322","severity":1,"message":"323","line":62,"column":104,"nodeType":"324","endLine":62,"endColumn":162},{"ruleId":"322","severity":1,"message":"323","line":67,"column":100,"nodeType":"324","endLine":67,"endColumn":158},{"ruleId":"311","severity":1,"message":"343","line":74,"column":25,"nodeType":"313","messageId":"314","endLine":74,"endColumn":41},{"ruleId":"311","severity":1,"message":"344","line":75,"column":23,"nodeType":"313","messageId":"314","endLine":75,"endColumn":37},{"ruleId":"311","severity":1,"message":"345","line":78,"column":9,"nodeType":"313","messageId":"314","endLine":78,"endColumn":19},{"ruleId":"311","severity":1,"message":"346","line":80,"column":66,"nodeType":"313","messageId":"314","endLine":80,"endColumn":81},{"ruleId":"311","severity":1,"message":"347","line":80,"column":83,"nodeType":"313","messageId":"314","endLine":80,"endColumn":90},{"ruleId":"311","severity":1,"message":"348","line":81,"column":20,"nodeType":"313","messageId":"314","endLine":81,"endColumn":23},{"ruleId":"311","severity":1,"message":"349","line":88,"column":18,"nodeType":"313","messageId":"314","endLine":88,"endColumn":24},{"ruleId":"311","severity":1,"message":"350","line":88,"column":26,"nodeType":"313","messageId":"314","endLine":88,"endColumn":38},{"ruleId":"311","severity":1,"message":"351","line":91,"column":5,"nodeType":"313","messageId":"314","endLine":91,"endColumn":10},{"ruleId":"322","severity":1,"message":"323","line":98,"column":50,"nodeType":"324","endLine":98,"endColumn":86},{"ruleId":"322","severity":1,"message":"323","line":103,"column":50,"nodeType":"324","endLine":103,"endColumn":82},{"ruleId":"311","severity":1,"message":"335","line":132,"column":24,"nodeType":"313","messageId":"314","endLine":132,"endColumn":36},{"ruleId":"311","severity":1,"message":"352","line":138,"column":11,"nodeType":"313","messageId":"314","endLine":138,"endColumn":61},{"ruleId":"317","severity":1,"message":"353","line":164,"column":6,"nodeType":"319","endLine":164,"endColumn":38,"suggestions":"354"},{"ruleId":"311","severity":1,"message":"355","line":166,"column":9,"nodeType":"313","messageId":"314","endLine":166,"endColumn":27},{"ruleId":"311","severity":1,"message":"356","line":264,"column":17,"nodeType":"313","messageId":"314","endLine":264,"endColumn":20},{"ruleId":"311","severity":1,"message":"338","line":314,"column":17,"nodeType":"313","messageId":"314","endLine":314,"endColumn":24},{"ruleId":"311","severity":1,"message":"357","line":456,"column":9,"nodeType":"313","messageId":"314","endLine":456,"endColumn":30},{"ruleId":"311","severity":1,"message":"352","line":525,"column":11,"nodeType":"313","messageId":"314","endLine":525,"endColumn":61},{"ruleId":"311","severity":1,"message":"358","line":554,"column":13,"nodeType":"313","messageId":"314","endLine":554,"endColumn":21},{"ruleId":"322","severity":1,"message":"323","line":604,"column":23,"nodeType":"324","endLine":604,"endColumn":74},{"ruleId":"311","severity":1,"message":"315","line":32,"column":24,"nodeType":"313","messageId":"314","endLine":32,"endColumn":30},{"ruleId":"311","severity":1,"message":"359","line":32,"column":49,"nodeType":"313","messageId":"314","endLine":32,"endColumn":66},{"ruleId":"311","severity":1,"message":"346","line":32,"column":68,"nodeType":"313","messageId":"314","endLine":32,"endColumn":83},{"ruleId":"317","severity":1,"message":"360","line":105,"column":8,"nodeType":"319","endLine":105,"endColumn":29,"suggestions":"361"},{"ruleId":"322","severity":1,"message":"323","line":150,"column":17,"nodeType":"324","endLine":150,"endColumn":54},{"ruleId":"322","severity":1,"message":"323","line":151,"column":17,"nodeType":"324","endLine":151,"endColumn":54},{"ruleId":"322","severity":1,"message":"323","line":153,"column":15,"nodeType":"324","endLine":153,"endColumn":54},{"ruleId":"322","severity":1,"message":"323","line":155,"column":15,"nodeType":"324","endLine":155,"endColumn":52},{"ruleId":"322","severity":1,"message":"323","line":156,"column":15,"nodeType":"324","endLine":156,"endColumn":51},{"ruleId":"362","severity":1,"message":"363","line":183,"column":11,"nodeType":"324","messageId":"364","endLine":183,"endColumn":106,"fix":"365"},{"ruleId":"311","severity":1,"message":"366","line":6,"column":3,"nodeType":"313","messageId":"314","endLine":6,"endColumn":10},{"ruleId":"322","severity":1,"message":"323","line":28,"column":9,"nodeType":"324","endLine":28,"endColumn":45},{"ruleId":"311","severity":1,"message":"367","line":1,"column":10,"nodeType":"313","messageId":"314","endLine":1,"endColumn":18},{"ruleId":"311","severity":1,"message":"368","line":2,"column":10,"nodeType":"313","messageId":"314","endLine":2,"endColumn":19},{"ruleId":"317","severity":1,"message":"369","line":57,"column":6,"nodeType":"319","endLine":57,"endColumn":45,"suggestions":"370","suppressions":"371"},{"ruleId":"311","severity":1,"message":"372","line":25,"column":9,"nodeType":"313","messageId":"314","endLine":25,"endColumn":14},{"ruleId":"317","severity":1,"message":"373","line":52,"column":6,"nodeType":"319","endLine":52,"endColumn":51,"suggestions":"374","suppressions":"375"},{"ruleId":"317","severity":1,"message":"373","line":80,"column":6,"nodeType":"319","endLine":80,"endColumn":58,"suggestions":"376","suppressions":"377"},{"ruleId":"317","severity":1,"message":"378","line":94,"column":6,"nodeType":"319","endLine":94,"endColumn":65,"suggestions":"379","suppressions":"380"},{"ruleId":"317","severity":1,"message":"381","line":106,"column":6,"nodeType":"319","endLine":106,"endColumn":25,"suggestions":"382","suppressions":"383"},{"ruleId":"317","severity":1,"message":"381","line":147,"column":6,"nodeType":"319","endLine":155,"endColumn":4,"suggestions":"384","suppressions":"385"},{"ruleId":"317","severity":1,"message":"381","line":201,"column":6,"nodeType":"319","endLine":201,"endColumn":13,"suggestions":"386","suppressions":"387"},{"ruleId":"311","severity":1,"message":"339","line":4,"column":10,"nodeType":"313","messageId":"314","endLine":4,"endColumn":24},{"ruleId":"311","severity":1,"message":"340","line":5,"column":10,"nodeType":"313","messageId":"314","endLine":5,"endColumn":23},{"ruleId":"311","severity":1,"message":"341","line":8,"column":47,"nodeType":"313","messageId":"314","endLine":8,"endColumn":54},{"ruleId":"311","severity":1,"message":"342","line":13,"column":3,"nodeType":"313","messageId":"314","endLine":13,"endColumn":9},{"ruleId":"311","severity":1,"message":"333","line":31,"column":11,"nodeType":"313","messageId":"314","endLine":31,"endColumn":28},{"ruleId":"311","severity":1,"message":"388","line":35,"column":10,"nodeType":"313","messageId":"314","endLine":35,"endColumn":23},{"ruleId":"311","severity":1,"message":"343","line":35,"column":25,"nodeType":"313","messageId":"314","endLine":35,"endColumn":41},{"ruleId":"311","severity":1,"message":"389","line":36,"column":10,"nodeType":"313","messageId":"314","endLine":36,"endColumn":21},{"ruleId":"311","severity":1,"message":"344","line":36,"column":23,"nodeType":"313","messageId":"314","endLine":36,"endColumn":37},{"ruleId":"311","severity":1,"message":"346","line":42,"column":66,"nodeType":"313","messageId":"314","endLine":42,"endColumn":81},{"ruleId":"311","severity":1,"message":"347","line":42,"column":83,"nodeType":"313","messageId":"314","endLine":42,"endColumn":90},{"ruleId":"311","severity":1,"message":"334","line":51,"column":11,"nodeType":"313","messageId":"314","endLine":51,"endColumn":22},{"ruleId":"311","severity":1,"message":"335","line":51,"column":24,"nodeType":"313","messageId":"314","endLine":51,"endColumn":36},{"ruleId":"311","severity":1,"message":"390","line":54,"column":18,"nodeType":"313","messageId":"314","endLine":54,"endColumn":25},{"ruleId":"311","severity":1,"message":"338","line":111,"column":17,"nodeType":"313","messageId":"314","endLine":111,"endColumn":24},{"ruleId":"311","severity":1,"message":"391","line":165,"column":9,"nodeType":"313","messageId":"314","endLine":165,"endColumn":22},{"ruleId":"311","severity":1,"message":"392","line":138,"column":11,"nodeType":"313","messageId":"314","endLine":138,"endColumn":19},{"ruleId":"317","severity":1,"message":"393","line":182,"column":6,"nodeType":"319","endLine":182,"endColumn":63,"suggestions":"394","suppressions":"395"},{"ruleId":"311","severity":1,"message":"368","line":1,"column":10,"nodeType":"313","messageId":"314","endLine":1,"endColumn":19},{"ruleId":"311","severity":1,"message":"367","line":1,"column":21,"nodeType":"313","messageId":"314","endLine":1,"endColumn":29},{"ruleId":"311","severity":1,"message":"396","line":5,"column":10,"nodeType":"313","messageId":"314","endLine":5,"endColumn":15},{"ruleId":"325","severity":1,"message":"397","line":68,"column":25,"nodeType":"327","messageId":"328","endLine":68,"endColumn":27},{"ruleId":"325","severity":1,"message":"397","line":92,"column":25,"nodeType":"327","messageId":"328","endLine":92,"endColumn":27},{"ruleId":"317","severity":1,"message":"398","line":136,"column":6,"nodeType":"319","endLine":136,"endColumn":34,"suggestions":"399","suppressions":"400"},{"ruleId":"317","severity":1,"message":"381","line":140,"column":6,"nodeType":"319","endLine":140,"endColumn":8,"suggestions":"401","suppressions":"402"},"@typescript-eslint/no-unused-vars","'FMain' is defined but never used.","Identifier","unusedVar","'config' is assigned a value but never used.","'networkData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchEvmWithdrawalItems'. Either include it or remove the dependency array.","ArrayExpression",["403"],"'ethereum' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'logo' is defined but never used.","'CasperClient' is defined but never used.","'STATUS_API' is assigned a value but never used.","'bridgePoolAddress' is assigned a value but never used.","'isConnected' is assigned a value but never used.","'isConnecting' is assigned a value but never used.","'currentWalletNetwork' is assigned a value but never used.","'networkClient' is assigned a value but never used.","'balance' is assigned a value but never used.","'getStakingInfo' is defined but never used.","'connectWallet' is defined but never used.","'CLValue' is defined but never used.","'Signer' is defined but never used.","'setTargetNetwork' is assigned a value but never used.","'setTargetToken' is assigned a value but never used.","'connection' is assigned a value but never used.","'signedAddresses' is assigned a value but never used.","'network' is assigned a value but never used.","'con' is assigned a value but never used.","'errors' is assigned a value but never used.","'isSubmitting' is assigned a value but never used.","'reset' is assigned a value but never used.","'destination' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'destinations', 'dispatch', 'origins', and 'setValue'. Either include them or remove the dependency array.",["404"],"'performSwapReverse' is assigned a value but never used.","'res' is assigned a value but never used.","'performCasperApproval' is assigned a value but never used.","'network3' is assigned a value but never used.","'isWalletConnected' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'checkTransaction' and 'intervalId'. Either include them or remove the dependency array.",["405"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"406","text":"407"},"'FLoader' is defined but never used.","'Dispatch' is defined but never used.","'AnyAction' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'isWeb3Initialized', 'networkClient', and 'signIntoServer'. Either include them or remove the dependency array.",["408"],["409"],"'state' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'activate'. Either include it or remove the dependency array.",["410"],["411"],["412"],["413"],"React Hook useEffect has missing dependencies: 'activate' and 'dispatch'. Either include them or remove the dependency array.",["414"],["415"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["416"],["417"],["418"],["419"],["420"],["421"],"'targetNetwork' is assigned a value but never used.","'targetToken' is assigned a value but never used.","'swapEvm' is defined but never used.","'connectWallet' is assigned a value but never used.","'web3TxId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'library'. Either include them or remove the dependency array.",["422"],["423"],"'toast' is defined but never used.","Expected '===' and instead saw '=='.","React Hook useEffect has missing dependencies: 'dispatch', 'event', 'props.eventType', 'props.id', 'props.initialStatus', 'props.network', and 'props.updater'. Either include them or remove the dependency array.",["424"],["425"],["426"],["427"],{"desc":"428","fix":"429"},{"desc":"430","fix":"431"},{"desc":"432","fix":"433"},[6939,6939]," rel=\"noreferrer\"",{"desc":"434","fix":"435"},{"kind":"436","justification":"437"},{"desc":"438","fix":"439"},{"kind":"436","justification":"437"},{"desc":"440","fix":"441"},{"kind":"436","justification":"437"},{"desc":"442","fix":"443"},{"kind":"436","justification":"437"},{"desc":"444","fix":"445"},{"kind":"436","justification":"437"},{"desc":"446","fix":"447"},{"kind":"436","justification":"437"},{"desc":"448","fix":"449"},{"kind":"436","justification":"437"},{"desc":"450","fix":"451"},{"kind":"436","justification":"437"},{"desc":"452","fix":"453"},{"kind":"436","justification":"437"},{"desc":"454","fix":"455"},{"kind":"436","justification":"437"},"Update the dependencies array to be: [fetchEvmWithdrawalItems, selectedAccount, walletAddress]",{"range":"456","text":"457"},"Update the dependencies array to be: [currentWalletNetwork, destinations, dispatch, network3, origins, setValue]",{"range":"458","text":"459"},"Update the dependencies array to be: [transaction, isDone, checkTransaction, intervalId]",{"range":"460","text":"461"},"Update the dependencies array to be: [dispatch, isConnected, isWeb3Initialized, networkClient, signIntoServer, walletWrapperInitialized]",{"range":"462","text":"463"},"directive","","Update the dependencies array to be: [walletAddress, account, isConnected, active, activate]",{"range":"464","text":"465"},"Update the dependencies array to be: [currentWalletNetwork, chainId, isConnected, active, activate]",{"range":"466","text":"467"},"Update the dependencies array to be: [isConnected, active, library, isConnecting, networkClient, dispatch, activate]",{"range":"468","text":"469"},"Update the dependencies array to be: [reconnect, active, dispatch]",{"range":"470","text":"471"},"Update the dependencies array to be: [networkClient, library, isConnected, active, account, chainId, isConnecting, dispatch]",{"range":"472","text":"473"},"Update the dependencies array to be: [dispatch, error]",{"range":"474","text":"475"},"Update the dependencies array to be: [userAddress, contractAddress, currency, status, web3Sdk, library, dispatch]",{"range":"476","text":"477"},"Update the dependencies array to be: [network, id, initialStatus, dispatch, event, props.updater, props.id, props.initialStatus, props.network, props.eventType]",{"range":"478","text":"479"},"Update the dependencies array to be: [dispatch]",{"range":"480","text":"481"},[7350,7382],"[fetchEvmWithdrawalItems, selectedAccount, walletAddress]",[6367,6399],"[currentWalletNetwork, destinations, dispatch, network3, origins, setValue]",[3859,3880],"[transaction, isDone, checkTransaction, intervalId]",[1692,1731],"[dispatch, isConnected, isWeb3Initialized, networkClient, signIntoServer, walletWrapperInitialized]",[1994,2039],"[walletAddress, account, isConnected, active, activate]",[2719,2771],"[currentWalletNetwork, chainId, isConnected, active, activate]",[3254,3313],"[isConnected, active, library, isConnecting, networkClient, dispatch, activate]",[3654,3673],"[reconnect, active, dispatch]",[4863,4973],"[networkClient, library, isConnected, active, account, chainId, isConnecting, dispatch]",[6199,6206],"[dispatch, error]",[6385,6442],"[userAddress, contractAddress, currency, status, web3Sdk, library, dispatch]",[3917,3945],"[network, id, initialStatus, dispatch, event, props.updater, props.id, props.initialStatus, props.network, props.eventType]",[4028,4030],"[dispatch]"]