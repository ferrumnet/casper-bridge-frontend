[{"/Users/kabiribraheem/Documents/staking-casper-frontend/src/index.tsx":"1","/Users/kabiribraheem/Documents/staking-casper-frontend/src/reportWebVitals.ts":"2","/Users/kabiribraheem/Documents/staking-casper-frontend/src/App.tsx":"3","/Users/kabiribraheem/Documents/staking-casper-frontend/src/Routes.tsx":"4","/Users/kabiribraheem/Documents/staking-casper-frontend/src/pages/Landing/LandingPage.tsx":"5","/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/MaturityCard.tsx":"6","/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/StakingCard.tsx":"7","/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/StakingInfoCard.tsx":"8","/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/StakeCardSubmit.tsx":"9","/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/WithdrawCardSubmit.tsx":"10","/Users/kabiribraheem/Documents/staking-casper-frontend/src/redux/store.ts":"11","/Users/kabiribraheem/Documents/staking-casper-frontend/src/header/header.tsx":"12","/Users/kabiribraheem/Documents/staking-casper-frontend/src/dialogs/AddressSelector.tsx":"13","/Users/kabiribraheem/Documents/staking-casper-frontend/src/redux/casper/casperSlice.js":"14","/Users/kabiribraheem/Documents/staking-casper-frontend/src/redux/casper/casperActions.js":"15","/Users/kabiribraheem/Documents/staking-casper-frontend/src/utils/DateUtil.ts":"16","/Users/kabiribraheem/Documents/staking-casper-frontend/src/dialogs/TxProcessingDialog.tsx":"17","/Users/kabiribraheem/Documents/staking-casper-frontend/src/dialogs/ConfirmationDialog.tsx":"18","/Users/kabiribraheem/Documents/staking-casper-frontend/src/pages/Admin/admin.tsx":"19","/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/admin/index.ts":"20","/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/admin/table.tsx":"21","/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/admin/inputForm.tsx":"22","/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/admin/header.tsx":"23","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/index.tsx":"24","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/reportWebVitals.ts":"25","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/redux/store.ts":"26","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/App.tsx":"27","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/redux/casper/casperSlice.js":"28","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/Routes.tsx":"29","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/header/header.tsx":"30","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/redux/casper/casperActions.js":"31","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/dialogs/TxProcessingDialog.tsx":"32","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/dialogs/AddressSelector.tsx":"33","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/WithdrawCardSubmit.tsx":"34","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/utils/DateUtil.ts":"35","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/dialogs/ConfirmationDialog.tsx":"36","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/utils/connect-wallet/ConnectWalletDialog.tsx":"37","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/index.ts":"38","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/index.ts":"39","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/index.ts":"40","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/walletApplicationWrapperInterfaces.ts":"41","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/redux/walletConnectorActions.ts":"42","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/redux/walletApplicationWrapperActions.ts":"43","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/redux/walletConnectorSlice.ts":"44","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/redux/walletApplicationWrapperSlice.ts":"45","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/wallet-connector.tsx":"46","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/walletApplicationWrapper.tsx":"47","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/walletConnectorInterfaces.ts":"48","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/walletAuthenticationActions.ts":"49","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/web3React/connectors.ts":"50","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/walletAuthenticationSlice.ts":"51","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/WalletAuthenticationInterfaces.ts":"52","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/client/index.ts":"53","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/utils/web3Helper.ts":"54","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/Withdrawals.tsx":"55","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/utils/stringUtils.ts":"56","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/pages/CasperSwap.tsx":"57","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/pages/CasperWithdrawal.tsx":"58","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/utils/network.ts":"59"},{"size":755,"mtime":1669785245663,"results":"60","hashOfConfig":"61"},{"size":425,"mtime":1669400527507,"results":"62","hashOfConfig":"61"},{"size":682,"mtime":1672129929941,"results":"63","hashOfConfig":"61"},{"size":686,"mtime":1672700698724,"results":"64","hashOfConfig":"61"},{"size":1554,"mtime":1669785698680,"results":"65","hashOfConfig":"61"},{"size":4045,"mtime":1672098146237,"results":"66","hashOfConfig":"61"},{"size":9392,"mtime":1676503810641,"results":"67","hashOfConfig":"61"},{"size":3457,"mtime":1672075676086,"results":"68","hashOfConfig":"61"},{"size":6091,"mtime":1676552504372,"results":"69","hashOfConfig":"61"},{"size":3881,"mtime":1672144640133,"results":"70","hashOfConfig":"61"},{"size":512,"mtime":1671011828135,"results":"71","hashOfConfig":"61"},{"size":6400,"mtime":1676504297543,"results":"72","hashOfConfig":"61"},{"size":1184,"mtime":1669784523941,"results":"73","hashOfConfig":"61"},{"size":1815,"mtime":1672074760921,"results":"74","hashOfConfig":"61"},{"size":1901,"mtime":1672074994568,"results":"75","hashOfConfig":"61"},{"size":5393,"mtime":1672149753769,"results":"76","hashOfConfig":"61"},{"size":830,"mtime":1672148884942,"results":"77","hashOfConfig":"61"},{"size":3686,"mtime":1676552954473,"results":"78","hashOfConfig":"61"},{"size":730,"mtime":1672700612967,"results":"79","hashOfConfig":"61"},{"size":109,"mtime":1672706581382,"results":"80","hashOfConfig":"61"},{"size":8712,"mtime":1672700742352,"results":"81","hashOfConfig":"61"},{"size":10154,"mtime":1676503810641,"results":"82","hashOfConfig":"61"},{"size":4792,"mtime":1676503811512,"results":"83","hashOfConfig":"61"},{"size":755,"mtime":1681748042763,"results":"84","hashOfConfig":"85"},{"size":425,"mtime":1681748042764,"results":"86","hashOfConfig":"85"},{"size":956,"mtime":1681748043160,"results":"87","hashOfConfig":"85"},{"size":868,"mtime":1681748042848,"results":"88","hashOfConfig":"85"},{"size":2002,"mtime":1681748043309,"results":"89","hashOfConfig":"85"},{"size":742,"mtime":1681748043410,"results":"90","hashOfConfig":"85"},{"size":6803,"mtime":1682369491730,"results":"91","hashOfConfig":"85"},{"size":2071,"mtime":1681748043309,"results":"92","hashOfConfig":"85"},{"size":830,"mtime":1681748042807,"results":"93","hashOfConfig":"85"},{"size":1184,"mtime":1681748042762,"results":"94","hashOfConfig":"85"},{"size":3881,"mtime":1680070408538,"results":"95","hashOfConfig":"85"},{"size":5393,"mtime":1678937485517,"results":"96","hashOfConfig":"85"},{"size":4967,"mtime":1682578718727,"results":"97","hashOfConfig":"85"},{"size":1536,"mtime":1681748043161,"results":"98","hashOfConfig":"85"},{"size":133,"mtime":1681748043158,"results":"99","hashOfConfig":"85"},{"size":197,"mtime":1681748043159,"results":"100","hashOfConfig":"85"},{"size":285,"mtime":1681748043158,"results":"101","hashOfConfig":"85"},{"size":3719,"mtime":1681748043158,"results":"102","hashOfConfig":"85"},{"size":730,"mtime":1681748043159,"results":"103","hashOfConfig":"85"},{"size":3934,"mtime":1681748043158,"results":"104","hashOfConfig":"85"},{"size":2243,"mtime":1681748043159,"results":"105","hashOfConfig":"85"},{"size":2160,"mtime":1681748043158,"results":"106","hashOfConfig":"85"},{"size":8084,"mtime":1681748043159,"results":"107","hashOfConfig":"85"},{"size":4741,"mtime":1681748043158,"results":"108","hashOfConfig":"85"},{"size":812,"mtime":1681748043159,"results":"109","hashOfConfig":"85"},{"size":2122,"mtime":1681748043159,"results":"110","hashOfConfig":"85"},{"size":228,"mtime":1681748043159,"results":"111","hashOfConfig":"85"},{"size":2502,"mtime":1681748043159,"results":"112","hashOfConfig":"85"},{"size":729,"mtime":1681748043158,"results":"113","hashOfConfig":"85"},{"size":879,"mtime":1682598109575,"results":"114","hashOfConfig":"85"},{"size":1297,"mtime":1681748043161,"results":"115","hashOfConfig":"85"},{"size":9171,"mtime":1682589356940,"results":"116","hashOfConfig":"85"},{"size":115,"mtime":1682578660367,"results":"117","hashOfConfig":"85"},{"size":14908,"mtime":1682578316066,"results":"118","hashOfConfig":"85"},{"size":10595,"mtime":1680076668028,"results":"119","hashOfConfig":"85"},{"size":2517,"mtime":1682589516181,"results":"120","hashOfConfig":"85"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},"9zuy3e",{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"123"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"123"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"123"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"123"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"123"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"123"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"158"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"123"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"169"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"123"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"123"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},"16o78sv",{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"186"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"196"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"186"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"196"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"186"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"211"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"214"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},"/Users/kabiribraheem/Documents/staking-casper-frontend/src/index.tsx",[],["264","265"],"/Users/kabiribraheem/Documents/staking-casper-frontend/src/reportWebVitals.ts",[],"/Users/kabiribraheem/Documents/staking-casper-frontend/src/App.tsx",["266","267"],"import React from \"react\";\n// import logo from \"./assets/images/logo-light.svg\";\n\nimport { FLayout, FMain, FContainer } from \"ferrum-design-system\";\n// å// import { ReactComponent as IconNetwork } from \"./assets/images/Icon-connect-network.svg\";\nimport BaseRoutes from \"./Routes\";\nimport { Toaster } from \"react-hot-toast\";\nimport Header from \"./header/header\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Toaster position=\"top-right\" />\n      <FLayout themeBuilder={false} FsiderLayoutState={true}>\n        <FContainer width={1200} className=\"f-pl-1 f-pr-1\">\n          <BaseRoutes />\n        </FContainer>\n      </FLayout>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/kabiribraheem/Documents/staking-casper-frontend/src/Routes.tsx",["268","269","270"],"import React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport { LandingPage } from \"./pages/Landing/LandingPage\";\nimport AdminDashboard from \"./pages/Admin/admin\";\nimport { FLayout, FMain, FLoader, FContainer } from \"ferrum-design-system\";\nimport Header from \"./header/header\";\n\nconst Wrapper = () => {\n  return (\n    <>\n      <Header />\n      <FMain>\n        <LandingPage />\n      </FMain>\n    </>\n  )\n}\n\nconst BaseRoutes = () => {\n  return (\n    <Switch>\n      <Route path=\"/admin\" component={\n        AdminDashboard\n      }></Route>\n      <Route path=\"/:stakingId\" component={\n        Wrapper\n      }></Route>\n     \n    </Switch>\n  );\n};\nexport default BaseRoutes;\n","/Users/kabiribraheem/Documents/staking-casper-frontend/src/pages/Landing/LandingPage.tsx",["271","272","273","274","275","276","277"],"import { FGrid, FGridItem, FTypo } from \"ferrum-design-system\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Route, Switch, useParams } from \"react-router\";\nimport axios from \"axios\";\nimport { StakingInfoCard } from \"../../components/StakingInfoCard\";\nimport { CardMaturity } from \"../../components/MaturityCard\";\nimport StakeCardSubmit from \"../../components/StakeCardSubmit\";\nimport WidthCardSubmit from \"../../components/WithdrawCardSubmit\";\nimport StakingCard from \"../../components/StakingCard\";\n\nexport const LandingPage = () => {\n    return (\n        <div>\n            <FGrid spacing={13}>            \n                <>\n                    <FGridItem size={[6, 6, 12]} dir=\"column\">\n                    <Switch>\n                        <Route\n                            path={\"/:stakingId/submit-stake\"}\n                            component={StakeCardSubmit}\n                        ></Route>\n                        <Route\n                            path={\"/:stakingId/submit-withdraw\"}\n                            component={WidthCardSubmit}\n                        ></Route>\n                        <Route path={\"/:stakingId/\"} component={StakingCard}></Route>\n                    </Switch>\n                    </FGridItem>\n                    <FGridItem size={[6, 6, 12]} dir=\"column\">\n                        <StakingInfoCard />\n                        <CardMaturity />\n                    </FGridItem>\n                </>\n            </FGrid>\n        </div>\n    )\n}","/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/MaturityCard.tsx",[],"/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/StakingCard.tsx",["278","279"],"import React, { useState } from \"react\";\nimport {\n  FButton,\n  FCard,\n  FInputText,\n  FItem,\n  FTypo,\n  // FResponseBar,\n} from \"ferrum-design-system\";\nimport { ReactComponent as BrandIcon } from \"../assets/images/brand-icon.svg\";\nimport { ReactComponent as EyeIcon } from \"../assets/images/EyeIcon.svg\";\nimport { ReactComponent as EyeIconUnhide } from \"../assets/images/EyeIconUnhide.svg\";\nimport { ReactComponent as WarningIcon } from \"../assets/images/WarningIcon.svg\";\nimport { ReactComponent as IconTimer } from \"../assets/images/icon-staking-timer.svg\";\nimport { ReactComponent as LockIcon } from \"../assets/images/LockIcon.svg\";\n// import { ConnectDialog } from \"../dialogs/ConnectDialog\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router\";\nimport { CasperServiceByJsonRPC, CLPublicKey, CLValue, \n  CLValueBuilder, \n  decodeBase16, \n  DeployUtil, RuntimeArgs, Signer } from \"casper-js-sdk\";\nimport { connectWallet as connectWalletDispatch } from '../redux/casper/casperActions';\nimport { getStakingInfo } from \"../utils/DateUtil\";\n\nconst RPC_API = \"http://44.208.234.65:7777/rpc\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\n\nconst StakingCard = () => {\n  const { stakingId }: any = useParams();\n  console.log(stakingId, 'stakingIdstakingId');\n  // const maturityInfo = getMaturityInfo();\n  const dispatch = useDispatch();\n  const navigate = useHistory();\n  const [showAddress, setShowAddress] = useState<boolean>(false);\n  const isWalletConnected = false;\n  const connection = useSelector((state: any) => state.casper.connect)\n\n  const connectWallet = async () => {\n    await window.casperlabsHelper.requestConnection()\n\n    const isConnected = await window.casperlabsHelper.isConnected();\n\n    if (isConnected) {\n      await AccountInformation();\n    }   \n  };\n\n  async function AccountInformation() {\n    const isConnected = await window.casperlabsHelper.isConnected();\n    console.log(isConnected, connection, 'isConnectedisConnected')\n    if (isConnected) {\n        const publicKey = await window.casperlabsHelper.getActivePublicKey();\n        console.log(publicKey);\n        //textAddress.textContent += publicKey;\n\n        const latestBlock = await casperService.getLatestBlockInfo();\n        console.log(latestBlock);\n\n        const root = await casperService.getStateRootHash(latestBlock?.block?.hash);\n        console.log(latestBlock, root)\n\n        await connectWalletDispatch([{\n          \"address\": publicKey\n        }])(dispatch)\n        const balanceUref = await casperService.getAccountBalanceUrefByPublicKey(root, CLPublicKey.fromHex(publicKey));\n        console.log(balanceUref)\n        \n        // @ts-ignore\n        const balance = await casperService.getAccountBalance(latestBlock?.block?.header?.state_root_hash, balanceUref);\n        console.log(balance.toString())\n        //textBalance.textContent = `PublicKeyHex ${balance.toString()}`;\n    }\n  }\n\n  const stakingInfo = getStakingInfo( \n    connection?.config?.stakingEnds,\n    connection?.config?.stakingStarts,\n    connection?.config?.withdrawStarts,\n    connection?.config?.withdrawEnds\n  );\n\n  const isAddressSigned = () => {\n    if (connection?.selectedAccount?.address) {\n      const isSigned = connection.signedAddresses?.find(\n        (e: any) => e.signer === connection?.selectedAccount?.address\n      )\n\n      return true\n      //!!isSigned\n    }\n    return false; \n  };\n\n  const signIt = async () => {\n    const publicKeyHex = connection?.selectedAccount?.address;\n    const senderPublicKey = CLPublicKey.fromHex(publicKeyHex);\n\n    const deployParams = new DeployUtil.DeployParams(\n      senderPublicKey,\n      'casper-test'\n    );\n\n    const args = RuntimeArgs.fromMap({\n      \"spender\": CLValueBuilder.string('b9e3b671e577a7d7a4c53aa7010449b47fb8a811c76582dcc41f65a67a16e23d'),\n    });\n\n    const session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(\n      decodeBase16('6adb2902bf7c56116ead7ea7a2ffa269b8d4b117b632d2c44052f3c951dcaa0b'),\n      'approve',\n      args\n    );\n\n    const payment = DeployUtil.standardPayment(10000000000000);\n\n    const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n\n    const deployJson: any = DeployUtil.deployToJson(deploy);\n  \n    Signer.sign(deployJson, publicKeyHex).then((signedDeployJson) => {\n      const signedDeploy = DeployUtil.deployFromJson(signedDeployJson);\n      console.log(signedDeploy)\n      if (signedDeploy.ok) {\n        return casperService.deploy(signedDeploy.val).then((res) => {\n          console.log(res);\n          return res;\n        });\n      }\n     \n    });\n  };\n\n  console.log(stakingInfo, 'stakingInfostakingInfo', connection)\n\n  return (\n    <React.Fragment>\n      <FCard className={\"card-connect f-mb-2\"}>\n        <FItem display={\"flex\"} className=\"f-mb-2\">\n          <FItem bgColor=\"#1F2128\" size={70} className=\"f-p--8 f-mr-1\" display={\"flex\"} alignX=\"center\" alignY={\"center\"}>\n            <BrandIcon />\n          </FItem>\n          <FItem className={\"f-ml-1\"}>\n            <FTypo size={24} color=\"white\" className={\"f-mt--4\"}>\n              { connection?.config?.name || 'Pool Name'}\n            </FTypo>\n            <FTypo size={12} color=\"white\">\n              STAKING POOL\n            </FTypo>\n          </FItem>\n        </FItem>\n        {/* <FTypo className={\"f-mb-4\"} color=\"white\" size={16}>\n          CONNECTED TO ETHEREUM NETWORK\n        </FTypo> */}\n\n        {!stakingInfo.isStakingOpen && stakingInfo.stakingOpensIn && (\n          <FTypo className={\"f-mb-3\"} color=\"white\" size={22} weight={600} display=\"flex\" alignX={\"center\"} alignY=\"center\">\n            <IconTimer className=\"f-mr-1\" /> Staking Opens in {stakingInfo.stakingOpensIn}\n          </FTypo>\n        )}  \n        {isWalletConnected && <FInputText className={\"f-mt-2 f-mb-2\"} label={\"YOUR ADDRESS\"} disabled={true} value={''} />}\n        <FItem className=\"f-mt-2 f-mb-1\" display={\"flex\"} alignX={\"between\"} alignY=\"center\">\n          <FTypo weight={600}>CONTRACT ADDRESS</FTypo>\n          {showAddress ? <EyeIconUnhide width={50} onClick={() => setShowAddress(false)} /> : <EyeIcon width={50} onClick={() => setShowAddress(true)} />}\n        </FItem>\n        {showAddress ? <FInputText className={\"f-mb-2\"} type=\"text\" disabled={true} value={stakingId || ''} /> : null}\n        {showAddress ? (\n          <FItem display={\"flex\"} className={\"f-p--8\"} bgColor=\" rgba(255, 255, 255, 0.25\" alignY={\"center\"}>\n            <WarningIcon width={40} />\n            <FTypo className={\"f-pl-1 f-pr-1\"} size={15} weight={600}>\n              NEVER SEND TOKENS TO THE CONTRACT, THEY WILL BE LOCKED FOREVER. ONLY USE THIS UI TO STAKE.\n            </FTypo>\n          </FItem>\n        ) : null}\n\n        {!connection.isWalletConnected ? (\n          <FButton title={\"Connect\"} className=\"w-100 f-mt-2\" onClick={() => connectWallet()} />\n        ) : (\n          <>\n            {isAddressSigned() ? (\n              <>\n                <FButton\n                  title={stakingInfo.isStakingOpen ? \"Stake\" : stakingInfo.isEarlyWithdraw ? \"Early Withdraw\" : stakingInfo.isWithdrawOpen ? \"Maturity Withdraw\" : \"Refresh\"}\n                  className=\"w-100 f-mt-2\"\n                  onClick={() => {\n                    // console.log(\"staking\");\n                    // dispatch(algorandActions.shouldStake());\n                    if (getStakingInfo(connection?.config?.stakingEnds, connection?.config?.stakingStarts, connection?.config?.withdrawStarts, connection?.config?.withdrawEnds).isStakingOpen) {\n                      navigate.push(`/${stakingId}/submit-stake`);\n                    } else if (\n                      getStakingInfo(connection?.config?.stakingEnds, connection?.config?.stakingStarts, connection?.config?.withdrawStarts, connection?.config?.withdrawEnds).isEarlyWithdraw ||\n                      getStakingInfo(connection?.config?.stakingEnds, connection?.config?.stakingStarts, connection?.config?.withdrawStarts, connection?.config?.withdrawEnds).isWithdrawOpen\n                    ) {\n                      console.log(stakingId, 'withdrawwww')\n                      navigate.push(`/${stakingId}/submit-withdraw`);\n                    } else {\n                      window.location.reload();\n                    }\n                  }}\n                />\n              </>\n            ) : (\n              <FButton title={\"Sign\"} className=\"w-100 f-mt-2\" onClick={() => signIt()} />\n            )}\n          </>\n        )}\n        {/* <FResponseBar\n          variant=\"error\"\n          title=\"Could send a sign request. Not enough balance.\"\n          className=\"f-mb-0\"\n          show={true}\n        ></FResponseBar> */}\n        {stakingInfo.isLockPeriod && (\n          <FItem className={\"f-mt-2 \"}>\n            <FItem bgColor=\"#1F2128\" className={\"f-p--8 w-100\"} display={\"flex\"} alignX=\"center\" alignY=\"center\">\n              <LockIcon className={\"f-mr-1\"} />\n              <FItem display=\"flex\">\n                <FTypo weight={600} size={20} display=\"inline-block\">\n                  Lock Period\n                </FTypo>\n                <FTypo color=\"#dab46e\" weight={600} size={20} className={\"f-pl--5\"} display=\"inline-block\">\n                  {stakingInfo.lockPeriod}\n                </FTypo>\n              </FItem>\n            </FItem>\n          </FItem>\n        )}\n      </FCard>\n    </React.Fragment>\n  );\n};\n\nexport default StakingCard;\n","/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/StakingInfoCard.tsx",["280","281"],"import { useState } from \"react\";\nimport { FCard, FGrid, FGridItem, FItem, FTypo } from \"ferrum-design-system\";\nimport { useSelector } from \"react-redux\";\nimport { getStakingInfo } from \"../utils/DateUtil\";\n\nexport const StakingInfoCard = () => {\n  const { isWalletConnected, config, tokenInfo } =\n  useSelector((state: any) => state.casper.connect);\n\n  // const [stakingCap, setStakingCap] = useState<any>(undefined);\n  const [stakeSoFar, setStakeSoFar] = useState<any>(undefined);\n  const [youStakedBalance, setYourStakedBalance] = useState<any>(undefined);\n\n  const stakingInfo = getStakingInfo(\n    config?.stakingEnds,\n    config?.stakingStarts,\n    config?.withdrawStarts,\n    config?.withdrawEnds\n  );\n\n  console.log(config, stakingInfo, tokenInfo, 'configconfigconfig')\n  // console.log(stakingCap, stakeSoFar, youStakedBalance);\n\n  return (\n    <FCard className={\"card-staking f-mb-2\"}>\n      <FGrid>\n        <FGridItem alignX={\"center\"} size={[6, 6, 12]} className=\"f-mb-1\">\n          <FItem align={\"center\"}>\n            <FTypo size={18} align={\"center\"} className={\"f-mb--5 f-mt--7\"}>\n              MATURITY REWARD\n            </FTypo>\n            <FTypo size={22} weight={600} color=\"#dab46e\">\n              0 APY\n            </FTypo>\n          </FItem>\n        </FGridItem>\n        <FGridItem alignX={\"center\"} size={[6, 6, 12]} className=\"f-mb-1\">\n          <FItem align={\"center\"}>\n            <FTypo size={18} align={\"center\"} className={\"f-mb--5 f-mt--7\"}>\n              EARLY REWARDS\n            </FTypo>\n            <FTypo size={22} weight={600} color=\"#dab46e\">\n              0 APY\n            </FTypo>\n          </FItem>\n        </FGridItem>\n        <FGridItem alignX={\"center\"} size={[6, 6, 12]} className=\"f-mb-1\">\n          <FItem align={\"center\"}>\n            <FTypo size={18} align={\"center\"} className={\"f-mb--5 f-mt--7\"}>\n              STAKING CAP\n            </FTypo>\n            <FTypo size={22} weight={600} color=\"#dab46e\">\n              {config?.stakingTotal || 0}\n            </FTypo>\n          </FItem>\n        </FGridItem>\n        <FGridItem alignX={\"center\"} size={[6, 6, 12]} className=\"f-mb-1\">\n          <FItem align={\"center\"}>\n            <FTypo size={18} align={\"center\"} className={\"f-mb--5 f-mt--7\"}>\n              STAKED SO FAR\n            </FTypo>\n            <FTypo size={22} weight={600} color=\"#dab46e\">\n              {stakeSoFar ? stakeSoFar : 0} {tokenInfo.tokenSymbol}\n            </FTypo>\n          </FItem>\n        </FGridItem>\n        {isWalletConnected && (\n          <>\n            <FGridItem alignX={\"center\"} className=\"f-mb-1\">\n              <FItem align={\"center\"}>\n                <FTypo size={18} align={\"center\"} className={\"f-mb--5 f-mt--7\"}>\n                  YOUR STAKED BALANCE\n                </FTypo>\n                <FTypo size={22} weight={600} color=\"#dab46e\">\n                  {youStakedBalance ? youStakedBalance : 0} {tokenInfo.tokenSymbol}\n                </FTypo>\n              </FItem>\n            </FGridItem>\n          </>\n        )}\n       {stakingInfo.isStakingOpen && (\n          <FGridItem>\n            <FItem\n              bgColor=\"#1F2128\"\n              className={\"f-mt--5 f-p--8 w-100\"}\n              align=\"center\"\n            >\n              <FTypo weight={500} size={18}>\n                STAKING CONTRIBUTION CLOSE IN {stakingInfo.stakingClosesIn}\n              </FTypo>\n            </FItem>\n          </FGridItem>\n        )}\n      </FGrid>\n    </FCard>\n  );\n};\n","/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/StakeCardSubmit.tsx",["282","283","284","285","286"],"import React, { useEffect, useState } from \"react\";\nimport {\n  FButton,\n  FCard,\n  FInputText,\n  FItem,\n  FTruncateText,\n  // FResponseBar,\n  FTypo,\n} from \"ferrum-design-system\";\nimport { ReactComponent as BrandIcon } from \"../assets/images/brand-icon.svg\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router\";\nimport toast from \"react-hot-toast\";\nimport { CLPublicKey, CasperClient, CasperServiceByJsonRPC, CLValueBuilder, decodeBase16, DeployUtil, RuntimeArgs, Signer } from \"casper-js-sdk\";\nimport TxProcessingDialog from \"../dialogs/TxProcessingDialog\";\nimport ConfirmationDialog from \"../dialogs/ConfirmationDialog\";\n\n// interface CardSubmitStakeProps {\n//   walletConnected?: boolean;\n// }\n\nconst RPC_API = \"http://44.208.234.65:7777/rpc\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\nconst casperClient = new CasperClient(RPC_API);\n\nconst StakeCardSubmit = () => {\n  const { stakingId }: any = useParams();\n  const navigate = useHistory();\n  const dispatch = useDispatch();\n  const [amount, setAmount] = useState();\n  const [processMsg, setProcessMsg] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n\n  const { connect: { config, selectedAccount, isWalletConnected, signedAddresses } } = useSelector((state: any) => state.casper);\n\n  console.log(\n    selectedAccount,\n    isWalletConnected,\n    signedAddresses,\n    config\n  )\n \n  const isAddressSigned = () => {\n    if (signedAddresses[`${stakingId}`]?.length) {\n      const result = signedAddresses[`${stakingId}`]?.find((address: any) => address === selectedAccount.address);\n      if (result) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const performStake = async () => {\n    if (\n      isWalletConnected &&\n      selectedAccount\n    ) {\n      console.log('hellooooo');\n      setLoading(true)\n      try {\n        // console.log(selectedAccount?.address, Number(amount));\n        if (amount && Number(amount) > 0) {\n          const publicKeyHex = selectedAccount?.address;\n          const senderPublicKey = CLPublicKey.fromHex(publicKeyHex);\n\n          const deployParams = new DeployUtil.DeployParams(\n            senderPublicKey,\n            'casper-test'\n          );\n\n          const args = RuntimeArgs.fromMap({\n            \"amount\": CLValueBuilder.u256(amount),\n          });\n\n          const session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(\n            decodeBase16('bece653339b33f9b7d6ada25f5ef38ed27ac8aeb9d21a8246233b7fdf3e9c559'),\n            'stake',\n            args\n          );\n\n          const payment = DeployUtil.standardPayment(50000000000);\n\n          const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n\n          const deployJson: any = DeployUtil.deployToJson(deploy);\n        \n          Signer.sign(deployJson, publicKeyHex).then(async (signedDeployJson) => {\n            const signedDeploy = DeployUtil.deployFromJson(signedDeployJson);\n            console.log(signedDeploy)\n            if (signedDeploy.ok) {\n              const res = await casperClient.putDeploy(signedDeploy.val);\n              console.log(res, 'resres');\n              setProcessMsg(res)\n              setLoading(false)\n              setShowConfirmation(true)\n            }\n            \n          });\n          // navigate.push(`/${config._id}`);\n          //toast.success(`${amount} tokens are staked successfully`);\n        } else {\n          toast.error(\"Amount must be greater than 0\");\n        }\n      } catch (e) {\n        console.log(\"ERROR : \", e);\n        toast.error(\"An error occured please see console for details\");\n        navigate.push(`/${config._id}`);\n      } finally {\n        //setLoading(false)\n      }\n\n    } else {\n      console.log(\"heelelll\")\n      navigate.push(`/${config._id}`);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <FCard className={\"card-submit-stake f-mb-2\"}>\n        <FItem display={\"flex\"} className=\"f-mb-2\">\n          <FItem bgColor=\"#1F2128\" size={70} className=\"f-p--8 f-mr-1\" display={\"flex\"} alignX=\"center\" alignY={\"center\"}>\n            <BrandIcon />\n          </FItem>\n          <FItem className={\"f-ml-1\"}>\n            <FTypo size={24} color=\"white\" className={\"f-mt--4\"}>\n              Title Pool\n            </FTypo>\n            <FTypo size={12} color=\"white\">\n              POOL TYPE\n            </FTypo>\n          </FItem>\n        </FItem>\n        <FInputText\n          className={\"f-mt-2\"}\n          label={\"AMOUNT TO STAKE\"}\n          placeholder={\"0\"}\n          value={amount}\n          onChange={(e: any) => {\n            e.preventDefault();\n            const re = /^-?\\d*\\.?\\d*$/;\n            if (e.target.value === \"\" || re.test(e.target.value)) {\n              setAmount(e.target.value);\n            }\n          }}\n          postfix={\n            <FTypo className={\"f-pr-1\"} color=\"#dab46e\">\n              TOKEN\n            </FTypo>\n          }\n        />\n        {/* <FInputText\n          className={\"f-mt-2\"}\n          label={\"AVAILABLE BALANCE\"}\n          placeholder={\"0\"}\n          onChange={(e: any) => console.log(e.target.value)}\n          disabled={true}\n        />\n        <FInputText\n          className={\"f-mt-2\"}\n          label={\"REMAINING FROM CAP\"}\n          placeholder={\"0\"}\n          onChange={(e: any) => console.log(e)}\n          disabled={true}\n        /> */}\n\n        {/* <FResponseBar\n          variant=\"error\"\n          title=\"Could send a sign request. Not enough balance.\"\n          className=\"f-mb-0\"\n          show={true}\n        ></FResponseBar> */}\n        <FButton title={\" Submit Stake\"} className=\"w-100 f-mt-2\" onClick={performStake} />\n      </FCard>\n      <ConfirmationDialog onHide={() =>setShowConfirmation(false)} transaction={processMsg} message={'Transaction sent to network and is processing.'} show={showConfirmation} />\n      <TxProcessingDialog onHide={() =>setLoading(false)} message={ processMsg || \"Transaction Processing....\"} show={loading}/>\n    </React.Fragment>\n  );\n};\nexport default StakeCardSubmit;\n","/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/WithdrawCardSubmit.tsx",["287","288"],"import React, { useEffect, useState } from \"react\";\nimport {\n  FButton,\n  FCard,\n  FInputText,\n  FItem,\n  //   FResponseBar,\n  FTypo,\n} from \"ferrum-design-system\";\nimport { ReactComponent as BrandIcon } from \"../assets/images/brand-icon.svg\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router\";\nimport toast from \"react-hot-toast\";\n\n// interface CardSubmitStakeProps {\n//   walletConnected?: boolean;\n// }\n\nconst WidthCardSubmit = () => {\n  const { stakingId }: any = useParams();\n  console.log(stakingId);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const [amount, setAmount] = useState();\n  const { connect: { selectedAccount, isWalletConnected, signedAddresses, config } } = useSelector((state: any) => state.casper);\n\n  useEffect(() => {\n    if (\n      !isWalletConnected ||\n      selectedAccount === undefined\n    ) {\n      history.push(`/${stakingId}`);\n    }\n    // eslint-disable-next-line\n  }, [isWalletConnected, selectedAccount, signedAddresses]);\n\n  const isAddressSigned = () => {\n    if (signedAddresses[`${stakingId}`]?.length) {\n      const result = signedAddresses[`${stakingId}`]?.find((address: any) => address === selectedAccount.address);\n      if (result) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const performWithdraw = async () => {\n    if (\n      isWalletConnected &&\n      selectedAccount &&\n      isAddressSigned()\n    ) {\n      try {\n        if (amount && Number(amount) > 0) {\n          history.push(`/${stakingId}`);\n          toast.success(`${amount} tokens are unstaked successfully`);\n        } else {\n          toast.error(\"Amount must be greater than 0\");\n        }\n      } catch (e) {\n        console.log(\"ERROR : \", e);\n        toast.error(\"An error occured please see console for details\");\n        history.push(`/${stakingId}`);\n      }\n    } else {\n        history.push(`/${stakingId}`);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <FCard className={\"card-submit-stake f-mb-2\"}>\n        <FItem display={\"flex\"} className=\"f-mb-2\">\n          <FItem bgColor=\"#1F2128\" size={70} className=\"f-p--8 f-mr-1\" display={\"flex\"} alignX=\"center\" alignY={\"center\"}>\n            <BrandIcon />\n          </FItem>\n          <FItem className={\"f-ml-1\"}>\n            <FTypo size={24} color=\"white\" className={\"f-mt--4\"}>\n              Title Pool\n            </FTypo>\n            <FTypo size={12} color=\"white\">\n              POOL TYPE\n            </FTypo>\n          </FItem>\n        </FItem>\n        <FInputText\n          className={\"f-mt-2\"}\n          label={\"AMOUNT TO WITHDRAW\"}\n          placeholder={\"0\"}\n          value={amount}\n          onChange={(e: any) => {\n            e.preventDefault();\n            const re = /^-?\\d*\\.?\\d*$/;\n            if (e.target.value === \"\" || re.test(e.target.value)) {\n              setAmount(e.target.value);\n            }\n          }}\n          postfix={\n            <FTypo className={\"f-pr-1\"} color=\"#dab46e\">\n              TOKEN\n            </FTypo>\n          }\n        />\n        {/* <FInputText\n          className={\"f-mt-2\"}\n          label={\"AVAILABLE BALANCE\"}\n          placeholder={\"0\"}\n          onChange={(e: any) => console.log(e.target.value)}\n          disabled={true}\n        />\n        <FInputText\n          className={\"f-mt-2\"}\n          label={\"REMAINING FROM CAP\"}\n          placeholder={\"0\"}\n          onChange={(e: any) => console.log(e)}\n          disabled={true}\n        /> */}\n\n        {/* <FResponseBar\n          variant=\"error\"\n          title=\"Could send a sign request. Not enough balance.\"\n          className=\"f-mb-0\"\n          show={true}\n        ></FResponseBar> */}\n        <FButton\n          title={'Withdraw'}\n          className=\"w-100 f-mt-2\"\n          onClick={performWithdraw}\n        />\n      </FCard>\n    </React.Fragment>\n  );\n};\nexport default WidthCardSubmit;\n","/Users/kabiribraheem/Documents/staking-casper-frontend/src/redux/store.ts",[],"/Users/kabiribraheem/Documents/staking-casper-frontend/src/header/header.tsx",["289","290","291","292"],"import React, { useEffect, useState } from \"react\";\nimport {\n  FHeader,\n  // FHeaderCollapse,\n  FButton,\n  FItem,\n  FTruncateText,\n  // FHeaderMenuItem,\n} from \"ferrum-design-system\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ReactComponent as IconNetwork } from \"../assets/images/casper.svg\";\n\nimport logo from \"../assets/images/logo-light.svg\";\nimport { CgArrowsExchangeAlt } from \"react-icons/cg\";\nimport { CasperClient, CasperServiceByJsonRPC, CLPublicKey } from \"casper-js-sdk\";\nimport { \n  connectWallet as connectWalletDispatch,\n  resetWallet,\n  configLoaded,\n  signed\n} from '../redux/casper/casperActions';\nimport toast from \"react-hot-toast\";\nimport AddressSelector from \"../dialogs/AddressSelector\";\nimport { useParams } from \"react-router\";\nimport TxProcessingDialog from \"../dialogs/TxProcessingDialog\";\n\nconst RPC_API = \"http://44.208.234.65:7777/rpc\";\nconst STATUS_API = \"http://159.65.203.12:8888\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\nconst casperClient = new CasperClient(RPC_API);\n\nconst Header = () => {\n  const dispatch = useDispatch();\n  const { stakingId }: any = useParams();\n  console.log(stakingId);\n  const connection = useSelector((state: any) => state.casper.connect)\n  const [loading, setLoading] = useState(false);\n\n  console.log(connection)\n\n  const [showAddressSelectorDlg, setShowAddressSelectorDlg] =  useState<boolean>(false);\n\n  const selectedAccount: { address?: string } = {};\n\n  const connectWallet = async () => {\n    await window.casperlabsHelper.requestConnection()\n\n    const isConnected = await window.casperlabsHelper.isConnected();\n\n    if (isConnected) {\n      setLoading(true)\n      await AccountInformation();\n      setLoading(false)\n    }\n \n    return;\n  };\n\n  const disconnectWallet = async () => {\n    window.casperlabsHelper.disconnectFromSite();\n    await resetWallet()(dispatch)\n  };\n\n  async function AccountInformation() {\n    const isConnected = await window.casperlabsHelper.isConnected();\n\n    if (isConnected) {\n      try {\n        const publicKey = await window.casperlabsHelper.getActivePublicKey();\n        console.log(publicKey, stakingId, 'stakingIdstakingId');\n        //textAddress.textContent += publicKey;\n\n        const latestBlock = await casperService.getLatestBlockInfo();\n        console.log(latestBlock);\n\n        const root = await casperService.getStateRootHash(latestBlock?.block?.hash);\n        console.log(latestBlock, root)\n\n        await connectWalletDispatch([ { \"address\": publicKey } ])(dispatch)\n\n        const balanceUref = await casperService.getAccountBalanceUrefByPublicKey(root, CLPublicKey.fromHex(publicKey));\n        \n        // @ts-ignore\n        const balance = await casperService.getAccountBalance(latestBlock?.block?.header?.state_root_hash, balanceUref);\n        console.log(balance.toString())\n\n        const info = await casperService.getDeployInfo(\n          stakingId\n        )\n\n        // @ts-ignore\n        const infoArguments = (info.deploy.session.ModuleBytes.args || []).find(\n          (e: any) => e[0] === 'erc20_contract_hash'\n        )\n\n        if (infoArguments) {\n          console.log(infoArguments, 'infoArguments', infoArguments[1].parsed)\n          const token = infoArguments[1].parsed.split('-')[1]\n\n          console.log(token, latestBlock?.block?.header?.state_root_hash, 'latestBlock?.block?.header?.state_root_hash,latestBlock?.block?.header?.state_root_hash,');\n\n          const tokenName = await casperService.getBlockState(\n            //@ts-ignore\n            latestBlock?.block?.header?.state_root_hash,\n            `hash-${token}`,\n            ['name']\n          )\n  \n          const tokenSymbol = await casperService.getBlockState(\n             //@ts-ignore\n             latestBlock?.block?.header?.state_root_hash,\n             `hash-${token}`,\n             ['symbol']\n          )\n  \n          console.log(tokenName.CLValue?.data, tokenSymbol.CLValue?.data, 'info2info2')\n\n          if(info.deploy.session) {\n            // @ts-ignore\n            configLoaded({\n              // @ts-ignore\n              config: info.deploy.session.ModuleBytes.args,\n              tokenInfo: {\n                tokenSymbol: tokenSymbol.CLValue?.data,\n                tokenName: tokenName.CLValue?.data\n              }\n            })(dispatch);\n            //@ts-ignore\n            signed(info.deploy.approvals)(dispatch)\n            //@ts-ignore\n            console.log(info.deploy, 'infoooo');\n          }\n        }\n        \n      } catch (error) {\n        toast.error(`An error occured Error: ${error}`);\n        console.log(error, 'Error occured')\n      }\n    }\n  }\n\n  return (\n    <div>\n      <FHeader showLogo={true} headerLogo={logo} className=\"bg-none\">\n        <FItem display={\"flex\"} align=\"right\" alignY={\"center\"}>\n          {connection?.isWalletConnected ? (\n            <>\n              <FButton\n                prefix={<CgArrowsExchangeAlt />}\n                onClick={() => {\n                  setShowAddressSelectorDlg(true);\n                }}\n              ></FButton>\n              <FButton\n                className=\"f-mr-1\"\n                title={\"Disconnect Wallet\"}\n                onClick={disconnectWallet}\n                btnInfo={\n                  <FItem display={\"flex\"}>\n                    <IconNetwork width={20} />{\" \"}\n                    <FTruncateText\n                      className=\"f-ml-1\"\n                      text={connection?.selectedAccount?.address || ''}\n                    />\n                  </FItem>\n                }\n              />\n            </>\n          ) : (\n            <FButton\n              className=\"f-mr-1\"\n              title={\"Connect Wallet\"}\n              onClick={connectWallet}\n            ></FButton>\n          )}\n          {/* <FHeaderCollapse>\n            <FHeaderMenuItem to=\"/status-page\" title=\"Status Page\" />\n          </FHeaderCollapse> */}\n        </FItem>\n      </FHeader>\n      <TxProcessingDialog showClose={false} message={\"Loading Configuration\"} show={loading}/>\n      {showAddressSelectorDlg && (\n        <AddressSelector\n          show={showAddressSelectorDlg}\n          onHide={() => setShowAddressSelectorDlg(false)}\n          connectedAccounts={connection?.connectedAccounts || []}\n          onAccountSelect={(account: any) => {\n           // onAccountSelect(account);\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Header;\n","/Users/kabiribraheem/Documents/staking-casper-frontend/src/dialogs/AddressSelector.tsx",[],"/Users/kabiribraheem/Documents/staking-casper-frontend/src/redux/casper/casperSlice.js",[],["293","294"],"/Users/kabiribraheem/Documents/staking-casper-frontend/src/redux/casper/casperActions.js",["295","296"],"import { casperSlice } from \"./casperSlice\";\nimport moment from \"moment\";\nconst { actions } = casperSlice;\n\nexport const connectWallet = (connectedAccounts) => async (dispatch) => {\n  dispatch(\n    actions.connectWallet({\n      connectedAccounts: connectedAccounts,\n    })\n  );\n};\n\nexport const resetWallet = (connectedAccounts) => async (dispatch) => {\n  dispatch(actions.resetWallet());\n};\n\nexport const staked = (selectedAddress) => async (dispatch) => {\n  dispatch(actions.staked({ selectedAddress }));\n};\n\nexport const signed = (signedAddress) => async (dispatch) => {\n  dispatch(actions.signed(signedAddress));\n};\n\nexport const selectAccount = (selectedAccount) => async (dispatch) => {\n  dispatch(actions.selectAccount({ selectedAccount }));\n};\n\nexport const shouldStake = () => async (dispatch) => {\n  dispatch(actions.setShouldStake());\n};\n\nexport const stakeWithdrawSucess = () => async (dispatch) => {\n  dispatch(actions.stakeWithdrawSucess());\n};\n\nexport const configLoaded = (config) => async (dispatch) => {\n  console.log(config.config, 'configgggg');\n  let data = {}\n  if (config.config.length) {\n    config.config.forEach(\n      e => {\n        console.log(e[1])\n        data[e[0]] = e[1].parsed\n      }\n    )\n  }\n\n  data = {\n    ...data,\n    stakingTotal: data?.staking_total,\n    stakingEnds: moment.unix(data.staking_ends).format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingStarts: moment.unix(data.staking_starts).format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdrawStarts: moment.unix(data.withdraw_starts).format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdrawEnds: moment.unix(data.withdraw_ends).format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingEnds: moment.unix(data.staking_ends).format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingStarts: moment.unix(data.staking_starts).format(\"YYYY-MM-DD HH:mm:ss\")\n  };\n\n  console.log(data, config);\n  dispatch(actions.configLoaded({ config: data, tokenInfo: config.tokenInfo }));\n};\n","/Users/kabiribraheem/Documents/staking-casper-frontend/src/utils/DateUtil.ts",[],"/Users/kabiribraheem/Documents/staking-casper-frontend/src/dialogs/TxProcessingDialog.tsx",["297","298"],"import React from \"react\";\nimport {\n  // FButton,\n  FDialog,\n  FList,\n  FLoader,\n  FTypo,\n} from \"ferrum-design-system\";\nimport Loader from \"./../assets/images/loading2.gif\";\n\nconst TxProcessingDialog = ({\n  show,\n  showClose = true,\n  onHide,\n  message\n}: any) => {\n  return (\n    <FDialog\n      variant={\"dark\"}\n      size={\"medium\"}\n      onHide={() => onHide()}\n      show={show}\n      className=\"connect-wallet-dialog text-center\"\n      showClose={showClose}\n      title={\"\"}\n    >\n      <FList display=\"block\" type=\"number\" variant=\"connect-wallet\">\n        <img src={Loader} width={\"170px\"} />\n        <FTypo size={20} className={\"f-mb--5 f-mt--9\"}> {message || 'Loading'} </FTypo>\n      </FList>\n      {/* <FButton onClick={onHide} title={\"Close\"}></FButton> */}\n    </FDialog>\n  );\n};\n\nexport default TxProcessingDialog;\n","/Users/kabiribraheem/Documents/staking-casper-frontend/src/dialogs/ConfirmationDialog.tsx",["299","300","301","302","303","304","305","306"],"import { CasperClient, CasperServiceByJsonRPC } from \"casper-js-sdk\";\nimport { FDialog, FList, FTruncateText, FTypo, FLink } from \"ferrum-design-system\";\nimport { useEffect, useState } from \"react\";\nimport Loader from \"./../assets/images/loaderIcon.svg\";\nimport Success from \"./../assets/images/SuccessIcon.svg\";\nimport Failure from \"./../assets/images/FailureIcon.svg\";\nimport LoaderGif from \"./../assets/images/loading2.gif\";\n\nconst RPC_API = \"http://44.208.234.65:7777/rpc\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\nconst casperClient = new CasperClient(RPC_API);\n\nconst ConfirmationDialog = ({\n    show,\n    onHide,\n    message,\n    transaction\n  }: any) => {\n    const [processing, setProcessing] = useState(false)\n    const [isSuccessful, setIsSuccessful] = useState(false)\n    const [isDone, setIsDone] = useState(false)\n    const [intervalId, setIntervalId] = useState(null as any)\n\n    const checkTransaction = async () => {\n        setProcessing(true)\n        const res = await casperService.getDeployInfo(transaction)\n        console.log(res);\n        if(res.execution_results.length) {\n            console.log(res)\n           //@ts-ignore\n           if(res.execution_results[0].result.Failure) {\n            //@ts-ignore\n            console.log(res.execution_results[0].result.Failure.error_message, 'res[0].result.Failure')\n            setProcessing(false)\n            setIsDone(true)\n            setIsSuccessful(false)\n           }\n           //@ts-ignore\n           if(res.execution_results[0].result.Success) {\n            //@ts-ignore\n            console.log(res.execution_results[0].result.Success)\n            setProcessing(false)\n            setIsDone(true)\n            setIsSuccessful(true)\n\n           }\n        }\n    }\n    useEffect(() => {\n        console.log(transaction, isDone)\n        if (transaction && !isDone) {\n          let intervalId = setInterval(\n            () =>  checkTransaction()\n          , 5000)\n          setIntervalId(intervalId)\n        }\n\n        if (transaction && isDone) {\n          console.log(intervalId)\n          clearInterval(intervalId)\n        }\n    }, [transaction, isDone])\n\n    useEffect(() => {\n      return () => {\n        setIsDone(false)\n        setIsSuccessful(false)\n        setProcessing(false)\n      }\n    }, [])\n\n    return (\n      <FDialog\n        variant={\"dark\"}\n        size={\"medium\"}\n        onHide={() => onHide()}\n        show={show}\n        className=\"connect-wallet-dialog text-center\"\n        showClose={true}\n        title={\"\"}\n      >\n        <FList display=\"block\" type=\"number\" variant=\"connect-wallet\">\n          {\n            isDone && transaction ?\n              isSuccessful ?\n                <img src={Success} width={\"120px\"} />\n              : <img src={Failure} width={\"120px\"} />\n            : transaction && processing ?\n              <img src={LoaderGif} width={\"120px\"} />\n            : <img src={Loader} width={\"120px\"} />\n          }\n          <FTypo size={20} className={\"f-mb--5 f-mt--9\"}> \n            {\n              isDone && transaction ?\n               isSuccessful ?\n                  ('Transaction processed successfully')\n               : ('Transaction failed on chain')\n              :  (message || 'Loading')\n            }\n          </FTypo>\n          <a href={`https://testnet.cspr.live/deploy/${transaction}`} target=\"_blank\" style={{\"color\": \"white\"}}>\n            <FTypo size={15} className={\"f-mb--5 f-mt--9\"}>\n              <FTruncateText text={transaction} />\n            </FTypo>\n          </a>\n        </FList>\n        {/* <FButton onClick={onHide} title={\"Close\"}></FButton> */}\n      </FDialog>\n    );\n  };\n  \nexport default ConfirmationDialog\n  ","/Users/kabiribraheem/Documents/staking-casper-frontend/src/pages/Admin/admin.tsx",["307","308"],"import React, { useEffect } from \"react\";\nimport { Header, InputForm, Table } from \"../../components/admin\";\nimport { FContainer } from \"ferrum-design-system\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// import * as stakingActions from \"../redux/reducers/staking/stakingAction\";\n\nconst AdminDashboard = () => {\n  const dispatch: any = useDispatch();\n  // const { stakingList } = useSelector((state: any) => state.staking);\n\n  useEffect(() => {\n    //dispatch(stakingActions.getStakingList());\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div>\n      <FContainer>\n        <Header />\n        <InputForm />\n        <Table list={[]} />\n      </FContainer>\n    </div>\n  );\n};\n\nexport default AdminDashboard;","/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/admin/index.ts",[],"/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/admin/table.tsx",["309","310","311"],"import React, { useEffect, useState } from \"react\";\nimport {\n  FButton,\n  FTable,\n  FContainer,\n  FItem,\n  FTypo,\n  // FLoader,\n  FDialog,\n  FGrid,\n  FGridItem,\n  FInputText,\n  // FLoader,\n} from \"ferrum-design-system\";\nimport Datatable from \"react-bs-datatable\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// import * as stakingActions from \"../redux/reducers/staking/stakingAction\";\nimport { useForm } from \"react-hook-form\";\n\n// Create table headers consisting of 4 columns.\nconst header = [\n  { title: \"Token Address\", prop: \"tokenAddress\" },\n  { title: \"Staking Capital\", prop: \"stakingCapital\" },\n  { title: \"Staking Starts\", prop: \"stakingStarts\" },\n  { title: \"Staking Ends\", prop: \"stakingEnds\" },\n  { title: \"Withdraw Starts\", prop: \"withdrawStarts\" },\n  { title: \"Withdraw Ends\", prop: \"withdrawEnds\" },\n  { title: \"App ID\", prop: \"appId\" },\n  { title: \"Contract Address\", prop: \"encodedAddress\" },\n  { title: \"Action\", prop: \"action\" },\n];\n\n// Randomize data of the table columns.\n// Note that the fields are all using the `prop` field of the headers.\n\nconst initialValues = {\n  rewardAmount: \"\",\n  withdrawableAmount: \"\",\n};\n\nexport const Table = ({ list }: any) => {\n  const dispatch: any = useDispatch();\n  const [body, setBody] = useState<Array<any>>([]);\n  //const { actionLoading } = useSelector((state: any) => state.staking);\n  const [stakingIdForReward, setStakingIdForReward] = useState<any>(undefined);\n  // const [showMessage, setShowMessage] = useState(false);\n\n  const {\n    reset,\n    register,\n    // control,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n    // watch,\n  } = useForm({ defaultValues: initialValues });\n\n  useEffect(() => {\n    if (list && list.length) {\n      // console.log(list);\n\n      let sortedArray = list.slice().sort((a: any, b: any) => {\n        return +new Date(b.updatedAt) - +new Date(a.updatedAt);\n      });\n      let deployed: any[] = [];\n      let rest: any[] = [];\n      sortedArray.slice().forEach((item: any) => {\n        if (item.status === \"DEPLOY\") {\n          deployed.push(item);\n        } else {\n          rest.push(item);\n        }\n      });\n      let formatedResult = [...deployed, ...rest].map((item: any) => {\n        return {\n          tokenAddress: (\n            <div data-label=\"Token Address\">\n              <FItem display={\"flex\"}>\n                <FTypo size={10}>{item.tokenAddress}</FTypo>\n              </FItem>\n            </div>\n          ),\n          stakingCapital: (\n            <div data-label=\"Staking Capital\">\n              <FItem display={\"flex\"}>\n                <FTypo size={10}>{item.stakingCapital}</FTypo>\n              </FItem>\n            </div>\n          ),\n          stakingStarts: (\n            <div data-label=\"Staking Starts\">\n              <FItem display={\"flex\"}>\n                <FTypo size={10}>{item.stakingStarts}</FTypo>\n              </FItem>\n            </div>\n          ),\n          stakingEnds: (\n            <div data-label=\"Staking Ends\">\n              <FItem display={\"flex\"}>\n                <FTypo size={10}>{item.stakingEnds}</FTypo>\n              </FItem>\n            </div>\n          ),\n          withdrawStarts: (\n            <div data-label=\"Withdraw Starts\">\n              <FItem display={\"flex\"}>\n                <FTypo size={10}>{item.withdrawStarts}</FTypo>\n              </FItem>\n            </div>\n          ),\n          withdrawEnds: (\n            <div data-label=\"Withdraw Ends\">\n              <FItem display={\"flex\"}>\n                <FTypo size={10}>{item.withdrawEnds}</FTypo>\n              </FItem>\n            </div>\n          ),\n          appId: (\n            <div data-label=\"App ID\">\n              <FItem display={\"flex\"}>\n                <FTypo size={10}>{item.appId ? item.appId : \"\"}</FTypo>\n              </FItem>\n            </div>\n          ),\n          encodedAddress: (\n            <div data-label=\"Contract Address\">\n              <FItem display={\"flex\"}>\n                <FTypo size={10}>{item.encodedAddress ? item.encodedAddress : \"\"}</FTypo>\n              </FItem>\n            </div>\n          ),\n          action: (\n            <div data-label=\"Action\">\n              <FItem display={\"flex\"}>\n                <FButton\n                  title={\n                    item.status === \"CREATED\"\n                      ? \"Deploy\"\n                      : item.status === \"DEPLOY\"\n                      ? \"Setup\"\n                      : item.status === \"SETUP\"\n                      ? \"Add Reward\"\n                      : item.status === \"REWARD\"\n                      ? \"OPEN APP\"\n                      : \"Retry \" + item.status.replace(\"FAIL_\", \" \").toLowerCase().replace(\"reward\", \"Add Reward\")\n                  }\n                  disabled={false}\n                  // style={{ backgroud: \"red\" }}\n                  onClick={() => actionHandler(item)}\n                />\n              </FItem>\n            </div>\n          ),\n        };\n      });\n      setBody(formatedResult);\n    }\n    // eslint-disable-next-line\n  }, [list, false]);\n\n  console.log(false);\n  const actionHandler = (item: any) => {\n    // if (item.encodedAddress) {\n    //   dispatch(stakingActions.addRewardStaking(item._id));\n    // } else\n\n    if (item.status === \"CREATED\" || item.status === \"FAIL_DEPLOY\") {\n      // dispatch(stakingActions.deployStaking(item._id));\n    } else if (item.status === \"DEPLOY\" || item.status === \"FAIL_SETUP\") {\n      // dispatch(stakingActions.setupStaking(item._id));\n    } else if (item.status === \"SETUP\" || item.status === \"FAIL_REWARD\") {\n      setStakingIdForReward(item._id);\n    } else if (item.status === \"REWARD\") {\n      window.open(`${process.env.REACT_APP_STAKING_APP_URL}/${item._id}`, \"_blank\", \"noopener,noreferrer\");\n    }\n  };\n\n  const onSubmit = async (values: any) => {\n    // dispatch(stakingActions.addRewardStaking(stakingIdForReward, values));\n    reset(initialValues);\n    setStakingIdForReward(undefined);\n    // dispatch(\n    //   stakingActions.createStaking({\n    //     ...values,\n    //     stakingStarts: moment(values.stakingStarts).format(),\n    //     stakingEnds: moment(values.stakingEnds).format(),\n    //     withdrawStarts: moment(values.withdrawStarts).format(),\n    //     withdrawEnds: moment(values.withdrawEnds).format(),\n    //   })\n    // );\n  };\n\n  return (\n    <FContainer type={\"fluid\"}>\n      {/* <FCard variant={\"futuristic-secondary\"}> */}\n      {/* {actionLoading ? (\n        <FLoader loading={actionLoading}></FLoader>\n      ) : ( */}\n      {/* {showMessage && (\n        <FResponseBar title=\"Contract deployed, Please fund this contract address with Algos to pay inner tx fee before setup.\" show={true} variant=\"success\"></FResponseBar>\n      )} */}\n      <FTable>\n        <Datatable tableHeaders={header} tableBody={body} rowsPerPage={10} />\n      </FTable>\n      {/* )} */}\n      {/* </FCard> */}\n      <FDialog title={\"Add reward\"} size={\"medium\"} show={stakingIdForReward} showClose={true} onHide={() => setStakingIdForReward(undefined)}>\n        <form autoComplete=\"true\" onSubmit={handleSubmit(onSubmit)}>\n          <FGrid className={\"f-mt-1\"}>\n            <FGridItem>\n              <FInputText\n                label=\"Reward Amount\"\n                name=\"rewardAmount\"\n                type=\"text\"\n                className={\"w-100\"}\n                placeholder=\"0\"\n                register={register}\n                validations={{\n                  required: {\n                    value: true,\n                    message: \"Reward amount is required\",\n                  },\n                }}\n                error={errors[\"rewardAmount\"]?.message ? errors[\"rewardAmount\"]?.message : \"\"}\n              />\n            </FGridItem>\n            <FGridItem>\n              <FInputText\n                label=\"Withdrawable Amount\"\n                name=\"withdrawableAmount\"\n                type=\"text\"\n                className={\"w-100 f-mt-1\"}\n                placeholder=\"0\"\n                register={register}\n                validations={{\n                  required: {\n                    value: true,\n                    message: \"Withdrawable amount is required\",\n                  },\n                }}\n                error={errors[\"withdrawableAmount\"]?.message ? errors[\"withdrawableAmount\"]?.message : \"\"}\n              />\n            </FGridItem>\n            <FGridItem alignX={\"end\"}>\n              <FButton\n                type=\"submit\"\n                disabled={false}\n                title={\"Add Reward\"}\n                className={\"f-mt-1 f-mb-2\"}\n                // postfix={isSubmitting && <ClipLoader color=\"#fff\" size={20} />}\n              ></FButton>\n            </FGridItem>\n          </FGrid>\n        </form>\n      </FDialog>\n    </FContainer>\n  );\n};\n","/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/admin/inputForm.tsx",["312","313","314"],"import { useState } from \"react\";\nimport { FGrid, FCard, FGridItem, FContainer, FInputText, FButton, FDatepicker } from \"ferrum-design-system\";\nimport { useForm } from \"react-hook-form\";\nimport { Toaster } from \"react-hot-toast\";\nimport { useSelector } from \"react-redux\";\nimport { CLPublicKey, CasperClient, CLValueBuilder, DeployUtil, RuntimeArgs, Signer, CasperServiceByJsonRPC } from \"casper-js-sdk\";\nimport TxProcessingDialog from \"../../dialogs/TxProcessingDialog\";\nimport ConfirmationDialog from \"../../dialogs/ConfirmationDialog\";\nimport toast from \"react-hot-toast\";\nimport axios from \"axios\";\n\nconst RPC_API = \"http://44.208.234.65:7777/rpc\";\nconst casperClient = new CasperClient(RPC_API);\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\n\nfunction toTimestamp(strDate: string){\n  var datum = Date.parse(strDate);\n  return datum/1000;\n}\n\nexport const InputForm = () => {\n  const connection = useSelector((state: any) => state.casper.connect)\n  const { connect: { config, selectedAccount, isWalletConnected, signedAddresses } } = useSelector((state: any) => state.casper);\n  // const { actionLoading } = useSelector((state: any) => state.staking);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [processMsg, setProcessMsg] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const initialValues = {\n    stakingPoolName: \"\",\n    tokenAddress: \"\",\n    stakingCap: \"\",\n    stakingStarts: \"\",\n    stakingEnds: \"\",\n    withdrawStarts: \"\",\n    withdrawEnds: \"\",\n  };\n\n  const {\n    // reset,\n    register,\n    control,\n    handleSubmit,\n    formState: {\n      errors,\n      //  isSubmitting\n    },\n    // watch,\n  } = useForm({ defaultValues: initialValues });\n\n  const onSubmit = async (values: any) => {\n\n    try {\n      // console.log(selectedAccount?.address, Number(amount));\n      const publicKeyHex = selectedAccount?.address;\n      const senderPublicKey = CLPublicKey.fromHex(publicKeyHex);\n\n      const deployParams = new DeployUtil.DeployParams(\n        senderPublicKey,\n        'casper-test'\n      );\n\n      const latestBlock = await casperService.getLatestBlockInfo();\n\n      const contractHash = await casperService.getBlockState(\n        //@ts-ignore\n        latestBlock?.block?.header?.state_root_hash,\n        `hash-${values.tokenAddress}`,\n        []\n     )\n\n     let resolvedContractHash = '';\n\n     if (contractHash) {\n      resolvedContractHash = contractHash.ContractPackage?.versions[0].contractHash || ''\n     }\n\n      const args = RuntimeArgs.fromMap({\n        \"name\": CLValueBuilder.string(values.stakingPoolName),\n        \"address\": CLValueBuilder.string(values.tokenAddress),\n        \"staking_starts\": CLValueBuilder.u64(toTimestamp(values.stakingStarts)),\n        \"staking_ends\": CLValueBuilder.u64(toTimestamp(values.stakingEnds)),\n        \"withdraw_starts\": CLValueBuilder.u64(toTimestamp(values.withdrawStarts)),\n        \"withdraw_ends\": CLValueBuilder.u64(toTimestamp(values.withdrawEnds)),\n        \"staking_total\": CLValueBuilder.u256(values.stakingCap),\n        \"erc20_contract_hash\": CLValueBuilder.string(resolvedContractHash?.toString())\n      });\n\n      const res = await axios.get('http://localhost:3000/',\n        {\n          responseType: 'arraybuffer'\n        }\n      ) \n\n      if (res.status === 200 && res.data) {\n\n        const wasm = new Uint8Array(res.data);\n\n        const session = DeployUtil.ExecutableDeployItem.newModuleBytes(\n          wasm,\n          args\n        );\n\n        const payment = DeployUtil.standardPayment(200000000000);\n\n        const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n\n        const deployJson: any = DeployUtil.deployToJson(deploy);\n      \n        Signer.sign(deployJson, publicKeyHex).then(async (signedDeployJson) => {\n          const signedDeploy = DeployUtil.deployFromJson(signedDeployJson);\n          console.log(signedDeploy)\n          if (signedDeploy.ok) {\n            const res = await casperClient.putDeploy(signedDeploy.val);\n            console.log(res, 'resres');\n            setProcessMsg(res)\n            setLoading(false)\n            setShowConfirmation(true)\n          }\n        })\n      }\n  \n    } catch (e) {\n      console.log(\"ERROR : \", e);\n      toast.error(\"An error occured please see console for details\");\n    } finally {\n      //setLoading(false)\n    }\n  };\n\n  return (\n    <>\n      <Toaster />\n      <FContainer width={1200}>\n        <FCard variant={\"primary\"} className=\"f-mt-2 f-mb-2\">\n          <form autoComplete=\"false\" onSubmit={handleSubmit(onSubmit)}>\n            <FGrid className={\"f-mt-1\"}>\n              <FGridItem size={[6, 6, 6]}>\n                <FInputText\n                  label=\"Staking Pool Name\"\n                  name=\"stakingPoolName\"\n                  type=\"text\"\n                  className={\"w-100\"}\n                  placeholder=\"0\"\n                  register={register}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"pool Name is required\",\n                    },\n                  }}\n                  error={errors[\"stakingPoolName\"]?.message ? errors[\"stakingPoolName\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem size={[6, 6, 6]}>\n                <FInputText\n                  label=\"Token Address\"\n                  name=\"tokenAddress\"\n                  type=\"text\"\n                  className={\"w-100\"}\n                  placeholder=\"0\"\n                  register={register}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"Token Address is required\",\n                    },\n                  }}\n                  error={errors[\"tokenAddress\"]?.message ? errors[\"tokenAddress\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem size={[6, 6, 6]}>\n                <FInputText\n                  label=\"stakingCap\"\n                  name=\"stakingCap\"\n                  className={\"f-mt-1\"}\n                  type=\"text\"\n                  placeholder=\"0\"\n                  register={register}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"Staking Cap is required\",\n                    },\n                  }}\n                  error={errors[\"stakingCap\"]?.message ? errors[\"stakingCap\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem size={[6, 6, 6]}>\n                <FDatepicker\n                  label=\"Staking Starts\"\n                  name=\"stakingStarts\"\n                  className={\"f-mt-1\"}\n                  placeholderText=\"MM-DD-YYYY\"\n                  register={register}\n                  showTimeSelect={true}\n                  control={control}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"Staking Starts is required\",\n                    },\n                  }}\n                  error={errors[\"stakingStarts\"]?.message ? errors[\"stakingStarts\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem size={[6, 6, 6]}>\n                <FDatepicker\n                  label=\"Staking Ends\"\n                  name=\"stakingEnds\"\n                  className={\"f-mt-1\"}\n                  placeholderText=\"MM-DD-YYYY\"\n                  register={register}\n                  showTimeSelect={true}\n                  control={control}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"Staking Ends is required\",\n                    },\n                  }}\n                  error={errors[\"stakingEnds\"]?.message ? errors[\"stakingEnds\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem size={[6, 6, 6]}>\n                <FDatepicker\n                  label=\"Withdraw Starts\"\n                  name=\"withdrawStarts\"\n                  className={\"f-mt-1\"}\n                  placeholderText=\"MM-DD-YYYY\"\n                  register={register}\n                  showTimeSelect={true}\n                  control={control}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"Withdraw Starts is required\",\n                    },\n                  }}\n                  error={errors[\"withdrawStarts\"]?.message ? errors[\"withdrawStarts\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem size={[6, 6, 6]}>\n                <FDatepicker\n                  label=\"Withdraw Ends\"\n                  name=\"withdrawEnds\"\n                  className={\"f-mt-1\"}\n                  placeholderText=\"MM-DD-YYYY\"\n                  register={register}\n                  showTimeSelect={true}\n                  control={control}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"Withdraw Ends is required\",\n                    },\n                  }}\n                  error={errors[\"withdrawEnds\"]?.message ? errors[\"withdrawEnds\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem alignX={\"end\"}>\n                <FButton\n                  type=\"submit\"\n                  disabled={!connection.connectedAccounts.length}\n                  title={!!connection.connectedAccounts.length ? \"Create Staking\" : 'Connect wallet to create' }\n                  className={\"f-mt-1 f-mb-2\"}\n                  // postfix={isSubmitting && <ClipLoader color=\"#fff\" size={20} />}\n                ></FButton>\n              </FGridItem>\n            </FGrid>\n          </form>\n        </FCard>\n        <ConfirmationDialog onHide={() =>setShowConfirmation(false)} transaction={processMsg} message={'Transaction successfully sent to network.'} show={showConfirmation} />\n        <TxProcessingDialog onHide={() =>setLoading(false)} message={ processMsg || \"Transaction Processing....\"} show={loading}/>\n      </FContainer>\n    </>\n  );\n};\n","/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/admin/header.tsx",["315","316","317","318","319","320","321","322"],"import React, { useEffect, useState } from \"react\";\nimport {\n  FHeader,\n  // FHeaderCollapse,\n  FButton,\n  FItem,\n  FTruncateText,\n  // FHeaderMenuItem,\n} from \"ferrum-design-system\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ReactComponent as IconNetwork } from \"../../assets/images/casper.svg\";\n\nimport logo from \"../../assets/images/logo-light.svg\";\nimport { CgArrowsExchangeAlt } from \"react-icons/cg\";\nimport { CasperClient, CasperServiceByJsonRPC, CLPublicKey } from \"casper-js-sdk\";\nimport { \n  connectWallet as connectWalletDispatch,\n  resetWallet,\n  configLoaded,\n  signed\n} from '../../redux/casper/casperActions';\nimport toast from \"react-hot-toast\";\nimport AddressSelector from \"../../dialogs/AddressSelector\";\nimport { useParams } from \"react-router\";\nimport TxProcessingDialog from \"../../dialogs/TxProcessingDialog\";\n\nconst RPC_API = \"http://44.208.234.65:7777/rpc\";\nconst STATUS_API = \"http://159.65.203.12:8888\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\nconst casperClient = new CasperClient(RPC_API);\n\nexport const Header = () => {\n  const dispatch = useDispatch();\n\n  const connection = useSelector((state: any) => state.casper.connect)\n  const [loading, setLoading] = useState(false);\n\n  console.log(connection)\n\n  const [showAddressSelectorDlg, setShowAddressSelectorDlg] =  useState<boolean>(false);\n\n  const selectedAccount: { address?: string } = {};\n\n  const connectWallet = async () => {\n    await window.casperlabsHelper.requestConnection()\n\n    const isConnected = await window.casperlabsHelper.isConnected();\n\n    if (isConnected) {\n      setLoading(true)\n      await AccountInformation();\n      setLoading(false)\n    }\n \n    return;\n  };\n\n  const disconnectWallet = async () => {\n    window.casperlabsHelper.disconnectFromSite();\n    await resetWallet()(dispatch)\n  };\n\n  async function AccountInformation() {\n    const isConnected = await window.casperlabsHelper.isConnected();\n\n    if (isConnected) {\n      try {\n        const publicKey = await window.casperlabsHelper.getActivePublicKey();\n        console.log(publicKey, 'stakingIdstakingId');\n        //textAddress.textContent += publicKey;\n\n        const latestBlock = await casperService.getLatestBlockInfo();\n        console.log(latestBlock);\n\n        const root = await casperService.getStateRootHash(latestBlock?.block?.hash);\n        console.log(latestBlock, root)\n\n        await connectWalletDispatch([ { \"address\": publicKey } ])(dispatch)\n\n        const balanceUref = await casperService.getAccountBalanceUrefByPublicKey(root, CLPublicKey.fromHex(publicKey));\n        \n        // @ts-ignore\n        const balance = await casperService.getAccountBalance(latestBlock?.block?.header?.state_root_hash, balanceUref);\n        console.log(balance.toString())\n        \n      } catch (error) {\n        \n        //toast.error(`An error occured Error: ${error}`);\n        console.log(error, 'Error occured')\n      }\n    }\n  }\n\n  return (\n    <div>\n      <FHeader titleText={\"Staking Admin Portal\"} showLogo={true} headerLogo={logo} className=\"bg-none\">\n        <FItem display={\"flex\"} align=\"right\" alignY={\"center\"}>\n          {connection?.isWalletConnected ? (\n            <>\n              <FButton\n                prefix={<CgArrowsExchangeAlt />}\n                onClick={() => {\n                  setShowAddressSelectorDlg(true);\n                }}\n              ></FButton>\n              <FButton\n                className=\"f-mr-1\"\n                title={\"Disconnect Wallet\"}\n                onClick={disconnectWallet}\n                btnInfo={\n                  <FItem display={\"flex\"}>\n                    <IconNetwork width={20} />{\" \"}\n                    <FTruncateText\n                      className=\"f-ml-1\"\n                      text={connection?.selectedAccount?.address || ''}\n                    />\n                  </FItem>\n                }\n              />\n            </>\n          ) : (\n            <FButton\n              className=\"f-mr-1\"\n              title={\"Connect Wallet\"}\n              onClick={connectWallet}\n            ></FButton>\n          )}\n          {/* <FHeaderCollapse>\n            <FHeaderMenuItem to=\"/status-page\" title=\"Status Page\" />\n          </FHeaderCollapse> */}\n        </FItem>\n      </FHeader>\n      <TxProcessingDialog showClose={false} message={\"Loading Configuration\"} show={loading}/>\n      {showAddressSelectorDlg && (\n        <AddressSelector\n          show={showAddressSelectorDlg}\n          onHide={() => setShowAddressSelectorDlg(false)}\n          connectedAccounts={connection?.connectedAccounts || []}\n          onAccountSelect={(account: any) => {\n           // onAccountSelect(account);\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Header;\n\n\n// titleText={\"Staking Admin Portal\"}","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/index.tsx",[],["323","324"],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/reportWebVitals.ts",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/redux/store.ts",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/App.tsx",["325","326"],"import React from \"react\";\n// import logo from \"./assets/images/logo-light.svg\";\n\nimport { FLayout, FMain, FContainer } from \"ferrum-design-system\";\n// å// import { ReactComponent as IconNetwork } from \"./assets/images/Icon-connect-network.svg\";\nimport BaseRoutes from \"./Routes\";\nimport { Toaster } from \"react-hot-toast\";\nimport Header from \"./header/header\";\nimport { WalletApplicationWrapper } from \"./components/connector\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WalletApplicationWrapper.ApplicationWrapper>\n        <Toaster position=\"top-right\" />\n        <FLayout themeBuilder={false} FsiderLayoutState={true}>\n          <FContainer width={1200} className=\"f-pl-1 f-pr-1\">\n            <BaseRoutes />\n          </FContainer>\n        </FLayout>\n        </WalletApplicationWrapper.ApplicationWrapper>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/redux/casper/casperSlice.js",[],["327","328"],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/Routes.tsx",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/header/header.tsx",["329","330","331","332"],"import React, { useEffect, useState } from \"react\";\nimport {\n  FHeader,\n  // FHeaderCollapse,\n  FButton,\n  FItem,\n  FTruncateText,\n  // FHeaderMenuItem,\n} from \"ferrum-design-system\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ReactComponent as IconNetwork } from \"../assets/images/casper.svg\";\n\nimport logo from \"../assets/images/logo-light.svg\";\nimport { CgArrowsExchangeAlt } from \"react-icons/cg\";\nimport { CasperClient, CasperServiceByJsonRPC, CLPublicKey } from \"casper-js-sdk\";\nimport { \n  connectWallet as connectWalletDispatch,\n  resetWallet,\n  configLoaded,\n  signed\n} from '../redux/casper/casperActions';\nimport toast from \"react-hot-toast\";\nimport AddressSelector from \"../dialogs/AddressSelector\";\nimport { useHistory, useParams } from \"react-router\";\nimport TxProcessingDialog from \"../dialogs/TxProcessingDialog\";\n\nconst RPC_API = \"https://rpc.testnet.casperlabs.io/rpc\";\nconst STATUS_API = \"https://4211-2a01-4b00-832a-3100-f467-7086-4cda-bb21.eu.ngrok.io/http://159.65.203.12:8888\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\nconst casperClient = new CasperClient(RPC_API);\n\nconst Header = () => {\n  const dispatch = useDispatch();\n  const par = useParams();\n  const { bridgePoolAddress }: any = useParams();\n  console.log(bridgePoolAddress, par, 'bridgePoolAddress');\n  const navigate = useHistory();\n  const connection = useSelector((state: any) => state.casper.connect)\n  const [loading, setLoading] = useState(false);\n\n  console.log(connection)\n\n  const [showAddressSelectorDlg, setShowAddressSelectorDlg] =  useState<boolean>(false);\n\n  const selectedAccount: { address?: string } = {};\n\n  const connectWallet = async () => {\n    await window.casperlabsHelper?.requestConnection()\n\n    const isConnected = await window.casperlabsHelper.isConnected();\n\n    if (isConnected) {\n      setLoading(true)\n      await AccountInformation();\n      setLoading(false)\n    }\n \n    return;\n  };\n\n  const disconnectWallet = async () => {\n    window.casperlabsHelper.disconnectFromSite();\n    await resetWallet()(dispatch)\n  };\n\n  async function AccountInformation() {\n    const isConnected = await window.casperlabsHelper.isConnected();\n\n    if (isConnected) {\n      try {\n        const publicKey = await window.casperlabsHelper.getActivePublicKey();\n        console.log(publicKey, bridgePoolAddress, 'stakingIdstakingId');\n        //textAddress.textContent += publicKey;\n\n        const latestBlock = await casperService.getLatestBlockInfo();\n        console.log(latestBlock);\n\n        const root = await casperService.getStateRootHash(latestBlock?.block?.hash);\n        console.log(latestBlock, root)\n\n        await connectWalletDispatch([ { \"address\": publicKey } ])(dispatch)\n\n        const balanceUref = await casperService.getAccountBalanceUrefByPublicKey(root, CLPublicKey.fromHex(publicKey));\n        \n        // @ts-ignore\n        const balance = await casperService.getAccountBalance(latestBlock?.block?.header?.state_root_hash, balanceUref);\n        console.log(balance.toString())\n\n        const info = await casperService.getDeployInfo(\n          bridgePoolAddress\n        )\n\n        // @ts-ignore\n        const infoArguments = (info.deploy.session.ModuleBytes.args || []).find(\n          (e: any) => e[0] === 'erc20_contract_hash'\n        )\n\n        if (infoArguments) {\n          console.log(infoArguments, 'infoArguments', infoArguments[1].parsed)\n          const token = infoArguments[1].parsed.split('-')[1]\n\n          console.log(token, latestBlock?.block?.header?.state_root_hash, 'latestBlock?.block?.header?.state_root_hash,latestBlock?.block?.header?.state_root_hash,');\n\n          const tokenName = await casperService.getBlockState(\n            //@ts-ignore\n            latestBlock?.block?.header?.state_root_hash,\n            `hash-${token}`,\n            ['name']\n          )\n  \n          const tokenSymbol = await casperService.getBlockState(\n             //@ts-ignore\n             latestBlock?.block?.header?.state_root_hash,\n             `hash-${token}`,\n             ['symbol']\n          )\n  \n          console.log(tokenName.CLValue?.data, tokenSymbol.CLValue?.data, 'info2info2')\n\n          if(info.deploy.session) {\n            // @ts-ignore\n            configLoaded({\n              // @ts-ignore\n              config: info.deploy.session.ModuleBytes.args,\n              tokenInfo: {\n                tokenSymbol: tokenSymbol.CLValue?.data,\n                tokenName: tokenName.CLValue?.data\n              }\n            })(dispatch);\n            //@ts-ignore\n            signed(info.deploy.approvals)(dispatch)\n            //@ts-ignore\n            console.log(info.deploy, 'infoooo');\n          }\n        }\n        \n      } catch (error) {\n        toast.error(`An error occured Error: ${error}`);\n        console.log(error, 'Error occured')\n      }\n    }\n  }\n\n  return (\n    <div>\n      <FHeader showLogo={true} headerLogo={logo} className=\"bg-none\">\n        <FItem display={\"flex\"} align=\"right\" alignY={\"center\"}>\n          <FItem display={\"flex\"} align=\"right\" alignY={\"center\"}>\n            <span style={{\"cursor\": \"pointer\"}} onClick={() => navigate.push(`/withdraw`)}>My Withdrawals</span>\n          </FItem>\n          {connection?.isWalletConnected ? (\n            <>\n              <FButton\n                prefix={<CgArrowsExchangeAlt />}\n                onClick={() => {\n                  setShowAddressSelectorDlg(true);\n                }}\n              ></FButton>\n              <FButton\n                className=\"f-mr-1\"\n                title={\"Disconnect Wallet\"}\n                onClick={disconnectWallet}\n                btnInfo={\n                  <FItem display={\"flex\"}>\n                    <IconNetwork width={20} />{\" \"}\n                    <FTruncateText\n                      className=\"f-ml-1\"\n                      text={connection?.selectedAccount?.address || ''}\n                    />\n                  </FItem>\n                }\n              />\n            </>\n          ) : (\n            <FButton\n              className=\"f-mr-1\"\n              title={\"Connect Wallet\"}\n              onClick={connectWallet}\n            ></FButton>\n          )}\n          {/* <FHeaderCollapse>\n            <FHeaderMenuItem to=\"/status-page\" title=\"Status Page\" />\n          </FHeaderCollapse> */}\n        </FItem>\n      </FHeader>\n      <TxProcessingDialog showClose={false} message={\"Loading Configuration\"} show={loading}/>\n      {showAddressSelectorDlg && (\n        <AddressSelector\n          show={showAddressSelectorDlg}\n          onHide={() => setShowAddressSelectorDlg(false)}\n          connectedAccounts={connection?.connectedAccounts || []}\n          onAccountSelect={(account: any) => {\n           // onAccountSelect(account);\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Header;\n","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/redux/casper/casperActions.js",["333","334"],"import { casperSlice } from \"./casperSlice\";\nimport moment from \"moment\";\nconst { actions } = casperSlice;\n\nexport const connectWallet = (connectedAccounts) => async (dispatch) => {\n  dispatch(\n    actions.connectWallet({\n      connectedAccounts: connectedAccounts,\n    })\n  );\n};\n\nexport const resetWallet = (connectedAccounts) => async (dispatch) => {\n  dispatch(actions.resetWallet());\n};\n\n\nexport const fetchWithdrawals = (withdrawalItems) => async (dispatch) => {\n  console.log(withdrawalItems)\n  dispatch(actions.fetchWithdrawals({ withdrawalItems }));\n};\n\nexport const staked = (selectedAddress) => async (dispatch) => {\n  dispatch(actions.staked({ selectedAddress }));\n};\n\nexport const signed = (signedAddress) => async (dispatch) => {\n  dispatch(actions.signed(signedAddress));\n};\n\nexport const selectAccount = (selectedAccount) => async (dispatch) => {\n  dispatch(actions.selectAccount({ selectedAccount }));\n};\n\nexport const shouldStake = () => async (dispatch) => {\n  dispatch(actions.setShouldStake());\n};\n\nexport const stakeWithdrawSucess = () => async (dispatch) => {\n  dispatch(actions.stakeWithdrawSucess());\n};\n\nexport const configLoaded = (config) => async (dispatch) => {\n  console.log(config.config, 'configgggg');\n  let data = {}\n  if (config.config.length) {\n    config.config.forEach(\n      e => {\n        console.log(e[1])\n        data[e[0]] = e[1].parsed\n      }\n    )\n  }\n\n  data = {\n    ...data,\n    stakingTotal: data?.staking_total,\n    stakingEnds: moment.unix(data.staking_ends).format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingStarts: moment.unix(data.staking_starts).format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdrawStarts: moment.unix(data.withdraw_starts).format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdrawEnds: moment.unix(data.withdraw_ends).format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingEnds: moment.unix(data.staking_ends).format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingStarts: moment.unix(data.staking_starts).format(\"YYYY-MM-DD HH:mm:ss\")\n  };\n\n  console.log(data, config);\n  dispatch(actions.configLoaded({ config: data, tokenInfo: config.tokenInfo }));\n};\n","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/dialogs/TxProcessingDialog.tsx",["335","336"],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/dialogs/AddressSelector.tsx",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/WithdrawCardSubmit.tsx",["337","338"],["339","340"],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/utils/DateUtil.ts",[],["341","342"],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/dialogs/ConfirmationDialog.tsx",["343","344","345","346","347","348","349","350","351","352","353"],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/utils/connect-wallet/ConnectWalletDialog.tsx",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/index.ts",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/index.ts",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/index.ts",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/walletApplicationWrapperInterfaces.ts",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/redux/walletConnectorActions.ts",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/redux/walletApplicationWrapperActions.ts",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/redux/walletConnectorSlice.ts",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/redux/walletApplicationWrapperSlice.ts",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/wallet-connector.tsx",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/walletApplicationWrapper.tsx",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/walletConnectorInterfaces.ts",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/walletAuthenticationActions.ts",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/web3React/connectors.ts",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/walletAuthenticationSlice.ts",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/WalletAuthenticationInterfaces.ts",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/client/index.ts",["354","355"],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/utils/web3Helper.ts",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/Withdrawals.tsx",["356","357","358","359","360","361"],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/utils/stringUtils.ts",[],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/pages/CasperSwap.tsx",["362","363","364","365","366","367","368","369"],"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/pages/CasperWithdrawal.tsx",["370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391"],"import { useState } from \"react\";\nimport { FButton, FCard, FGrid, FGridItem, FInputText, FItem, FTypo } from \"ferrum-design-system\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStakingInfo } from \"../utils/DateUtil\";\nimport { connectWallet, connectWallet as connectWalletDispatch } from '../redux/casper/casperActions';\nimport { useHistory, useParams } from \"react-router\";\nimport './layout.scss';\nimport { CasperServiceByJsonRPC, CLPublicKey, CLValue, \n  CLValueBuilder, \n  decodeBase16, \n  DeployUtil,\n  RuntimeArgs,\n  Signer,\n  CasperClient\n} from \"casper-js-sdk\";\nimport toast from \"react-hot-toast\";\nimport TxProcessingDialog from \"../dialogs/TxProcessingDialog\";\nimport ConfirmationDialog from \"../dialogs/ConfirmationDialog\";\nimport { MetaMaskConnector } from \"../components/connector\";\nimport { ConnectWalletDialog } from \"../utils/connect-wallet/ConnectWalletDialog\";\nimport { crucibleApi } from \"../client\";\nimport { Web3Helper } from \"../utils/web3Helper\";\nimport { Withdrawals } from \"../components/Withdrawals\";\n\nconst RPC_API = \"http://44.208.234.65:7777/rpc\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\nconst casperClient = new CasperClient(RPC_API);\n\nexport const CasperWithdrawal = () => {\n  const navigate = useHistory();\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const [amount, setAmount] = useState();\n  const [targetNetwork, setTargetNetwork] = useState('56');\n  const [targetToken, setTargetToken] = useState('BASE_FRM');\n  const [processMsg, setProcessMsg] = useState('');\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const connection = useSelector((state: any) => state.casper.connect)\n  const { connect: { config, selectedAccount, isWalletConnected, signedAddresses, } } = useSelector((state: any) => state.casper);\n\n  // const [stakingCap, setStakingCap] = useState<any>(undefined);\n  const [stakeSoFar, setStakeSoFar] = useState<any>(undefined);\n  const [youStakedBalance, setYourStakedBalance] = useState<any>(undefined);\n  const { isConnected, isConnecting, currentWalletNetwork, walletAddress, networkClient } =\n    useSelector((state: any) => state.casper.walletConnector);\n\n  const stakingInfo = getStakingInfo(\n    config?.stakingEnds,\n    config?.stakingStarts,\n    config?.withdrawStarts,\n    config?.withdrawEnds\n  );\n\n  async function AccountInformation() {\n    const isConnected = await window.casperlabsHelper.isConnected();\n    console.log(isConnected, connection, 'isConnectedisConnected')\n    if (isConnected) {\n        const publicKey = await window.casperlabsHelper.getActivePublicKey();\n        console.log(publicKey);\n        //textAddress.textContent += publicKey;\n\n        const latestBlock = await casperService.getLatestBlockInfo();\n        console.log(latestBlock);\n\n        const root = await casperService.getStateRootHash(latestBlock?.block?.hash);\n        console.log(latestBlock, root)\n\n        await connectWalletDispatch([{\n          \"address\": publicKey\n        }])(dispatch)\n        const balanceUref = await casperService.getAccountBalanceUrefByPublicKey(root, CLPublicKey.fromHex(publicKey));\n        console.log(balanceUref)\n        \n        // @ts-ignore\n        const balance = await casperService.getAccountBalance(latestBlock?.block?.header?.state_root_hash, balanceUref);\n        console.log(balance.toString())\n        //textBalance.textContent = `PublicKeyHex ${balance.toString()}`;\n    }\n  }\n\n\n  const connectWallet = async () => {\n    await window.casperlabsHelper.requestConnection()\n\n    const isConnected = await window.casperlabsHelper.isConnected();\n\n    if (isConnected) {\n      await AccountInformation();\n    }   \n  };\n  // console.log(stakingCap, stakeSoFar, youStakedBalance);\n  {/* casper-client put-deploy \\\n    --chain-name casper-test \\\n    --node-address http://44.208.234.65:7777 \\\n    --secret-key keys/secret_key.pem \\\n    --session-hash hash-c312f4eda82c253e2817f41586ce0af99294d652507c2c7827bb6abbdc0f6e0f \\\n    --session-entry-point withdraw_signed \\\n    --payment-amount 5000000000 \\\n    --session-arg \"token_address:string='contract-package-wasme222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473'\" \\\n    --session-arg \"payee:string='0203d3a2770de0d4fe892c74e4e33f98580bb6136b1ab35f1244b0cf0758b3d1d3b3'\" \\\n    --session-arg \"amount:u256='1'\" \\\n    --session-arg \"signature:string='7369676e6174757265'\" \\\n    --session-arg \"salt:string='0000000000000000000000000000000000000000000000000000000000000001'\"  */}\n\n  const performWithdraw = async () => {\n    if (\n      isWalletConnected &&\n      selectedAccount\n    ) {\n      setLoading(true)\n      try {\n        // console.log(selectedAccount?.address, Number(amount));\n        if (amount && Number(amount) > 0) {\n          const publicKeyHex = selectedAccount?.address;\n          const senderPublicKey = CLPublicKey.fromHex(publicKeyHex);\n\n          const deployParams = new DeployUtil.DeployParams(\n            senderPublicKey,\n            'casper-test'\n          );\n\n          const args = RuntimeArgs.fromMap({\n            \"amount\": CLValueBuilder.u256(amount),\n            \"token_address\": CLValueBuilder.string('contract-package-wasme222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473'),\n            \"payee\": CLValueBuilder.string('0203d3a2770de0d4fe892c74e4e33f98580bb6136b1ab35f1244b0cf0758b3d1d3b3'),\n            \"signature\": CLValueBuilder.string('7369676e6174757265'),\n            \"salt\": CLValueBuilder.string('0000000000000000000000000000000000000000000000000000000000000001'),\n          });\n\n          const session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(\n            decodeBase16('c312f4eda82c253e2817f41586ce0af99294d652507c2c7827bb6abbdc0f6e0f'),\n            'withdraw_signed',\n            args\n          );\n\n          const payment = DeployUtil.standardPayment(5000000000);\n\n          const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n\n          const deployJson: any = DeployUtil.deployToJson(deploy);\n        \n          Signer.sign(deployJson, publicKeyHex).then(async (signedDeployJson) => {\n            const signedDeploy = DeployUtil.deployFromJson(signedDeployJson);\n            console.log(signedDeploy)\n            if (signedDeploy.ok) {\n              const res = await casperClient.putDeploy(signedDeploy.val);\n              console.log(res, 'resres');\n              if (res) {\n               \n              }\n              setProcessMsg(res)\n              setLoading(false)\n              setShowConfirmation(true)\n            }\n            \n          });\n          // navigate.push(`/${config._id}`);\n          //toast.success(`${amount} tokens are staked successfully`);\n        } else {\n          toast.error(\"Amount must be greater than 0\");\n        }\n      } catch (e) {\n        console.log(\"ERROR : \", e);\n        toast.error(\"An error occured please see console for details\");\n        navigate.push(`/${config._id}`);\n      } finally {\n        //setLoading(false)\n      }\n\n    } else {\n      console.log(\"heelelll\")\n      navigate.push(`/${config._id}`);\n    }\n  };\n\n  return (\n    <>\n      <FCard className={\"card-staking f-mb-2\"}>\n        <FGrid alignX={\"center\"} className=\"f-mb-1\">\n          <FTypo size={18} align={\"center\"} className={\"f-mb-14 f-mt--7\"}>\n           CASPER TOKEN WITHDRAWAL\n          </FTypo>\n          <FGridItem alignX={\"center\"} size={[8, 8, 12]} className=\"f-m-auto f-mb-1\">\n            <FItem align={\"center\"}>    \n              <FInputText\n                className={\"f-mt-2\"}\n                label={\"AMOUNT TO WITHDRAW\"}\n                placeholder={\"0\"}\n                value={amount}\n                onChange={(e: any) => {\n                  e.preventDefault();\n                  const re = /^-?\\d*\\.?\\d*$/;\n                  if (e.target.value === \"\" || re.test(e.target.value)) {\n                    setAmount(e.target.value);\n                  }\n                }}\n                postfix={\n                  <FTypo className={\"f-pr-1\"} color=\"#dab46e\">\n                    TOKEN\n                  </FTypo>\n                }\n              />\n              <FInputText\n                className={\"f-mt-2\"}\n                label={\"Target Network\"}\n                disabled\n                value={targetNetwork}\n                onChange={(e: any) => {}}\n              />\n              <FInputText\n                className={\"f-mt-2\"}\n                label={\"Target Token\"}\n                disabled\n                value={targetToken}\n                onChange={(e: any) => {}}\n              />\n              <FInputText\n                className={\"f-mt-2\"}\n                label={\"Token Address\"}\n                disabled\n                value={'contract-package-wasme222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473'}\n                onChange={(e: any) => {}}\n              />\n              <FInputText\n                className={\"f-mt-2\"}\n                label={\"Payee\"}\n                disabled\n                value={'0203d3a2770de0d4fe892c74e4e33f98580bb6136b1ab35f1244b0cf0758b3d1d3b3'}\n                onChange={(e: any) => {}}\n              />\n              {/* <FInputText\n                className={\"f-mt-2\"}\n                label={\"signature\"}\n                disabled\n                value={'7369676e6174757265'}\n                onChange={(e: any) => {}}\n              />\n              <FInputText\n                className={\"f-mt-2\"}\n                label={\"salt\"}\n                disabled\n                value={'0000000000000000000000000000000000000000000000000000000000000001'}\n                onChange={(e: any) => {}}\n              /> */}\n              {\n                connection.isWalletConnected && (\n                  <FButton \n                    title={\"WITHDRAW\"}\n                    className=\"w-100 f-mt-2\"\n                    onClick={() => performWithdraw()}\n                  />\n                )\n              }\n              {\n                !connection.isWalletConnected && (\n                  <FButton title={\"Connect Casper Signer\"} className=\"w-100 f-mt-2\" onClick={() => connectWallet()} />\n                )\n              }\n            </FItem>\n          </FGridItem>\n        </FGrid>\n        <ConfirmationDialog onHide={() =>setShowConfirmation(false)} transaction={processMsg} message={'Transaction sent to network and is processing.'} show={showConfirmation} />\n        <TxProcessingDialog onHide={() =>setLoading(false)} message={ processMsg || \"Transaction Processing....\"} show={loading}/>\n      </FCard>\n    </>\n  );\n};\n\nexport default CasperWithdrawal\n","/Users/kabiribraheem/Documents/casper-bridge-frontend/src/utils/network.ts",[],{"ruleId":"392","replacedBy":"393"},{"ruleId":"394","replacedBy":"395"},{"ruleId":"396","severity":1,"message":"397","line":4,"column":19,"nodeType":"398","messageId":"399","endLine":4,"endColumn":24},{"ruleId":"396","severity":1,"message":"400","line":8,"column":8,"nodeType":"398","messageId":"399","endLine":8,"endColumn":14},{"ruleId":"396","severity":1,"message":"401","line":5,"column":10,"nodeType":"398","messageId":"399","endLine":5,"endColumn":17},{"ruleId":"396","severity":1,"message":"402","line":5,"column":26,"nodeType":"398","messageId":"399","endLine":5,"endColumn":33},{"ruleId":"396","severity":1,"message":"403","line":5,"column":35,"nodeType":"398","messageId":"399","endLine":5,"endColumn":45},{"ruleId":"396","severity":1,"message":"404","line":1,"column":28,"nodeType":"398","messageId":"399","endLine":1,"endColumn":33},{"ruleId":"396","severity":1,"message":"405","line":2,"column":17,"nodeType":"398","messageId":"399","endLine":2,"endColumn":26},{"ruleId":"396","severity":1,"message":"406","line":2,"column":28,"nodeType":"398","messageId":"399","endLine":2,"endColumn":36},{"ruleId":"396","severity":1,"message":"407","line":3,"column":10,"nodeType":"398","messageId":"399","endLine":3,"endColumn":21},{"ruleId":"396","severity":1,"message":"408","line":3,"column":23,"nodeType":"398","messageId":"399","endLine":3,"endColumn":34},{"ruleId":"396","severity":1,"message":"409","line":4,"column":25,"nodeType":"398","messageId":"399","endLine":4,"endColumn":34},{"ruleId":"396","severity":1,"message":"410","line":5,"column":8,"nodeType":"398","messageId":"399","endLine":5,"endColumn":13},{"ruleId":"396","severity":1,"message":"411","line":19,"column":47,"nodeType":"398","messageId":"399","endLine":19,"endColumn":54},{"ruleId":"396","severity":1,"message":"412","line":86,"column":13,"nodeType":"398","messageId":"399","endLine":86,"endColumn":21},{"ruleId":"396","severity":1,"message":"413","line":11,"column":22,"nodeType":"398","messageId":"399","endLine":11,"endColumn":35},{"ruleId":"396","severity":1,"message":"414","line":12,"column":28,"nodeType":"398","messageId":"399","endLine":12,"endColumn":48},{"ruleId":"396","severity":1,"message":"405","line":1,"column":17,"nodeType":"398","messageId":"399","endLine":1,"endColumn":26},{"ruleId":"396","severity":1,"message":"415","line":7,"column":3,"nodeType":"398","messageId":"399","endLine":7,"endColumn":16},{"ruleId":"396","severity":1,"message":"416","line":25,"column":7,"nodeType":"398","messageId":"399","endLine":25,"endColumn":20},{"ruleId":"396","severity":1,"message":"417","line":31,"column":9,"nodeType":"398","messageId":"399","endLine":31,"endColumn":17},{"ruleId":"396","severity":1,"message":"418","line":46,"column":9,"nodeType":"398","messageId":"399","endLine":46,"endColumn":24},{"ruleId":"396","severity":1,"message":"417","line":23,"column":9,"nodeType":"398","messageId":"399","endLine":23,"endColumn":17},{"ruleId":"396","severity":1,"message":"419","line":25,"column":75,"nodeType":"398","messageId":"399","endLine":25,"endColumn":81},{"ruleId":"396","severity":1,"message":"405","line":1,"column":17,"nodeType":"398","messageId":"399","endLine":1,"endColumn":26},{"ruleId":"396","severity":1,"message":"420","line":28,"column":7,"nodeType":"398","messageId":"399","endLine":28,"endColumn":17},{"ruleId":"396","severity":1,"message":"421","line":31,"column":7,"nodeType":"398","messageId":"399","endLine":31,"endColumn":19},{"ruleId":"396","severity":1,"message":"422","line":44,"column":9,"nodeType":"398","messageId":"399","endLine":44,"endColumn":46},{"ruleId":"392","replacedBy":"393"},{"ruleId":"394","replacedBy":"395"},{"ruleId":"423","severity":1,"message":"424","line":56,"column":5,"nodeType":"425","messageId":"426","endLine":56,"endColumn":16},{"ruleId":"423","severity":1,"message":"427","line":57,"column":5,"nodeType":"425","messageId":"426","endLine":57,"endColumn":18},{"ruleId":"396","severity":1,"message":"402","line":6,"column":3,"nodeType":"398","messageId":"399","endLine":6,"endColumn":10},{"ruleId":"428","severity":1,"message":"429","line":28,"column":9,"nodeType":"430","endLine":28,"endColumn":45},{"ruleId":"396","severity":1,"message":"431","line":2,"column":48,"nodeType":"398","messageId":"399","endLine":2,"endColumn":53},{"ruleId":"396","severity":1,"message":"421","line":12,"column":7,"nodeType":"398","messageId":"399","endLine":12,"endColumn":19},{"ruleId":"432","severity":1,"message":"433","line":63,"column":8,"nodeType":"434","endLine":63,"endColumn":29,"suggestions":"435"},{"ruleId":"428","severity":1,"message":"429","line":87,"column":17,"nodeType":"430","endLine":87,"endColumn":54},{"ruleId":"428","severity":1,"message":"429","line":88,"column":17,"nodeType":"430","endLine":88,"endColumn":54},{"ruleId":"428","severity":1,"message":"429","line":90,"column":15,"nodeType":"430","endLine":90,"endColumn":54},{"ruleId":"428","severity":1,"message":"429","line":91,"column":15,"nodeType":"430","endLine":91,"endColumn":51},{"ruleId":"436","severity":1,"message":"437","line":102,"column":11,"nodeType":"430","messageId":"438","endLine":102,"endColumn":114,"fix":"439"},{"ruleId":"396","severity":1,"message":"408","line":4,"column":23,"nodeType":"398","messageId":"399","endLine":4,"endColumn":34},{"ruleId":"396","severity":1,"message":"417","line":8,"column":9,"nodeType":"398","messageId":"399","endLine":8,"endColumn":22},{"ruleId":"396","severity":1,"message":"408","line":16,"column":23,"nodeType":"398","messageId":"399","endLine":16,"endColumn":34},{"ruleId":"396","severity":1,"message":"417","line":42,"column":9,"nodeType":"398","messageId":"399","endLine":42,"endColumn":22},{"ruleId":"396","severity":1,"message":"440","line":53,"column":26,"nodeType":"398","messageId":"399","endLine":53,"endColumn":38},{"ruleId":"396","severity":1,"message":"419","line":23,"column":22,"nodeType":"398","messageId":"399","endLine":23,"endColumn":28},{"ruleId":"396","severity":1,"message":"441","line":23,"column":47,"nodeType":"398","messageId":"399","endLine":23,"endColumn":64},{"ruleId":"396","severity":1,"message":"442","line":23,"column":66,"nodeType":"398","messageId":"399","endLine":23,"endColumn":81},{"ruleId":"396","severity":1,"message":"405","line":1,"column":17,"nodeType":"398","messageId":"399","endLine":1,"endColumn":26},{"ruleId":"396","severity":1,"message":"443","line":19,"column":3,"nodeType":"398","messageId":"399","endLine":19,"endColumn":15},{"ruleId":"396","severity":1,"message":"444","line":20,"column":3,"nodeType":"398","messageId":"399","endLine":20,"endColumn":9},{"ruleId":"396","severity":1,"message":"445","line":22,"column":8,"nodeType":"398","messageId":"399","endLine":22,"endColumn":13},{"ruleId":"396","severity":1,"message":"409","line":24,"column":10,"nodeType":"398","messageId":"399","endLine":24,"endColumn":19},{"ruleId":"396","severity":1,"message":"420","line":28,"column":7,"nodeType":"398","messageId":"399","endLine":28,"endColumn":17},{"ruleId":"396","severity":1,"message":"421","line":31,"column":7,"nodeType":"398","messageId":"399","endLine":31,"endColumn":19},{"ruleId":"396","severity":1,"message":"422","line":43,"column":9,"nodeType":"398","messageId":"399","endLine":43,"endColumn":46},{"ruleId":"392","replacedBy":"446"},{"ruleId":"394","replacedBy":"447"},{"ruleId":"396","severity":1,"message":"397","line":4,"column":19,"nodeType":"398","messageId":"399","endLine":4,"endColumn":24},{"ruleId":"396","severity":1,"message":"400","line":8,"column":8,"nodeType":"398","messageId":"399","endLine":8,"endColumn":14},{"ruleId":"392","replacedBy":"446"},{"ruleId":"394","replacedBy":"447"},{"ruleId":"396","severity":1,"message":"405","line":1,"column":17,"nodeType":"398","messageId":"399","endLine":1,"endColumn":26},{"ruleId":"396","severity":1,"message":"420","line":28,"column":7,"nodeType":"398","messageId":"399","endLine":28,"endColumn":17},{"ruleId":"396","severity":1,"message":"421","line":31,"column":7,"nodeType":"398","messageId":"399","endLine":31,"endColumn":19},{"ruleId":"396","severity":1,"message":"422","line":46,"column":9,"nodeType":"398","messageId":"399","endLine":46,"endColumn":46},{"ruleId":"423","severity":1,"message":"424","line":62,"column":5,"nodeType":"425","messageId":"426","endLine":62,"endColumn":16},{"ruleId":"423","severity":1,"message":"427","line":63,"column":5,"nodeType":"425","messageId":"426","endLine":63,"endColumn":18},{"ruleId":"396","severity":1,"message":"402","line":6,"column":3,"nodeType":"398","messageId":"399","endLine":6,"endColumn":10},{"ruleId":"428","severity":1,"message":"429","line":28,"column":9,"nodeType":"430","endLine":28,"endColumn":45},{"ruleId":"396","severity":1,"message":"417","line":23,"column":9,"nodeType":"398","messageId":"399","endLine":23,"endColumn":17},{"ruleId":"396","severity":1,"message":"419","line":25,"column":75,"nodeType":"398","messageId":"399","endLine":25,"endColumn":81},{"ruleId":"392","replacedBy":"448"},{"ruleId":"394","replacedBy":"449"},{"ruleId":"392","replacedBy":"450"},{"ruleId":"394","replacedBy":"451"},{"ruleId":"396","severity":1,"message":"431","line":2,"column":48,"nodeType":"398","messageId":"399","endLine":2,"endColumn":53},{"ruleId":"396","severity":1,"message":"421","line":14,"column":7,"nodeType":"398","messageId":"399","endLine":14,"endColumn":19},{"ruleId":"396","severity":1,"message":"419","line":29,"column":24,"nodeType":"398","messageId":"399","endLine":29,"endColumn":30},{"ruleId":"396","severity":1,"message":"441","line":29,"column":49,"nodeType":"398","messageId":"399","endLine":29,"endColumn":66},{"ruleId":"396","severity":1,"message":"442","line":29,"column":68,"nodeType":"398","messageId":"399","endLine":29,"endColumn":83},{"ruleId":"432","severity":1,"message":"433","line":87,"column":8,"nodeType":"434","endLine":87,"endColumn":29,"suggestions":"452"},{"ruleId":"428","severity":1,"message":"429","line":111,"column":17,"nodeType":"430","endLine":111,"endColumn":54},{"ruleId":"428","severity":1,"message":"429","line":112,"column":17,"nodeType":"430","endLine":112,"endColumn":54},{"ruleId":"428","severity":1,"message":"429","line":114,"column":15,"nodeType":"430","endLine":114,"endColumn":54},{"ruleId":"428","severity":1,"message":"429","line":115,"column":15,"nodeType":"430","endLine":115,"endColumn":51},{"ruleId":"436","severity":1,"message":"437","line":126,"column":11,"nodeType":"430","messageId":"438","endLine":126,"endColumn":114,"fix":"453"},{"ruleId":"396","severity":1,"message":"454","line":1,"column":10,"nodeType":"398","messageId":"399","endLine":1,"endColumn":18},{"ruleId":"396","severity":1,"message":"455","line":2,"column":10,"nodeType":"398","messageId":"399","endLine":2,"endColumn":19},{"ruleId":"396","severity":1,"message":"456","line":1,"column":32,"nodeType":"398","messageId":"399","endLine":1,"endColumn":39},{"ruleId":"396","severity":1,"message":"457","line":8,"column":10,"nodeType":"398","messageId":"399","endLine":8,"endColumn":26},{"ruleId":"396","severity":1,"message":"458","line":9,"column":8,"nodeType":"398","messageId":"399","endLine":9,"endColumn":18},{"ruleId":"396","severity":1,"message":"411","line":15,"column":47,"nodeType":"398","messageId":"399","endLine":15,"endColumn":54},{"ruleId":"396","severity":1,"message":"416","line":33,"column":7,"nodeType":"398","messageId":"399","endLine":33,"endColumn":20},{"ruleId":"432","severity":1,"message":"459","line":169,"column":8,"nodeType":"434","endLine":169,"endColumn":40,"suggestions":"460"},{"ruleId":"396","severity":1,"message":"461","line":4,"column":10,"nodeType":"398","messageId":"399","endLine":4,"endColumn":24},{"ruleId":"396","severity":1,"message":"462","line":5,"column":10,"nodeType":"398","messageId":"399","endLine":5,"endColumn":23},{"ruleId":"396","severity":1,"message":"409","line":6,"column":22,"nodeType":"398","messageId":"399","endLine":6,"endColumn":31},{"ruleId":"396","severity":1,"message":"411","line":8,"column":47,"nodeType":"398","messageId":"399","endLine":8,"endColumn":54},{"ruleId":"396","severity":1,"message":"463","line":35,"column":25,"nodeType":"398","messageId":"399","endLine":35,"endColumn":41},{"ruleId":"396","severity":1,"message":"464","line":36,"column":23,"nodeType":"398","messageId":"399","endLine":36,"endColumn":37},{"ruleId":"396","severity":1,"message":"442","line":40,"column":66,"nodeType":"398","messageId":"399","endLine":40,"endColumn":81},{"ruleId":"396","severity":1,"message":"465","line":43,"column":24,"nodeType":"398","messageId":"399","endLine":43,"endColumn":36},{"ruleId":"396","severity":1,"message":"462","line":5,"column":10,"nodeType":"398","messageId":"399","endLine":5,"endColumn":23},{"ruleId":"396","severity":1,"message":"409","line":6,"column":22,"nodeType":"398","messageId":"399","endLine":6,"endColumn":31},{"ruleId":"396","severity":1,"message":"411","line":8,"column":47,"nodeType":"398","messageId":"399","endLine":8,"endColumn":54},{"ruleId":"396","severity":1,"message":"466","line":19,"column":10,"nodeType":"398","messageId":"399","endLine":19,"endColumn":27},{"ruleId":"396","severity":1,"message":"467","line":20,"column":10,"nodeType":"398","messageId":"399","endLine":20,"endColumn":29},{"ruleId":"396","severity":1,"message":"468","line":21,"column":10,"nodeType":"398","messageId":"399","endLine":21,"endColumn":21},{"ruleId":"396","severity":1,"message":"469","line":22,"column":10,"nodeType":"398","messageId":"399","endLine":22,"endColumn":20},{"ruleId":"396","severity":1,"message":"470","line":23,"column":10,"nodeType":"398","messageId":"399","endLine":23,"endColumn":21},{"ruleId":"396","severity":1,"message":"463","line":35,"column":25,"nodeType":"398","messageId":"399","endLine":35,"endColumn":41},{"ruleId":"396","severity":1,"message":"464","line":36,"column":23,"nodeType":"398","messageId":"399","endLine":36,"endColumn":37},{"ruleId":"396","severity":1,"message":"442","line":40,"column":66,"nodeType":"398","messageId":"399","endLine":40,"endColumn":81},{"ruleId":"396","severity":1,"message":"471","line":43,"column":10,"nodeType":"398","messageId":"399","endLine":43,"endColumn":20},{"ruleId":"396","severity":1,"message":"413","line":43,"column":22,"nodeType":"398","messageId":"399","endLine":43,"endColumn":35},{"ruleId":"396","severity":1,"message":"472","line":44,"column":10,"nodeType":"398","messageId":"399","endLine":44,"endColumn":26},{"ruleId":"396","severity":1,"message":"414","line":44,"column":28,"nodeType":"398","messageId":"399","endLine":44,"endColumn":48},{"ruleId":"396","severity":1,"message":"473","line":45,"column":11,"nodeType":"398","messageId":"399","endLine":45,"endColumn":22},{"ruleId":"396","severity":1,"message":"465","line":45,"column":24,"nodeType":"398","messageId":"399","endLine":45,"endColumn":36},{"ruleId":"396","severity":1,"message":"474","line":45,"column":38,"nodeType":"398","messageId":"399","endLine":45,"endColumn":58},{"ruleId":"396","severity":1,"message":"475","line":45,"column":60,"nodeType":"398","messageId":"399","endLine":45,"endColumn":73},{"ruleId":"396","severity":1,"message":"476","line":45,"column":75,"nodeType":"398","messageId":"399","endLine":45,"endColumn":88},{"ruleId":"396","severity":1,"message":"477","line":48,"column":9,"nodeType":"398","messageId":"399","endLine":48,"endColumn":20},{"ruleId":"478","severity":1,"message":"479","line":93,"column":3,"nodeType":"480","messageId":"481","endLine":104,"endColumn":104},"no-native-reassign",["482"],"no-negated-in-lhs",["483"],"@typescript-eslint/no-unused-vars","'FMain' is defined but never used.","Identifier","unusedVar","'Header' is defined but never used.","'FLayout' is defined but never used.","'FLoader' is defined but never used.","'FContainer' is defined but never used.","'FTypo' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'useParams' is defined but never used.","'axios' is defined but never used.","'CLValue' is defined but never used.","'isSigned' is assigned a value but never used.","'setStakeSoFar' is assigned a value but never used.","'setYourStakedBalance' is assigned a value but never used.","'FTruncateText' is defined but never used.","'casperService' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'isAddressSigned' is assigned a value but never used.","'config' is assigned a value but never used.","'STATUS_API' is assigned a value but never used.","'casperClient' is assigned a value but never used.","'selectedAccount' is assigned a value but never used.","no-dupe-keys","Duplicate key 'stakingEnds'.","ObjectExpression","unexpected","Duplicate key 'stakingStarts'.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'FLink' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkTransaction' and 'intervalId'. Either include them or remove the dependency array.","ArrayExpression",["484"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"485","text":"486"},"'isSubmitting' is assigned a value but never used.","'isWalletConnected' is assigned a value but never used.","'signedAddresses' is assigned a value but never used.","'configLoaded' is defined but never used.","'signed' is defined but never used.","'toast' is defined but never used.",["482"],["483"],["482"],["483"],["482"],["483"],["487"],{"range":"488","text":"486"},"'Dispatch' is defined but never used.","'AnyAction' is defined but never used.","'FHeader' is defined but never used.","'CasperWithdrawal' is defined but never used.","'FerrumJson' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchEvmWithdrawalItems'. Either include it or remove the dependency array.",["489"],"'getStakingInfo' is defined but never used.","'connectWallet' is defined but never used.","'setTargetNetwork' is assigned a value but never used.","'setTargetToken' is assigned a value but never used.","'isConnecting' is assigned a value but never used.","'MetaMaskConnector' is defined but never used.","'ConnectWalletDialog' is defined but never used.","'crucibleApi' is defined but never used.","'Web3Helper' is defined but never used.","'Withdrawals' is defined but never used.","'stakeSoFar' is assigned a value but never used.","'youStakedBalance' is assigned a value but never used.","'isConnected' is assigned a value but never used.","'currentWalletNetwork' is assigned a value but never used.","'walletAddress' is assigned a value but never used.","'networkClient' is assigned a value but never used.","'stakingInfo' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation",{"desc":"490","fix":"491"},[3383,3383]," rel=\"noreferrer\"",{"desc":"490","fix":"492"},[4664,4664],{"desc":"493","fix":"494"},"Update the dependencies array to be: [transaction, isDone, checkTransaction, intervalId]",{"range":"495","text":"496"},{"range":"497","text":"496"},"Update the dependencies array to be: [fetchEvmWithdrawalItems, selectedAccount, walletAddress]",{"range":"498","text":"499"},[2129,2150],"[transaction, isDone, checkTransaction, intervalId]",[3410,3431],[6824,6856],"[fetchEvmWithdrawalItems, selectedAccount, walletAddress]"]