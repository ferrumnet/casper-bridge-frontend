{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  isWalletConnected: false,\n  connectedAccounts: [],\n  selectedAccount: undefined,\n  shouldStake: false,\n  isStaked: false,\n  stakeTransaction: undefined,\n  signedAddresses: [],\n  stakeWithdrawSucess: 0,\n  config: undefined\n};\nexport const casperSlice = createSlice({\n  name: \"casper\",\n  initialState: initialState,\n  reducers: {\n    connectWallet: (state, action) => {\n      var _action$payload$conne;\n      state.isWalletConnected = true;\n      state.connectedAccounts = action.payload.connectedAccounts;\n      state.selectedAccount = (_action$payload$conne = action.payload.connectedAccounts) !== null && _action$payload$conne !== void 0 && _action$payload$conne.length ? action.payload.connectedAccounts[0] : undefined;\n    },\n    resetWallet: (state, action) => {\n      state.isWalletConnected = false;\n      state.connectedAccounts = [];\n      state.selectedAddress = undefined;\n      state.isStaked = false;\n    },\n    selectAccount: (state, action) => {\n      state.selectedAccount = action.payload.selectedAccount;\n    },\n    setShouldStake: state => {\n      state.shouldStake = true;\n    },\n    signed: (state, action) => {\n      console.log(action);\n      state.signedAddresses = action.payload;\n    },\n    staked: (state, action) => {\n      state.selectedAccount = action.payload.selectedAccount;\n      state.isStaked = true;\n      state.stakeTransaction = action.payload.stakeTransaction;\n    },\n    stakeWithdrawSucess: state => {\n      state.stakeWithdrawSucess = state.stakeWithdrawSucess + 1;\n    },\n    configLoaded: (state, action) => {\n      state.config = action.payload.config;\n    }\n  }\n});","map":{"version":3,"names":["createSlice","initialState","isWalletConnected","connectedAccounts","selectedAccount","undefined","shouldStake","isStaked","stakeTransaction","signedAddresses","stakeWithdrawSucess","config","casperSlice","name","reducers","connectWallet","state","action","payload","length","resetWallet","selectedAddress","selectAccount","setShouldStake","signed","console","log","staked","configLoaded"],"sources":["/Users/kabiribraheem/Documents/staking-casper-frontend/src/redux/casper/casperSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    isWalletConnected: false,\n    connectedAccounts: [],\n    selectedAccount: undefined,\n    shouldStake: false,\n    isStaked: false,\n    stakeTransaction: undefined,\n    signedAddresses: [],\n    stakeWithdrawSucess: 0,\n    config: undefined,\n  };\n  \n  export const casperSlice = createSlice({\n    name: \"casper\",\n    initialState: initialState,\n    reducers: {\n      connectWallet: (state, action) => {\n        state.isWalletConnected = true;\n        state.connectedAccounts = action.payload.connectedAccounts;\n        state.selectedAccount = action.payload.connectedAccounts?.length\n          ? action.payload.connectedAccounts[0]\n          : undefined;\n      },\n      resetWallet: (state, action) => {\n        state.isWalletConnected = false;\n        state.connectedAccounts = [];\n        state.selectedAddress = undefined;\n        state.isStaked = false;\n      },\n      selectAccount: (state, action) => {\n        state.selectedAccount = action.payload.selectedAccount;\n      },\n      setShouldStake: (state) => {\n        state.shouldStake = true;\n      },\n      signed: (state, action) => {\n        console.log(action)\n        state.signedAddresses = action.payload\n      },\n      staked: (state, action) => {\n        state.selectedAccount = action.payload.selectedAccount;\n        state.isStaked = true;\n        state.stakeTransaction = action.payload.stakeTransaction;\n      },\n      stakeWithdrawSucess: (state) => {\n        state.stakeWithdrawSucess = state.stakeWithdrawSucess + 1;\n      },\n      configLoaded: (state, action) => {\n        state.config = action.payload.config;\n      },\n    },\n  });\n  "],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACjBC,iBAAiB,EAAE,KAAK;EACxBC,iBAAiB,EAAE,EAAE;EACrBC,eAAe,EAAEC,SAAS;EAC1BC,WAAW,EAAE,KAAK;EAClBC,QAAQ,EAAE,KAAK;EACfC,gBAAgB,EAAEH,SAAS;EAC3BI,eAAe,EAAE,EAAE;EACnBC,mBAAmB,EAAE,CAAC;EACtBC,MAAM,EAAEN;AACV,CAAC;AAED,OAAO,MAAMO,WAAW,GAAGZ,WAAW,CAAC;EACrCa,IAAI,EAAE,QAAQ;EACdZ,YAAY,EAAEA,YAAY;EAC1Ba,QAAQ,EAAE;IACRC,aAAa,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAAA;MAChCD,KAAK,CAACd,iBAAiB,GAAG,IAAI;MAC9Bc,KAAK,CAACb,iBAAiB,GAAGc,MAAM,CAACC,OAAO,CAACf,iBAAiB;MAC1Da,KAAK,CAACZ,eAAe,GAAG,yBAAAa,MAAM,CAACC,OAAO,CAACf,iBAAiB,kDAAhC,sBAAkCgB,MAAM,GAC5DF,MAAM,CAACC,OAAO,CAACf,iBAAiB,CAAC,CAAC,CAAC,GACnCE,SAAS;IACf,CAAC;IACDe,WAAW,EAAE,CAACJ,KAAK,EAAEC,MAAM,KAAK;MAC9BD,KAAK,CAACd,iBAAiB,GAAG,KAAK;MAC/Bc,KAAK,CAACb,iBAAiB,GAAG,EAAE;MAC5Ba,KAAK,CAACK,eAAe,GAAGhB,SAAS;MACjCW,KAAK,CAACT,QAAQ,GAAG,KAAK;IACxB,CAAC;IACDe,aAAa,EAAE,CAACN,KAAK,EAAEC,MAAM,KAAK;MAChCD,KAAK,CAACZ,eAAe,GAAGa,MAAM,CAACC,OAAO,CAACd,eAAe;IACxD,CAAC;IACDmB,cAAc,EAAGP,KAAK,IAAK;MACzBA,KAAK,CAACV,WAAW,GAAG,IAAI;IAC1B,CAAC;IACDkB,MAAM,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MACzBQ,OAAO,CAACC,GAAG,CAACT,MAAM,CAAC;MACnBD,KAAK,CAACP,eAAe,GAAGQ,MAAM,CAACC,OAAO;IACxC,CAAC;IACDS,MAAM,EAAE,CAACX,KAAK,EAAEC,MAAM,KAAK;MACzBD,KAAK,CAACZ,eAAe,GAAGa,MAAM,CAACC,OAAO,CAACd,eAAe;MACtDY,KAAK,CAACT,QAAQ,GAAG,IAAI;MACrBS,KAAK,CAACR,gBAAgB,GAAGS,MAAM,CAACC,OAAO,CAACV,gBAAgB;IAC1D,CAAC;IACDE,mBAAmB,EAAGM,KAAK,IAAK;MAC9BA,KAAK,CAACN,mBAAmB,GAAGM,KAAK,CAACN,mBAAmB,GAAG,CAAC;IAC3D,CAAC;IACDkB,YAAY,EAAE,CAACZ,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACL,MAAM,GAAGM,MAAM,CAACC,OAAO,CAACP,MAAM;IACtC;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}