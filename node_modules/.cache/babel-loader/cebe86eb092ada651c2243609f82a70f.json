{"ast":null,"code":"var _jsxFileName = \"/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/admin/inputForm.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { FGrid, FCard, FGridItem, FContainer, FInputText, FButton, FDatepicker } from \"ferrum-design-system\";\nimport { useForm } from \"react-hook-form\";\nimport { Toaster } from \"react-hot-toast\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CLPublicKey, CasperClient, CLValueBuilder, DeployUtil, RuntimeArgs, Signer, CasperServiceByJsonRPC } from \"casper-js-sdk\";\n// import * as stakingActions from \"../redux/reducers/staking/stakingAction\";\nimport toast from \"react-hot-toast\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RPC_API = \"http://44.208.234.65:7777/rpc\";\nconst casperClient = new CasperClient(RPC_API);\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\nfunction toTimestamp(strDate) {\n  var datum = Date.parse(strDate);\n  return datum / 1000;\n}\nexport const InputForm = () => {\n  _s();\n  var _errors$stakingPoolNa, _errors$stakingPoolNa2, _errors$tokenAddress, _errors$tokenAddress2, _errors$stakingCap, _errors$stakingCap2, _errors$stakingStarts, _errors$stakingStarts2, _errors$stakingEnds, _errors$stakingEnds2, _errors$withdrawStart, _errors$withdrawStart2, _errors$withdrawEnds, _errors$withdrawEnds2;\n  const dispatch = useDispatch();\n  const connection = useSelector(state => state.casper.connect);\n  const {\n    connect: {\n      config,\n      selectedAccount,\n      isWalletConnected,\n      signedAddresses\n    }\n  } = useSelector(state => state.casper);\n  console.log(connection, 'connectionconnection');\n  // const { actionLoading } = useSelector((state: any) => state.staking);\n\n  const initialValues = {\n    stakingPoolName: \"\",\n    tokenAddress: \"\",\n    stakingCap: \"\",\n    stakingStarts: \"\",\n    stakingEnds: \"\",\n    withdrawStarts: \"\",\n    withdrawEnds: \"\"\n  };\n  const {\n    // reset,\n    register,\n    control,\n    handleSubmit,\n    formState: {\n      errors\n      //  isSubmitting\n    }\n    // watch,\n  } = useForm({\n    defaultValues: initialValues\n  });\n  const onSubmit = async values => {\n    try {\n      var _latestBlock$block, _latestBlock$block$he, _resolvedContractHash, _resolvedContractHash2;\n      // console.log(selectedAccount?.address, Number(amount));\n      const publicKeyHex = selectedAccount === null || selectedAccount === void 0 ? void 0 : selectedAccount.address;\n      const senderPublicKey = CLPublicKey.fromHex(publicKeyHex);\n      const deployParams = new DeployUtil.DeployParams(senderPublicKey, 'casper-test');\n      const latestBlock = await casperService.getLatestBlockInfo();\n      const contractHash = await casperService.getBlockState( //@ts-ignore\n      latestBlock === null || latestBlock === void 0 ? void 0 : (_latestBlock$block = latestBlock.block) === null || _latestBlock$block === void 0 ? void 0 : (_latestBlock$block$he = _latestBlock$block.header) === null || _latestBlock$block$he === void 0 ? void 0 : _latestBlock$block$he.state_root_hash, `hash-782fe4b0bb944e6b1fd2c5a1456a78f0e2193d47dee9b1af5711d6b6e6aaca60`, []);\n      let resolvedContractHash = '';\n      if (contractHash) {\n        var _contractHash$Contrac;\n        resolvedContractHash = ((_contractHash$Contrac = contractHash.ContractPackage) === null || _contractHash$Contrac === void 0 ? void 0 : _contractHash$Contrac.versions[0].contractHash) || '';\n      }\n      console.log(resolvedContractHash, 'contractHashcontractHash', (_resolvedContractHash = resolvedContractHash) === null || _resolvedContractHash === void 0 ? void 0 : _resolvedContractHash.toString(), values);\n      const args = RuntimeArgs.fromMap({\n        \"name\": CLValueBuilder.string(values.stakingPoolName),\n        \"address\": CLValueBuilder.string(values.tokenAddress),\n        \"staking_starts\": CLValueBuilder.u64(toTimestamp(values.stakingStarts)),\n        \"staking_ends\": CLValueBuilder.u64(toTimestamp(values.stakingEnds)),\n        \"withdraw_starts\": CLValueBuilder.u64(toTimestamp(values.withdrawStarts)),\n        \"withdraw_ends\": CLValueBuilder.u64(toTimestamp(values.withdrawEnds)),\n        \"staking_total\": CLValueBuilder.u256(toTimestamp(values.stakingCap)),\n        \"erc20_contract_hash\": CLValueBuilder.string((_resolvedContractHash2 = resolvedContractHash) === null || _resolvedContractHash2 === void 0 ? void 0 : _resolvedContractHash2.toString())\n      });\n      const res = await axios.get('http://localhost:3000/', {\n        responseType: 'arraybuffer'\n      });\n      if (res.status === 200) {\n        const wasm = new Uint8Array(res.data);\n        const session = DeployUtil.ExecutableDeployItem.newModuleBytes(wasm, args);\n        const payment = DeployUtil.standardPayment(200000000000);\n        const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n        const deployJson = DeployUtil.deployToJson(deploy);\n        Signer.sign(deployJson, publicKeyHex).then(async signedDeployJson => {\n          const signedDeploy = DeployUtil.deployFromJson(signedDeployJson);\n          console.log(signedDeploy);\n          if (signedDeploy.ok) {\n            const res = await casperClient.putDeploy(signedDeploy.val);\n            console.log(res, 'resres');\n          }\n        });\n      }\n    } catch (e) {\n      console.log(\"ERROR : \", e);\n      toast.error(\"An error occured please see console for details\");\n    } finally {\n      //setLoading(false)\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Toaster, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FContainer, {\n      width: 1200,\n      children: /*#__PURE__*/_jsxDEV(FCard, {\n        variant: \"primary\",\n        className: \"f-mt-2 f-mb-2\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          autoComplete: \"false\",\n          onSubmit: handleSubmit(onSubmit),\n          children: /*#__PURE__*/_jsxDEV(FGrid, {\n            className: \"f-mt-1\",\n            children: [/*#__PURE__*/_jsxDEV(FGridItem, {\n              size: [6, 6, 6],\n              children: /*#__PURE__*/_jsxDEV(FInputText, {\n                label: \"Staking Pool Name\",\n                name: \"stakingPoolName\",\n                type: \"text\",\n                className: \"w-100\",\n                placeholder: \"0\",\n                register: register,\n                validations: {\n                  required: {\n                    value: true,\n                    message: \"pool Name is required\"\n                  }\n                },\n                error: (_errors$stakingPoolNa = errors[\"stakingPoolName\"]) !== null && _errors$stakingPoolNa !== void 0 && _errors$stakingPoolNa.message ? (_errors$stakingPoolNa2 = errors[\"stakingPoolName\"]) === null || _errors$stakingPoolNa2 === void 0 ? void 0 : _errors$stakingPoolNa2.message : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FGridItem, {\n              size: [6, 6, 6],\n              children: /*#__PURE__*/_jsxDEV(FInputText, {\n                label: \"Token Address\",\n                name: \"tokenAddress\",\n                type: \"text\",\n                className: \"w-100\",\n                placeholder: \"0\",\n                register: register,\n                validations: {\n                  required: {\n                    value: true,\n                    message: \"Token Address is required\"\n                  }\n                },\n                error: (_errors$tokenAddress = errors[\"tokenAddress\"]) !== null && _errors$tokenAddress !== void 0 && _errors$tokenAddress.message ? (_errors$tokenAddress2 = errors[\"tokenAddress\"]) === null || _errors$tokenAddress2 === void 0 ? void 0 : _errors$tokenAddress2.message : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FGridItem, {\n              size: [6, 6, 6],\n              children: /*#__PURE__*/_jsxDEV(FInputText, {\n                label: \"stakingCap\",\n                name: \"stakingCap\",\n                type: \"text\",\n                placeholder: \"0\",\n                register: register,\n                validations: {\n                  required: {\n                    value: true,\n                    message: \"Staking Cap is required\"\n                  }\n                },\n                error: (_errors$stakingCap = errors[\"stakingCap\"]) !== null && _errors$stakingCap !== void 0 && _errors$stakingCap.message ? (_errors$stakingCap2 = errors[\"stakingCap\"]) === null || _errors$stakingCap2 === void 0 ? void 0 : _errors$stakingCap2.message : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FGridItem, {\n              size: [6, 6, 6],\n              children: /*#__PURE__*/_jsxDEV(FDatepicker, {\n                label: \"Staking Starts\",\n                name: \"stakingStarts\",\n                className: \"f-mt-1\",\n                placeholderText: \"MM-DD-YYYY\",\n                register: register,\n                showTimeSelect: true,\n                control: control,\n                validations: {\n                  required: {\n                    value: true,\n                    message: \"Staking Starts is required\"\n                  }\n                },\n                error: (_errors$stakingStarts = errors[\"stakingStarts\"]) !== null && _errors$stakingStarts !== void 0 && _errors$stakingStarts.message ? (_errors$stakingStarts2 = errors[\"stakingStarts\"]) === null || _errors$stakingStarts2 === void 0 ? void 0 : _errors$stakingStarts2.message : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FGridItem, {\n              size: [6, 6, 6],\n              children: /*#__PURE__*/_jsxDEV(FDatepicker, {\n                label: \"Staking Ends\",\n                name: \"stakingEnds\",\n                className: \"f-mt-1\",\n                placeholderText: \"MM-DD-YYYY\",\n                register: register,\n                showTimeSelect: true,\n                control: control,\n                validations: {\n                  required: {\n                    value: true,\n                    message: \"Staking Ends is required\"\n                  }\n                },\n                error: (_errors$stakingEnds = errors[\"stakingEnds\"]) !== null && _errors$stakingEnds !== void 0 && _errors$stakingEnds.message ? (_errors$stakingEnds2 = errors[\"stakingEnds\"]) === null || _errors$stakingEnds2 === void 0 ? void 0 : _errors$stakingEnds2.message : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FGridItem, {\n              size: [6, 6, 6],\n              children: /*#__PURE__*/_jsxDEV(FDatepicker, {\n                label: \"Withdraw Starts\",\n                name: \"withdrawStarts\",\n                className: \"f-mt-1\",\n                placeholderText: \"MM-DD-YYYY\",\n                register: register,\n                showTimeSelect: true,\n                control: control,\n                validations: {\n                  required: {\n                    value: true,\n                    message: \"Withdraw Starts is required\"\n                  }\n                },\n                error: (_errors$withdrawStart = errors[\"withdrawStarts\"]) !== null && _errors$withdrawStart !== void 0 && _errors$withdrawStart.message ? (_errors$withdrawStart2 = errors[\"withdrawStarts\"]) === null || _errors$withdrawStart2 === void 0 ? void 0 : _errors$withdrawStart2.message : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FGridItem, {\n              size: [6, 6, 6],\n              children: /*#__PURE__*/_jsxDEV(FDatepicker, {\n                label: \"Withdraw Ends\",\n                name: \"withdrawEnds\",\n                className: \"f-mt-1\",\n                placeholderText: \"MM-DD-YYYY\",\n                register: register,\n                showTimeSelect: true,\n                control: control,\n                validations: {\n                  required: {\n                    value: true,\n                    message: \"Withdraw Ends is required\"\n                  }\n                },\n                error: (_errors$withdrawEnds = errors[\"withdrawEnds\"]) !== null && _errors$withdrawEnds !== void 0 && _errors$withdrawEnds.message ? (_errors$withdrawEnds2 = errors[\"withdrawEnds\"]) === null || _errors$withdrawEnds2 === void 0 ? void 0 : _errors$withdrawEnds2.message : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FGridItem, {\n              alignX: \"end\",\n              children: /*#__PURE__*/_jsxDEV(FButton, {\n                type: \"submit\",\n                disabled: !connection.connectedAccounts.length,\n                title: !!connection.connectedAccounts.length ? \"Create Staking\" : 'Connect wallet to create',\n                className: \"f-mt-1 f-mb-2\"\n                // postfix={isSubmitting && <ClipLoader color=\"#fff\" size={20} />}\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(InputForm, \"ARegFR5oD1e2u7Y8Y2dQqzuk+Co=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useForm];\n});\n_c = InputForm;\nvar _c;\n$RefreshReg$(_c, \"InputForm\");","map":{"version":3,"names":["React","FGrid","FCard","FGridItem","FContainer","FInputText","FButton","FDatepicker","useForm","Toaster","useDispatch","useSelector","CLPublicKey","CasperClient","CLValueBuilder","DeployUtil","RuntimeArgs","Signer","CasperServiceByJsonRPC","toast","axios","RPC_API","casperClient","casperService","toTimestamp","strDate","datum","Date","parse","InputForm","dispatch","connection","state","casper","connect","config","selectedAccount","isWalletConnected","signedAddresses","console","log","initialValues","stakingPoolName","tokenAddress","stakingCap","stakingStarts","stakingEnds","withdrawStarts","withdrawEnds","register","control","handleSubmit","formState","errors","defaultValues","onSubmit","values","publicKeyHex","address","senderPublicKey","fromHex","deployParams","DeployParams","latestBlock","getLatestBlockInfo","contractHash","getBlockState","block","header","state_root_hash","resolvedContractHash","ContractPackage","versions","toString","args","fromMap","string","u64","u256","res","get","responseType","status","wasm","Uint8Array","data","session","ExecutableDeployItem","newModuleBytes","payment","standardPayment","deploy","makeDeploy","deployJson","deployToJson","sign","then","signedDeployJson","signedDeploy","deployFromJson","ok","putDeploy","val","e","error","required","value","message","connectedAccounts","length"],"sources":["/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/admin/inputForm.tsx"],"sourcesContent":["import React from \"react\";\nimport { FGrid, FCard, FGridItem, FContainer, FInputText, FButton, FDatepicker } from \"ferrum-design-system\";\nimport moment from \"moment\";\nimport { useForm } from \"react-hook-form\";\nimport { Toaster } from \"react-hot-toast\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CLPublicKey, CasperClient, CLValueBuilder, decodeBase16, DeployUtil, RuntimeArgs, Signer, CLValue, CLValueBytesParsers, CasperServiceByJsonRPC } from \"casper-js-sdk\";\n// import * as stakingActions from \"../redux/reducers/staking/stakingAction\";\nimport toast from \"react-hot-toast\";\nimport * as fs from 'fs';\nimport path from 'path';\nimport axios from \"axios\";\n\nconst RPC_API = \"http://44.208.234.65:7777/rpc\";\nconst casperClient = new CasperClient(RPC_API);\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\n\nfunction toTimestamp(strDate: string){\n  var datum = Date.parse(strDate);\n  return datum/1000;\n}\n\nexport const InputForm = () => {\n  const dispatch: any = useDispatch();\n  const connection = useSelector((state: any) => state.casper.connect)\n  const { connect: { config, selectedAccount, isWalletConnected, signedAddresses } } = useSelector((state: any) => state.casper);\n\n  console.log(connection, 'connectionconnection')\n  // const { actionLoading } = useSelector((state: any) => state.staking);\n\n  const initialValues = {\n    stakingPoolName: \"\",\n    tokenAddress: \"\",\n    stakingCap: \"\",\n    stakingStarts: \"\",\n    stakingEnds: \"\",\n    withdrawStarts: \"\",\n    withdrawEnds: \"\",\n  };\n\n  const {\n    // reset,\n    register,\n    control,\n    handleSubmit,\n    formState: {\n      errors,\n      //  isSubmitting\n    },\n    // watch,\n  } = useForm({ defaultValues: initialValues });\n\n  const onSubmit = async (values: any) => {\n\n    try {\n      // console.log(selectedAccount?.address, Number(amount));\n      const publicKeyHex = selectedAccount?.address;\n      const senderPublicKey = CLPublicKey.fromHex(publicKeyHex);\n\n      const deployParams = new DeployUtil.DeployParams(\n        senderPublicKey,\n        'casper-test'\n      );\n\n      const latestBlock = await casperService.getLatestBlockInfo();\n\n      const contractHash = await casperService.getBlockState(\n        //@ts-ignore\n        latestBlock?.block?.header?.state_root_hash,\n        `hash-782fe4b0bb944e6b1fd2c5a1456a78f0e2193d47dee9b1af5711d6b6e6aaca60`,\n        []\n     )\n\n     let resolvedContractHash = '';\n\n     if (contractHash) {\n      resolvedContractHash = contractHash.ContractPackage?.versions[0].contractHash || ''\n     }\n\n     console.log(resolvedContractHash, 'contractHashcontractHash', resolvedContractHash?.toString(), values);\n\n      const args = RuntimeArgs.fromMap({\n        \"name\": CLValueBuilder.string(values.stakingPoolName),\n        \"address\": CLValueBuilder.string(values.tokenAddress),\n        \"staking_starts\": CLValueBuilder.u64(toTimestamp(values.stakingStarts)),\n        \"staking_ends\": CLValueBuilder.u64(toTimestamp(values.stakingEnds)),\n        \"withdraw_starts\": CLValueBuilder.u64(toTimestamp(values.withdrawStarts)),\n        \"withdraw_ends\": CLValueBuilder.u64(toTimestamp(values.withdrawEnds)),\n        \"staking_total\": CLValueBuilder.u256(toTimestamp(values.stakingCap)),\n        \"erc20_contract_hash\": CLValueBuilder.string(resolvedContractHash?.toString())\n      });\n\n      const res = await axios.get('http://localhost:3000/',\n        {\n          responseType: 'arraybuffer'\n        }\n      ) \n\n      if (res.status === 200) {\n\n        const wasm = new Uint8Array(res.data);\n\n        const session = DeployUtil.ExecutableDeployItem.newModuleBytes(\n          wasm,\n          args\n        );\n\n        const payment = DeployUtil.standardPayment(200000000000);\n\n        const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n\n        const deployJson: any = DeployUtil.deployToJson(deploy);\n      \n        Signer.sign(deployJson, publicKeyHex).then(async (signedDeployJson) => {\n          const signedDeploy = DeployUtil.deployFromJson(signedDeployJson);\n          console.log(signedDeploy)\n          if (signedDeploy.ok) {\n            const res = await casperClient.putDeploy(signedDeploy.val);\n            console.log(res, 'resres');\n          }\n        })\n      }\n  \n    } catch (e) {\n      console.log(\"ERROR : \", e);\n      toast.error(\"An error occured please see console for details\");\n    } finally {\n      //setLoading(false)\n    }\n  };\n\n  return (\n    <>\n      <Toaster />\n      <FContainer width={1200}>\n        <FCard variant={\"primary\"} className=\"f-mt-2 f-mb-2\">\n          <form autoComplete=\"false\" onSubmit={handleSubmit(onSubmit)}>\n            <FGrid className={\"f-mt-1\"}>\n              <FGridItem size={[6, 6, 6]}>\n                <FInputText\n                  label=\"Staking Pool Name\"\n                  name=\"stakingPoolName\"\n                  type=\"text\"\n                  className={\"w-100\"}\n                  placeholder=\"0\"\n                  register={register}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"pool Name is required\",\n                    },\n                  }}\n                  error={errors[\"stakingPoolName\"]?.message ? errors[\"stakingPoolName\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem size={[6, 6, 6]}>\n                <FInputText\n                  label=\"Token Address\"\n                  name=\"tokenAddress\"\n                  type=\"text\"\n                  className={\"w-100\"}\n                  placeholder=\"0\"\n                  register={register}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"Token Address is required\",\n                    },\n                  }}\n                  error={errors[\"tokenAddress\"]?.message ? errors[\"tokenAddress\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem size={[6, 6, 6]}>\n                <FInputText\n                  label=\"stakingCap\"\n                  name=\"stakingCap\"\n                  type=\"text\"\n                  placeholder=\"0\"\n                  register={register}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"Staking Cap is required\",\n                    },\n                  }}\n                  error={errors[\"stakingCap\"]?.message ? errors[\"stakingCap\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem size={[6, 6, 6]}>\n                <FDatepicker\n                  label=\"Staking Starts\"\n                  name=\"stakingStarts\"\n                  className={\"f-mt-1\"}\n                  placeholderText=\"MM-DD-YYYY\"\n                  register={register}\n                  showTimeSelect={true}\n                  control={control}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"Staking Starts is required\",\n                    },\n                  }}\n                  error={errors[\"stakingStarts\"]?.message ? errors[\"stakingStarts\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem size={[6, 6, 6]}>\n                <FDatepicker\n                  label=\"Staking Ends\"\n                  name=\"stakingEnds\"\n                  className={\"f-mt-1\"}\n                  placeholderText=\"MM-DD-YYYY\"\n                  register={register}\n                  showTimeSelect={true}\n                  control={control}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"Staking Ends is required\",\n                    },\n                  }}\n                  error={errors[\"stakingEnds\"]?.message ? errors[\"stakingEnds\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem size={[6, 6, 6]}>\n                <FDatepicker\n                  label=\"Withdraw Starts\"\n                  name=\"withdrawStarts\"\n                  className={\"f-mt-1\"}\n                  placeholderText=\"MM-DD-YYYY\"\n                  register={register}\n                  showTimeSelect={true}\n                  control={control}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"Withdraw Starts is required\",\n                    },\n                  }}\n                  error={errors[\"withdrawStarts\"]?.message ? errors[\"withdrawStarts\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem size={[6, 6, 6]}>\n                <FDatepicker\n                  label=\"Withdraw Ends\"\n                  name=\"withdrawEnds\"\n                  className={\"f-mt-1\"}\n                  placeholderText=\"MM-DD-YYYY\"\n                  register={register}\n                  showTimeSelect={true}\n                  control={control}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"Withdraw Ends is required\",\n                    },\n                  }}\n                  error={errors[\"withdrawEnds\"]?.message ? errors[\"withdrawEnds\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem alignX={\"end\"}>\n                <FButton\n                  type=\"submit\"\n                  disabled={!connection.connectedAccounts.length}\n                  title={!!connection.connectedAccounts.length ? \"Create Staking\" : 'Connect wallet to create' }\n                  className={\"f-mt-1 f-mb-2\"}\n                  // postfix={isSubmitting && <ClipLoader color=\"#fff\" size={20} />}\n                ></FButton>\n              </FGridItem>\n            </FGrid>\n          </form>\n        </FCard>\n      </FContainer>\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}