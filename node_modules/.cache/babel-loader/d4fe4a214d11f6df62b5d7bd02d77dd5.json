{"ast":null,"code":"import { casperSlice } from \"./casperSlice\";\nimport moment from \"moment\";\nconst {\n  actions\n} = casperSlice;\nexport const connectWallet = connectedAccounts => async dispatch => {\n  dispatch(actions.connectWallet({\n    connectedAccounts: connectedAccounts\n  }));\n};\nexport const resetWallet = connectedAccounts => async dispatch => {\n  dispatch(actions.resetWallet());\n};\nexport const staked = selectedAddress => async dispatch => {\n  dispatch(actions.staked({\n    selectedAddress\n  }));\n};\nexport const signed = signedAddress => async dispatch => {\n  dispatch(actions.singed(signedAddress));\n};\nexport const selectAccount = selectedAccount => async dispatch => {\n  dispatch(actions.selectAccount({\n    selectedAccount\n  }));\n};\nexport const shouldStake = () => async dispatch => {\n  dispatch(actions.setShouldStake());\n};\nexport const stakeWithdrawSucess = () => async dispatch => {\n  dispatch(actions.stakeWithdrawSucess());\n};\nexport const configLoaded = config => async dispatch => {\n  console.log(config, 'configgggg');\n  let data = {};\n  if (config.length) {\n    config.forEach(e => {\n      console.log(e[1]);\n      data[e[0]] = e[1].parsed;\n    });\n  }\n  console.log(data);\n  data = {\n    ...data,\n    staking_ends: moment(data.staking_ends).local().format(\"YYYY-MM-DD HH:mm:ss\"),\n    staking_starts: moment(data.staking_starts).local().format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdraw_starts: moment(data.withdraw_starts).local().format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdraw_ends: moment(data.withdraw_ends).local().format(\"YYYY-MM-DD HH:mm:ss\")\n  };\n  console.log(data, 'datadata');\n  dispatch(actions.configLoaded({\n    config: data\n  }));\n};","map":{"version":3,"names":["casperSlice","moment","actions","connectWallet","connectedAccounts","dispatch","resetWallet","staked","selectedAddress","signed","signedAddress","singed","selectAccount","selectedAccount","shouldStake","setShouldStake","stakeWithdrawSucess","configLoaded","config","console","log","data","length","forEach","e","parsed","staking_ends","local","format","staking_starts","withdraw_starts","withdraw_ends"],"sources":["/Users/kabiribraheem/Documents/staking-casper-frontend/src/redux/casper/casperActions.js"],"sourcesContent":["import { casperSlice } from \"./casperSlice\";\nimport moment from \"moment\";\nconst { actions } = casperSlice;\n\nexport const connectWallet = (connectedAccounts) => async (dispatch) => {\n  dispatch(\n    actions.connectWallet({\n      connectedAccounts: connectedAccounts,\n    })\n  );\n};\n\nexport const resetWallet = (connectedAccounts) => async (dispatch) => {\n  dispatch(actions.resetWallet());\n};\n\nexport const staked = (selectedAddress) => async (dispatch) => {\n  dispatch(actions.staked({ selectedAddress }));\n};\n\nexport const signed = (signedAddress) => async (dispatch) => {\n  dispatch(actions.singed(signedAddress));\n};\n\nexport const selectAccount = (selectedAccount) => async (dispatch) => {\n  dispatch(actions.selectAccount({ selectedAccount }));\n};\n\nexport const shouldStake = () => async (dispatch) => {\n  dispatch(actions.setShouldStake());\n};\n\nexport const stakeWithdrawSucess = () => async (dispatch) => {\n  dispatch(actions.stakeWithdrawSucess());\n};\n\nexport const configLoaded = (config) => async (dispatch) => {\n  console.log(config, 'configgggg');\n  let data = {}\n  if (config.length) {\n    config.forEach(\n      e => {\n        console.log(e[1])\n        data[e[0]] = e[1].parsed\n      }\n    )\n  }\n  console.log(data);\n  data = {\n    ...data,\n    staking_ends: moment(data.staking_ends)\n      .local()\n      .format(\"YYYY-MM-DD HH:mm:ss\"),\n    staking_starts: moment(data.staking_starts)\n      .local()\n      .format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdraw_starts: moment(data.withdraw_starts)\n      .local()\n      .format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdraw_ends: moment(data.withdraw_ends)\n      .local()\n      .format(\"YYYY-MM-DD HH:mm:ss\"),\n  };\n\n  console.log(data, 'datadata')\n  dispatch(actions.configLoaded({ config: data }));\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,eAAe;AAC3C,OAAOC,MAAM,MAAM,QAAQ;AAC3B,MAAM;EAAEC;AAAQ,CAAC,GAAGF,WAAW;AAE/B,OAAO,MAAMG,aAAa,GAAIC,iBAAiB,IAAK,MAAOC,QAAQ,IAAK;EACtEA,QAAQ,CACNH,OAAO,CAACC,aAAa,CAAC;IACpBC,iBAAiB,EAAEA;EACrB,CAAC,CAAC,CACH;AACH,CAAC;AAED,OAAO,MAAME,WAAW,GAAIF,iBAAiB,IAAK,MAAOC,QAAQ,IAAK;EACpEA,QAAQ,CAACH,OAAO,CAACI,WAAW,EAAE,CAAC;AACjC,CAAC;AAED,OAAO,MAAMC,MAAM,GAAIC,eAAe,IAAK,MAAOH,QAAQ,IAAK;EAC7DA,QAAQ,CAACH,OAAO,CAACK,MAAM,CAAC;IAAEC;EAAgB,CAAC,CAAC,CAAC;AAC/C,CAAC;AAED,OAAO,MAAMC,MAAM,GAAIC,aAAa,IAAK,MAAOL,QAAQ,IAAK;EAC3DA,QAAQ,CAACH,OAAO,CAACS,MAAM,CAACD,aAAa,CAAC,CAAC;AACzC,CAAC;AAED,OAAO,MAAME,aAAa,GAAIC,eAAe,IAAK,MAAOR,QAAQ,IAAK;EACpEA,QAAQ,CAACH,OAAO,CAACU,aAAa,CAAC;IAAEC;EAAgB,CAAC,CAAC,CAAC;AACtD,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAOT,QAAQ,IAAK;EACnDA,QAAQ,CAACH,OAAO,CAACa,cAAc,EAAE,CAAC;AACpC,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAG,MAAM,MAAOX,QAAQ,IAAK;EAC3DA,QAAQ,CAACH,OAAO,CAACc,mBAAmB,EAAE,CAAC;AACzC,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIC,MAAM,IAAK,MAAOb,QAAQ,IAAK;EAC1Dc,OAAO,CAACC,GAAG,CAACF,MAAM,EAAE,YAAY,CAAC;EACjC,IAAIG,IAAI,GAAG,CAAC,CAAC;EACb,IAAIH,MAAM,CAACI,MAAM,EAAE;IACjBJ,MAAM,CAACK,OAAO,CACZC,CAAC,IAAI;MACHL,OAAO,CAACC,GAAG,CAACI,CAAC,CAAC,CAAC,CAAC,CAAC;MACjBH,IAAI,CAACG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,CAACC,MAAM;IAC1B,CAAC,CACF;EACH;EACAN,OAAO,CAACC,GAAG,CAACC,IAAI,CAAC;EACjBA,IAAI,GAAG;IACL,GAAGA,IAAI;IACPK,YAAY,EAAEzB,MAAM,CAACoB,IAAI,CAACK,YAAY,CAAC,CACpCC,KAAK,EAAE,CACPC,MAAM,CAAC,qBAAqB,CAAC;IAChCC,cAAc,EAAE5B,MAAM,CAACoB,IAAI,CAACQ,cAAc,CAAC,CACxCF,KAAK,EAAE,CACPC,MAAM,CAAC,qBAAqB,CAAC;IAChCE,eAAe,EAAE7B,MAAM,CAACoB,IAAI,CAACS,eAAe,CAAC,CAC1CH,KAAK,EAAE,CACPC,MAAM,CAAC,qBAAqB,CAAC;IAChCG,aAAa,EAAE9B,MAAM,CAACoB,IAAI,CAACU,aAAa,CAAC,CACtCJ,KAAK,EAAE,CACPC,MAAM,CAAC,qBAAqB;EACjC,CAAC;EAEDT,OAAO,CAACC,GAAG,CAACC,IAAI,EAAE,UAAU,CAAC;EAC7BhB,QAAQ,CAACH,OAAO,CAACe,YAAY,CAAC;IAAEC,MAAM,EAAEG;EAAK,CAAC,CAAC,CAAC;AAClD,CAAC"},"metadata":{},"sourceType":"module"}