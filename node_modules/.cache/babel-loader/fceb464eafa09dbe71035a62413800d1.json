{"ast":null,"code":"import { casperSlice } from \"./casperSlice\";\nimport moment from \"moment\";\nconst {\n  actions\n} = casperSlice;\nexport const connectWallet = connectedAccounts => async dispatch => {\n  dispatch(actions.connectWallet({\n    connectedAccounts: connectedAccounts\n  }));\n};\nexport const resetWallet = connectedAccounts => async dispatch => {\n  dispatch(actions.resetWallet());\n};\nexport const staked = selectedAddress => async dispatch => {\n  dispatch(actions.staked({\n    selectedAddress\n  }));\n};\nexport const signed = signedAddress => async dispatch => {\n  dispatch(actions.singed(signedAddress));\n};\nexport const selectAccount = selectedAccount => async dispatch => {\n  dispatch(actions.selectAccount({\n    selectedAccount\n  }));\n};\nexport const shouldStake = () => async dispatch => {\n  dispatch(actions.setShouldStake());\n};\nexport const stakeWithdrawSucess = () => async dispatch => {\n  dispatch(actions.stakeWithdrawSucess());\n};\nexport const configLoaded = config => async dispatch => {\n  console.log(config);\n  // var stillUtc = moment\n  //   .utc(moment.utc(values.stakingStarts).format(\"YYYY-MM-DD HH:mm:ss Z\"))\n  //   .toDate();\n  // console.log(moment(stillUtc).local().format(\"YYYY-MM-DD HH:mm:ss\"));\n  const stakingStartUtc = moment.utc(moment.utc(config.stakingStarts).format(\"YYYY-MM-DD HH:mm:ss Z\")).toDate();\n  // console.log(moment(stakingStartUtc).local().format(\"YYYY-MM-DD HH:mm:ss\")); // UTC to Local\n  const stakingEndsUtc = moment.utc(moment.utc(config.stakingEnds).format(\"YYYY-MM-DD HH:mm:ss Z\")).toDate();\n  // console.log(moment(stakingEndsUtc).local().format(\"YYYY-MM-DD HH:mm:ss\")); // UTC to Local\n  const withdrawStartUtc = moment.utc(moment.utc(config.withdrawStarts).format(\"YYYY-MM-DD HH:mm:ss Z\")).toDate();\n  // console.log(moment(withdrawStartUtc).local().format(\"YYYY-MM-DD HH:mm:ss\")); // UTC to Local\n  const withdrawEndsUtc = moment.utc(moment.utc(config.withdrawEnds).format(\"YYYY-MM-DD HH:mm:ss Z\")).toDate();\n  // console.log(moment(withdrawEndsUtc).local().format(\"YYYY-MM-DD HH:mm:ss\")); // UTC to Local\n  const data = {\n    ...config,\n    stakingStarts: moment(stakingStartUtc).local().format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingEnds: moment(stakingEndsUtc).local().format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdrawStart: moment(withdrawStartUtc).local().format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdrawEnds: moment(withdrawEndsUtc).local().format(\"YYYY-MM-DD HH:mm:ss\")\n  };\n  dispatch(actions.configLoaded({\n    config: data\n  }));\n};","map":{"version":3,"names":["casperSlice","moment","actions","connectWallet","connectedAccounts","dispatch","resetWallet","staked","selectedAddress","signed","signedAddress","singed","selectAccount","selectedAccount","shouldStake","setShouldStake","stakeWithdrawSucess","configLoaded","config","console","log","stakingStartUtc","utc","stakingStarts","format","toDate","stakingEndsUtc","stakingEnds","withdrawStartUtc","withdrawStarts","withdrawEndsUtc","withdrawEnds","data","local","withdrawStart"],"sources":["/Users/kabiribraheem/Documents/staking-casper-frontend/src/redux/casper/casperActions.js"],"sourcesContent":["import { casperSlice } from \"./casperSlice\";\nimport moment from \"moment\";\nconst { actions } = casperSlice;\n\nexport const connectWallet = (connectedAccounts) => async (dispatch) => {\n  dispatch(\n    actions.connectWallet({\n      connectedAccounts: connectedAccounts,\n    })\n  );\n};\n\nexport const resetWallet = (connectedAccounts) => async (dispatch) => {\n  dispatch(actions.resetWallet());\n};\n\nexport const staked = (selectedAddress) => async (dispatch) => {\n  dispatch(actions.staked({ selectedAddress }));\n};\n\nexport const signed = (signedAddress) => async (dispatch) => {\n  dispatch(actions.singed(signedAddress));\n};\n\nexport const selectAccount = (selectedAccount) => async (dispatch) => {\n  dispatch(actions.selectAccount({ selectedAccount }));\n};\n\nexport const shouldStake = () => async (dispatch) => {\n  dispatch(actions.setShouldStake());\n};\n\nexport const stakeWithdrawSucess = () => async (dispatch) => {\n  dispatch(actions.stakeWithdrawSucess());\n};\n\nexport const configLoaded = (config) => async (dispatch) => {\n  console.log(config);\n  // var stillUtc = moment\n  //   .utc(moment.utc(values.stakingStarts).format(\"YYYY-MM-DD HH:mm:ss Z\"))\n  //   .toDate();\n  // console.log(moment(stillUtc).local().format(\"YYYY-MM-DD HH:mm:ss\"));\n  const stakingStartUtc = moment\n    .utc(moment.utc(config.stakingStarts).format(\"YYYY-MM-DD HH:mm:ss Z\"))\n    .toDate();\n  // console.log(moment(stakingStartUtc).local().format(\"YYYY-MM-DD HH:mm:ss\")); // UTC to Local\n  const stakingEndsUtc = moment\n    .utc(moment.utc(config.stakingEnds).format(\"YYYY-MM-DD HH:mm:ss Z\"))\n    .toDate();\n  // console.log(moment(stakingEndsUtc).local().format(\"YYYY-MM-DD HH:mm:ss\")); // UTC to Local\n  const withdrawStartUtc = moment\n    .utc(moment.utc(config.withdrawStarts).format(\"YYYY-MM-DD HH:mm:ss Z\"))\n    .toDate();\n  // console.log(moment(withdrawStartUtc).local().format(\"YYYY-MM-DD HH:mm:ss\")); // UTC to Local\n  const withdrawEndsUtc = moment\n    .utc(moment.utc(config.withdrawEnds).format(\"YYYY-MM-DD HH:mm:ss Z\"))\n    .toDate();\n  // console.log(moment(withdrawEndsUtc).local().format(\"YYYY-MM-DD HH:mm:ss\")); // UTC to Local\n  const data = {\n    ...config,\n    stakingStarts: moment(stakingStartUtc)\n      .local()\n      .format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingEnds: moment(stakingEndsUtc).local().format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdrawStart: moment(withdrawStartUtc)\n      .local()\n      .format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdrawEnds: moment(withdrawEndsUtc).local().format(\"YYYY-MM-DD HH:mm:ss\"),\n  };\n  dispatch(actions.configLoaded({ config: data }));\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}