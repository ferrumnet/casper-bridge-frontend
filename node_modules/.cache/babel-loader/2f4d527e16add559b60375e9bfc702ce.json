{"ast":null,"code":"export class Web3Helper {\n  constructor(web3) {\n    this.web3Client = void 0;\n    this.web3Client = web3;\n  }\n  async sendTransactionAsync(dispatch, transactions, payload) {\n    const txIds = [];\n    for (const tx of transactions) {\n      const txId = await new Promise((resolve, reject) => {\n        var _tx$gas;\n        return this.web3Client.eth.sendTransaction({\n          from: tx.from,\n          to: tx.contract,\n          value: tx.value || \"0x\",\n          data: tx.data,\n          gas: (_tx$gas = tx.gas) === null || _tx$gas === void 0 ? void 0 : _tx$gas.gasLimit\n          // gasPrice: tx.gas?.gasPrice,\n          // chainId: this.connection.netId()\n        })\n        // .on(\"confirmation\", function (part1, part2) {\n        //   console.log(\"confirmation\", part1, part2);\n        // })\n        .on(\"transactionHash\", transactionHash => {\n          //dispatch(transactionHash);\n        }).then(h => {\n          resolve(h);\n        }).catch(reject);\n      });\n      // console.log(txId);\n      txIds.push(txId.transactionHash);\n    }\n    // console.log(txIds, \"txIdstxIds\");\n    return txIds.join(\",\") + \"|\" + JSON.stringify(payload || \"\");\n  }\n}","map":{"version":3,"names":["Web3Helper","constructor","web3","web3Client","sendTransactionAsync","dispatch","transactions","payload","txIds","tx","txId","Promise","resolve","reject","eth","sendTransaction","from","to","contract","value","data","gas","gasLimit","on","transactionHash","then","h","catch","push","join","JSON","stringify"],"sources":["/Users/kabiribraheem/Documents/casper-bridge-frontend/src/utils/web3Helper.ts"],"sourcesContent":["import Web3 from \"web3\";\n\nexport class Web3Helper {\n  web3Client: Web3;\n\n  constructor(web3: Web3) {\n    this.web3Client = web3;\n  }\n\n  async sendTransactionAsync(\n    dispatch: any,\n    transactions: any[],\n    payload?: any\n  ): Promise<string> {\n    const txIds: string[] = [];\n    for (const tx of transactions) {\n      const txId = await new Promise<{ [k: string]: string }>(\n        (resolve, reject) =>\n          this.web3Client.eth\n            .sendTransaction({\n              from: tx.from,\n              to: tx.contract,\n              value: tx.value || \"0x\",\n              data: tx.data,\n              gas: tx.gas?.gasLimit,\n              // gasPrice: tx.gas?.gasPrice,\n              // chainId: this.connection.netId()\n            })\n            // .on(\"confirmation\", function (part1, part2) {\n            //   console.log(\"confirmation\", part1, part2);\n            // })\n            .on(\"transactionHash\", (transactionHash) => {\n              //dispatch(transactionHash);\n            })\n            .then((h: any) => {\n              resolve(h);\n            })\n            .catch(reject)\n      );\n      // console.log(txId);\n      txIds.push(txId.transactionHash);\n    }\n    // console.log(txIds, \"txIdstxIds\");\n    return txIds.join(\",\") + \"|\" + JSON.stringify(payload || \"\");\n  }\n\n}"],"mappings":"AAEA,OAAO,MAAMA,UAAU,CAAC;EAGtBC,WAAW,CAACC,IAAU,EAAE;IAAA,KAFxBC,UAAU;IAGR,IAAI,CAACA,UAAU,GAAGD,IAAI;EACxB;EAEA,MAAME,oBAAoB,CACxBC,QAAa,EACbC,YAAmB,EACnBC,OAAa,EACI;IACjB,MAAMC,KAAe,GAAG,EAAE;IAC1B,KAAK,MAAMC,EAAE,IAAIH,YAAY,EAAE;MAC7B,MAAMI,IAAI,GAAG,MAAM,IAAIC,OAAO,CAC5B,CAACC,OAAO,EAAEC,MAAM;QAAA;QAAA,OACd,IAAI,CAACV,UAAU,CAACW,GAAG,CAChBC,eAAe,CAAC;UACfC,IAAI,EAAEP,EAAE,CAACO,IAAI;UACbC,EAAE,EAAER,EAAE,CAACS,QAAQ;UACfC,KAAK,EAAEV,EAAE,CAACU,KAAK,IAAI,IAAI;UACvBC,IAAI,EAAEX,EAAE,CAACW,IAAI;UACbC,GAAG,aAAEZ,EAAE,CAACY,GAAG,4CAAN,QAAQC;UACb;UACA;QACF,CAAC;QACD;QACA;QACA;QAAA,CACCC,EAAE,CAAC,iBAAiB,EAAGC,eAAe,IAAK;UAC1C;QAAA,CACD,CAAC,CACDC,IAAI,CAAEC,CAAM,IAAK;UAChBd,OAAO,CAACc,CAAC,CAAC;QACZ,CAAC,CAAC,CACDC,KAAK,CAACd,MAAM,CAAC;MAAA,EACnB;MACD;MACAL,KAAK,CAACoB,IAAI,CAAClB,IAAI,CAACc,eAAe,CAAC;IAClC;IACA;IACA,OAAOhB,KAAK,CAACqB,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG,GAAGC,IAAI,CAACC,SAAS,CAACxB,OAAO,IAAI,EAAE,CAAC;EAC9D;AAEF"},"metadata":{},"sourceType":"module"}