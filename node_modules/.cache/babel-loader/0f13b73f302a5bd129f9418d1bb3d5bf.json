{"ast":null,"code":"// import { Network } from \"ferrum-plumbing\";\nexport var defaultWalletApplicationWrapper={groupInfo:{},supportedCurrencies:[],tokenList:[],supportedNetworks:[],currencyPairs:[],filteredAssets:[],userProfile:{},authToken:\"\",walletWrapperInitialized:false,fromInfo:undefined,toInfo:undefined,availableLiquidity:\"\",amount:0,fee:0,maxBalance:0,networkTransactions:[]};// export interface DEFAULT_CURRENCIES {\n//   currencies: Array<any>;\n// }\n// export const defaultCurrencies: DEFAULT_CURRENCIES = {\n//   currencies: [],\n// };\n// export interface DEFAULT_TOKENS {\n//   tokens: Array<any>;\n// }\n// export const defaultTokens: DEFAULT_TOKENS = {\n//   tokens: [],\n// };","map":{"version":3,"names":["defaultWalletApplicationWrapper","groupInfo","supportedCurrencies","tokenList","supportedNetworks","currencyPairs","filteredAssets","userProfile","authToken","walletWrapperInitialized","fromInfo","undefined","toInfo","availableLiquidity","amount","fee","maxBalance","networkTransactions"],"sources":["/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/walletApplicationWrapperInterfaces.ts"],"sourcesContent":["// import { Network } from \"ferrum-plumbing\";\n\nexport interface WALLET_APPLICATION_WRAPPER_STATE {\n  groupInfo: any;\n  supportedCurrencies: Array<any>;\n  tokenList: Array<any>;\n  supportedNetworks: Array<any>;\n  currencyPairs: Array<any>;\n  filteredAssets: Array<any>;\n  userProfile: any;\n  authToken: string;\n  walletWrapperInitialized: boolean;\n  fromInfo: any;\n  toInfo: any;\n  availableLiquidity: string;\n  amount: number;\n  fee: number;\n  maxBalance: number;\n  networkTransactions: Array<any>;\n}\nexport const defaultWalletApplicationWrapper: WALLET_APPLICATION_WRAPPER_STATE =\n  {\n    groupInfo: {},\n    supportedCurrencies: [],\n    tokenList: [],\n    supportedNetworks: [],\n    currencyPairs: [],\n    filteredAssets: [],\n    userProfile: {},\n    authToken: \"\",\n    walletWrapperInitialized: false,\n    fromInfo: undefined,\n    toInfo: undefined,\n    availableLiquidity: \"\",\n    amount: 0,\n    fee: 0,\n    maxBalance: 0,\n    networkTransactions: [],\n  };\n\nexport interface AddressDetails {\n  // network: Network;\n  currency: string;\n  symbol: string;\n  address: string;\n  addressWithChecksum?: string;\n  humanReadableAddress: string;\n  addressType: string;\n  balance: string;\n  pendingForWithdrawal: string;\n  pendingForDeposit: string;\n}\n\nexport interface UserAccountGroup {\n  id: string;\n  addresses: AddressDetails[];\n}\n\nexport interface AppUserProfile {\n  userId: string;\n  displayName: string;\n  appId: string;\n  email?: string;\n  accountGroups: UserAccountGroup[];\n}\nexport type ChainEventStatus = \"\" | \"pending\" | \"failed\" | \"completed\";\n\nexport interface ChainEventBase {\n  id: string;\n  userAddress: string;\n  // network: Network;\n  application: string;\n  status: ChainEventStatus;\n  callback?: any;\n  eventType: string;\n  transactionType: string;\n  createdAt: number;\n  lastUpdate: number;\n  reason?: string;\n  retry: number;\n}\n\nexport interface AllocationSignature extends MultiSignable {\n  actor: MultiSigActor;\n  salt: string;\n  expirySeconds: number;\n  from: string;\n  to: string;\n}\n\nexport interface UserContractAllocation {\n  signature?: AllocationSignature;\n  network: string;\n  contractAddress: string;\n  method: string;\n  userAddress: string;\n  currency: string;\n  allocation: string;\n  expirySeconds: number;\n}\n\nexport interface TokenDetails {\n  currency: string;\n  address: string;\n  chainId: number;\n  name: string;\n  symbol: string;\n  decimals: number;\n  logoURI: string;\n}\n\nexport interface StoredAllocationCsv {\n  network: string;\n  contract: string;\n  csv: string;\n}\n\nexport interface CurrencyValue {\n  currency: string;\n  value: string;\n}\n\nexport interface MultiSigSignature {\n  creationTime: number;\n  creator: string;\n  signature: string;\n}\n\nexport interface MultiSigActor {\n  groupId: number;\n  quorum: string;\n  address: string;\n  contractAddress: string;\n}\n\nexport interface MultiSignable {\n  signatures: MultiSigSignature[];\n}\n\nexport interface TransactionTrackableItem {\n  network: string;\n  transactionId: string;\n  timestamp: number;\n  status: \"pending\" | \"failed\" | \"timedout\" | \"sucess\";\n  message?: string;\n}\n\nexport interface TransactionTrackable {\n  status: \"\" | \"pending\" | \"failed\" | \"timedout\" | \"sucess\";\n  transactions: TransactionTrackableItem[];\n}\n\nexport interface UserStakeSummary {\n  name: string;\n  network: string;\n  currency: string;\n  rewardCurrencies: string[];\n  stakeContractAddress: string;\n  lastUpdate: number;\n  stake: string;\n  rewards: string[];\n}\n\n// export interface DEFAULT_CURRENCIES {\n//   currencies: Array<any>;\n// }\n// export const defaultCurrencies: DEFAULT_CURRENCIES = {\n//   currencies: [],\n// };\n\n// export interface DEFAULT_TOKENS {\n//   tokens: Array<any>;\n// }\n// export const defaultTokens: DEFAULT_TOKENS = {\n//   tokens: [],\n// };\n"],"mappings":"AAAA;AAoBA,MAAO,IAAMA,gCAAiE,CAC5E,CACEC,SAAS,CAAE,CAAC,CAAC,CACbC,mBAAmB,CAAE,EAAE,CACvBC,SAAS,CAAE,EAAE,CACbC,iBAAiB,CAAE,EAAE,CACrBC,aAAa,CAAE,EAAE,CACjBC,cAAc,CAAE,EAAE,CAClBC,WAAW,CAAE,CAAC,CAAC,CACfC,SAAS,CAAE,EAAE,CACbC,wBAAwB,CAAE,KAAK,CAC/BC,QAAQ,CAAEC,SAAS,CACnBC,MAAM,CAAED,SAAS,CACjBE,kBAAkB,CAAE,EAAE,CACtBC,MAAM,CAAE,CAAC,CACTC,GAAG,CAAE,CAAC,CACNC,UAAU,CAAE,CAAC,CACbC,mBAAmB,CAAE,EACvB,CAAC,CA6HH;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}