{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n// import { ME_TAG } from \"../../../../utils/const.utils\";\nimport { defaultWalletAuthenticationState } from \"./WalletAuthenticationInterfaces\";\nconst initialWalletAUthenticationState = {\n  ...defaultWalletAuthenticationState\n};\nexport const walletConnectorSlice = createSlice({\n  name: \"walletAuthenticator\",\n  initialState: initialWalletAUthenticationState,\n  reducers: {\n    saveSignature: (state, action) => {\n      state.signature = action.payload.walletAuthenticator.signature;\n    },\n    saveNonce: (state, action) => {\n      state.nonce = action.payload.walletAuthenticator.nonce;\n    },\n    saveApplicationUserToken: (state, action) => {\n      state.applicationUserToken = action.payload.walletAuthenticator.userToken;\n    },\n    isAllowedOnGateway: (state, action) => {\n      state.isAllowedonGateway = action.payload.walletAuthenticator.isAllowedOnGateway;\n    },\n    allowedNetworksonGateway: (state, action) => {\n      state.allowedNetworksonGateway = action.payload.walletAuthenticator.allowedNetworksonGateway;\n    },\n    getSignatureFromMetamask: (state, action) => {\n      state.getSignatureFromMetamask = action.payload.walletAuthenticator.getSignatureFromMetamask;\n    },\n    error: (state, action) => {\n      state.error = action.payload.walletAuthenticator.error;\n    },\n    saveME: (state, action) => {\n      state.meV2 = action.payload.walletAuthenticator.meV2;\n    },\n    saveToken: (state, action) => {\n      state.tokenV2 = action.payload.walletAuthenticator.tokenV2;\n    },\n    saveNetworkInformation: (state, action) => {\n      state.currentNetworkInformation = action.payload.networkInformation.networkResponse;\n    },\n    saveCommunityMemberProfileToken: (state, action) => {\n      state.profileToken = action.payload.walletAuthenticator.profileToken;\n    },\n    resetWalletAuthentication: (state, action) => {\n      state.nonce = \"\";\n      state.signature = \"\";\n      state.applicationUserToken = action.payload.walletAuthenticator.userToken;\n      state.isAllowedonGateway = undefined;\n      state.allowedNetworksonGateway = [];\n      state.error = false;\n      state.getSignatureFromMetamask = false;\n      state.profileToken = \"\";\n    },\n    removeSession: (state, action) => {\n      state.tokenV2 = \"\";\n      state.meV2 = {};\n    }\n  }\n});","map":{"version":3,"names":["createSlice","defaultWalletAuthenticationState","initialWalletAUthenticationState","walletConnectorSlice","name","initialState","reducers","saveSignature","state","action","signature","payload","walletAuthenticator","saveNonce","nonce","saveApplicationUserToken","applicationUserToken","userToken","isAllowedOnGateway","isAllowedonGateway","allowedNetworksonGateway","getSignatureFromMetamask","error","saveME","meV2","saveToken","tokenV2","saveNetworkInformation","currentNetworkInformation","networkInformation","networkResponse","saveCommunityMemberProfileToken","profileToken","resetWalletAuthentication","undefined","removeSession"],"sources":["/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/walletAuthenticationSlice.ts"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n// import { ME_TAG } from \"../../../../utils/const.utils\";\nimport { WALLET_AUTHENTICATION_STATE, defaultWalletAuthenticationState } from \"./WalletAuthenticationInterfaces\";\n\nconst initialWalletAUthenticationState: WALLET_AUTHENTICATION_STATE = {\n    ...defaultWalletAuthenticationState,\n};\n\nexport const walletConnectorSlice = createSlice({\n    name: \"walletAuthenticator\",\n    initialState: initialWalletAUthenticationState,\n    reducers: { \n      saveSignature: (state, action) => { \n        state.signature = action.payload.walletAuthenticator.signature;\n      },\n      saveNonce: (state, action) => { \n        state.nonce = action.payload.walletAuthenticator.nonce;\n      },\n      saveApplicationUserToken: (state, action) => { \n        state.applicationUserToken = action.payload.walletAuthenticator.userToken;\n      },\n      isAllowedOnGateway: (state, action) => { \n        state.isAllowedonGateway = action.payload.walletAuthenticator.isAllowedOnGateway;\n      },\n      allowedNetworksonGateway: (state, action) => { \n        state.allowedNetworksonGateway = action.payload.walletAuthenticator.allowedNetworksonGateway;\n      },\n      getSignatureFromMetamask: (state, action) => { \n        state.getSignatureFromMetamask = action.payload.walletAuthenticator.getSignatureFromMetamask;\n      },\n      error: (state, action) => { \n        state.error = action.payload.walletAuthenticator.error;\n      },\n      saveME: (state, action) => { \n        state.meV2 = action.payload.walletAuthenticator.meV2;\n      },\n      saveToken: (state, action) => { \n        state.tokenV2 = action.payload.walletAuthenticator.tokenV2;\n      },\n      saveNetworkInformation: (state, action) => {  \n        state.currentNetworkInformation = action.payload.networkInformation.networkResponse;\n      },\n      saveCommunityMemberProfileToken: (state, action) => { \n        state.profileToken = action.payload.walletAuthenticator.profileToken;\n      },\n      resetWalletAuthentication: (state, action) => {\n        state.nonce = \"\";\n        state.signature = \"\";\n        state.applicationUserToken = action.payload.walletAuthenticator.userToken;\n        state.isAllowedonGateway = undefined;\n        state.allowedNetworksonGateway = [];\n        state.error = false;\n        state.getSignatureFromMetamask = false;\n        state.profileToken = \"\";\n      },\n      removeSession: (state, action) => {\n        state.tokenV2 = \"\";\n        state.meV2 = {};\n      }\n    }\n})\n  \n"],"mappings":"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"},"metadata":{},"sourceType":"module"}