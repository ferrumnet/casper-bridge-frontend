{"ast":null,"code":"import axios from \"axios\";\nexport class crucibleApi {\n  constructor() {\n    this.jwtToken = \"\";\n    this.address = \"\";\n  }\n  async signInToServer(userAddress) {\n    const res = await axios.post('http://localhost:8080', {\n      command: \"signInUsingAddress\",\n      data: {\n        userAddress\n      },\n      params: []\n    });\n    const {\n      unsecureSession\n    } = res.data;\n    this.address = userAddress;\n    this.jwtToken = unsecureSession;\n    return unsecureSession;\n  }\n  gatewayApi(data) {\n    return axios.post('http://localhost:8080', data, {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Content-type\": \"Application/json\",\n        Authorization: `Bearer ${this.jwtToken}`\n      }\n    });\n  }\n\n  //https://4ikenxgwge.execute-api.us-east-2.amazonaws.com/default/kb-staging-backend\n  async swap(dispatch, currency, amount, targetCurrency) {\n    try {\n      // const sourceNetwork = // Utils.parseCurrency(currency);\n      // const targetNetwork = // Utils.parseCurrency(targetCurrency);\n      // const res = // await this.api.api({\n      // //     command: 'swapGetTransaction',\n      // //     data: {currency, amount, targetCurrency}, params: [] } as any);\n      // // const { isApprove, requests } = res;\n      // const requestId = await this.client.sendTransactionAsync(this.network!, requests,\n      //     {currency, amount, targetCurrency, action: isApprove ? 'approve' : 'swap'});\n      // // const response = await this.processRequest(dispatch, requestId);\n      // // if(response) await this.logSwapTransaction(requestId.split('|')[0],sourceNetwork[0]);           \n      // return {\n      //     \"status\":'success',\n      //     \"txId\": requestId.split('|')[0],\n      //     \"itemId\": \"response\"\n      // };\n    } catch (e) {\n      // dispatch(addAction(CommonActions.ERROR_OCCURED, {message: (e as Error).message || '' }));\n      // dispatch(addAction(Actions.BRIDGE_SWAP_FAILED, {\n      //     message: e.message || '' }));\n    } finally {\n      // dispatch(addAction(CommonActions.WAITING_DONE, { source: 'withdrawableBalanceItemAddTransaction' }));\n    }\n  }\n}","map":{"version":3,"names":["axios","crucibleApi","jwtToken","address","signInToServer","userAddress","res","post","command","data","params","unsecureSession","gatewayApi","headers","Authorization","swap","dispatch","currency","amount","targetCurrency","e"],"sources":["/Users/kabiribraheem/Documents/casper-bridge-frontend/src/client/index.ts"],"sourcesContent":["import { Dispatch } from \"react\";\nimport { AnyAction } from \"redux\";\nimport axios from \"axios\";\n\nexport class crucibleApi {\n  jwtToken = \"\";\n  address = \"\"\n\n  async signInToServer(userAddress: string) {\n    const res = await axios.post('http://localhost:8080', {\n      command: \"signInUsingAddress\",\n      data: { userAddress },\n      params: [],\n    });\n    const { unsecureSession } = res.data;\n    this.address = userAddress;\n    this.jwtToken = unsecureSession;\n    return unsecureSession;\n  }\n\n  gatewayApi(data: any) {\n    return axios.post('http://localhost:8080', data, {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Content-type\": \"Application/json\",\n        Authorization: `Bearer ${this.jwtToken}`,\n      },\n    });\n  }\n\n  //https://4ikenxgwge.execute-api.us-east-2.amazonaws.com/default/kb-staging-backend\n  async swap(\n    dispatch: Dispatch<AnyAction>,\n    currency: string,\n    amount: string,\n    targetCurrency: string,\n    ) {\n    try {\n        // const sourceNetwork = // Utils.parseCurrency(currency);\n        // const targetNetwork = // Utils.parseCurrency(targetCurrency);\n        // const res = // await this.api.api({\n        // //     command: 'swapGetTransaction',\n        // //     data: {currency, amount, targetCurrency}, params: [] } as any);\n        // // const { isApprove, requests } = res;\n        // const requestId = await this.client.sendTransactionAsync(this.network!, requests,\n        //     {currency, amount, targetCurrency, action: isApprove ? 'approve' : 'swap'});\n        // // const response = await this.processRequest(dispatch, requestId);\n        // // if(response) await this.logSwapTransaction(requestId.split('|')[0],sourceNetwork[0]);           \n        // return {\n        //     \"status\":'success',\n        //     \"txId\": requestId.split('|')[0],\n        //     \"itemId\": \"response\"\n        // };\n    } catch(e) {\n        // dispatch(addAction(CommonActions.ERROR_OCCURED, {message: (e as Error).message || '' }));\n        // dispatch(addAction(Actions.BRIDGE_SWAP_FAILED, {\n        //     message: e.message || '' }));\n    } finally {\n       // dispatch(addAction(CommonActions.WAITING_DONE, { source: 'withdrawableBalanceItemAddTransaction' }));\n    }\n}\n\n}\n\n"],"mappings":"AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,WAAW,CAAC;EAAA;IAAA,KACvBC,QAAQ,GAAG,EAAE;IAAA,KACbC,OAAO,GAAG,EAAE;EAAA;EAEZ,MAAMC,cAAc,CAACC,WAAmB,EAAE;IACxC,MAAMC,GAAG,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,uBAAuB,EAAE;MACpDC,OAAO,EAAE,oBAAoB;MAC7BC,IAAI,EAAE;QAAEJ;MAAY,CAAC;MACrBK,MAAM,EAAE;IACV,CAAC,CAAC;IACF,MAAM;MAAEC;IAAgB,CAAC,GAAGL,GAAG,CAACG,IAAI;IACpC,IAAI,CAACN,OAAO,GAAGE,WAAW;IAC1B,IAAI,CAACH,QAAQ,GAAGS,eAAe;IAC/B,OAAOA,eAAe;EACxB;EAEAC,UAAU,CAACH,IAAS,EAAE;IACpB,OAAOT,KAAK,CAACO,IAAI,CAAC,uBAAuB,EAAEE,IAAI,EAAE;MAC/CI,OAAO,EAAE;QACP,6BAA6B,EAAE,GAAG;QAClC,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAG,UAAS,IAAI,CAACZ,QAAS;MACzC;IACF,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMa,IAAI,CACRC,QAA6B,EAC7BC,QAAgB,EAChBC,MAAc,EACdC,cAAsB,EACpB;IACF,IAAI;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAAA,CACH,CAAC,OAAMC,CAAC,EAAE;MACP;MACA;MACA;IAAA,CACH,SAAS;MACP;IAAA;EAEP;AAEA"},"metadata":{},"sourceType":"module"}