{"ast":null,"code":"import { casperSlice } from \"./casperSlice\";\nimport moment from \"moment\";\nconst {\n  actions\n} = casperSlice;\nexport const connectWallet = connectedAccounts => async dispatch => {\n  dispatch(actions.connectWallet({\n    connectedAccounts: connectedAccounts\n  }));\n};\nexport const resetWallet = connectedAccounts => async dispatch => {\n  dispatch(actions.resetWallet());\n};\nexport const fetchWithdrawals = withdrawalItems => async dispatch => {\n  console.log(withdrawalItems);\n  dispatch(actions.fetchWithdrawals({\n    withdrawalItems\n  }));\n};\nexport const staked = selectedAddress => async dispatch => {\n  dispatch(actions.staked({\n    selectedAddress\n  }));\n};\nexport const signed = signedAddress => async dispatch => {\n  dispatch(actions.signed(signedAddress));\n};\nexport const selectAccount = selectedAccount => async dispatch => {\n  dispatch(actions.selectAccount({\n    selectedAccount\n  }));\n};\nexport const shouldStake = () => async dispatch => {\n  dispatch(actions.setShouldStake());\n};\nexport const stakeWithdrawSucess = () => async dispatch => {\n  dispatch(actions.stakeWithdrawSucess());\n};\nexport const configLoaded = config => async dispatch => {\n  var _data;\n  console.log(config.config, 'configgggg');\n  let data = {};\n  if (config.config.length) {\n    config.config.forEach(e => {\n      console.log(e[1]);\n      data[e[0]] = e[1].parsed;\n    });\n  }\n  data = {\n    ...data,\n    stakingTotal: (_data = data) === null || _data === void 0 ? void 0 : _data.staking_total,\n    stakingEnds: moment.unix(data.staking_ends).format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingStarts: moment.unix(data.staking_starts).format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdrawStarts: moment.unix(data.withdraw_starts).format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdrawEnds: moment.unix(data.withdraw_ends).format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingEnds: moment.unix(data.staking_ends).format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingStarts: moment.unix(data.staking_starts).format(\"YYYY-MM-DD HH:mm:ss\")\n  };\n  console.log(data, config);\n  dispatch(actions.configLoaded({\n    config: data,\n    tokenInfo: config.tokenInfo\n  }));\n};","map":{"version":3,"names":["casperSlice","moment","actions","connectWallet","connectedAccounts","dispatch","resetWallet","fetchWithdrawals","withdrawalItems","console","log","staked","selectedAddress","signed","signedAddress","selectAccount","selectedAccount","shouldStake","setShouldStake","stakeWithdrawSucess","configLoaded","config","data","length","forEach","e","parsed","stakingTotal","staking_total","stakingEnds","unix","staking_ends","format","stakingStarts","staking_starts","withdrawStarts","withdraw_starts","withdrawEnds","withdraw_ends","tokenInfo"],"sources":["/Users/kabiribraheem/Documents/casper-bridge-frontend/src/redux/casper/casperActions.js"],"sourcesContent":["import { casperSlice } from \"./casperSlice\";\nimport moment from \"moment\";\nconst { actions } = casperSlice;\n\nexport const connectWallet = (connectedAccounts) => async (dispatch) => {\n  dispatch(\n    actions.connectWallet({\n      connectedAccounts: connectedAccounts,\n    })\n  );\n};\n\nexport const resetWallet = (connectedAccounts) => async (dispatch) => {\n  dispatch(actions.resetWallet());\n};\n\n\nexport const fetchWithdrawals = (withdrawalItems) => async (dispatch) => {\n  console.log(withdrawalItems)\n  dispatch(actions.fetchWithdrawals({ withdrawalItems }));\n};\n\nexport const staked = (selectedAddress) => async (dispatch) => {\n  dispatch(actions.staked({ selectedAddress }));\n};\n\nexport const signed = (signedAddress) => async (dispatch) => {\n  dispatch(actions.signed(signedAddress));\n};\n\nexport const selectAccount = (selectedAccount) => async (dispatch) => {\n  dispatch(actions.selectAccount({ selectedAccount }));\n};\n\nexport const shouldStake = () => async (dispatch) => {\n  dispatch(actions.setShouldStake());\n};\n\nexport const stakeWithdrawSucess = () => async (dispatch) => {\n  dispatch(actions.stakeWithdrawSucess());\n};\n\nexport const configLoaded = (config) => async (dispatch) => {\n  console.log(config.config, 'configgggg');\n  let data = {}\n  if (config.config.length) {\n    config.config.forEach(\n      e => {\n        console.log(e[1])\n        data[e[0]] = e[1].parsed\n      }\n    )\n  }\n\n  data = {\n    ...data,\n    stakingTotal: data?.staking_total,\n    stakingEnds: moment.unix(data.staking_ends).format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingStarts: moment.unix(data.staking_starts).format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdrawStarts: moment.unix(data.withdraw_starts).format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdrawEnds: moment.unix(data.withdraw_ends).format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingEnds: moment.unix(data.staking_ends).format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingStarts: moment.unix(data.staking_starts).format(\"YYYY-MM-DD HH:mm:ss\")\n  };\n\n  console.log(data, config);\n  dispatch(actions.configLoaded({ config: data, tokenInfo: config.tokenInfo }));\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}