{"ast":null,"code":"var _jsxFileName = \"/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/admin/inputForm.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { FGrid, FCard, FGridItem, FContainer, FInputText, FButton, FDatepicker } from \"ferrum-design-system\";\nimport { useForm } from \"react-hook-form\";\nimport { Toaster } from \"react-hot-toast\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CLPublicKey, CLValueBuilder, decodeBase16, DeployUtil, RuntimeArgs, Signer } from \"casper-js-sdk\";\n// import * as stakingActions from \"../redux/reducers/staking/stakingAction\";\nimport toast from \"react-hot-toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const InputForm = () => {\n  _s();\n  var _errors$tokenAddress, _errors$tokenAddress2, _errors$stakingCap, _errors$stakingCap2, _errors$stakingStarts, _errors$stakingStarts2, _errors$stakingEnds, _errors$stakingEnds2, _errors$withdrawStart, _errors$withdrawStart2, _errors$withdrawEnds, _errors$withdrawEnds2;\n  const dispatch = useDispatch();\n  const connection = useSelector(state => state.casper.connect);\n  const {\n    connect: {\n      config,\n      selectedAccount,\n      isWalletConnected,\n      signedAddresses\n    }\n  } = useSelector(state => state.casper);\n  console.log(connection, 'connectionconnection');\n  // const { actionLoading } = useSelector((state: any) => state.staking);\n\n  const initialValues = {\n    tokenAddress: \"\",\n    stakingCap: \"\",\n    stakingStarts: \"\",\n    stakingEnds: \"\",\n    withdrawStarts: \"\",\n    withdrawEnds: \"\"\n  };\n  const {\n    // reset,\n    register,\n    control,\n    handleSubmit,\n    formState: {\n      errors\n      //  isSubmitting\n    }\n    // watch,\n  } = useForm({\n    defaultValues: initialValues\n  });\n  const onSubmit = async values => {\n    console.log(values, 'valuesss');\n    try {\n      // console.log(selectedAccount?.address, Number(amount));\n      const publicKeyHex = selectedAccount === null || selectedAccount === void 0 ? void 0 : selectedAccount.address;\n      const senderPublicKey = CLPublicKey.fromHex(publicKeyHex);\n      const deployParams = new DeployUtil.DeployParams(senderPublicKey, 'casper-test');\n\n      // casper-client put-deploy \\\n      // --chain-name casper-test \\\n      // --node-address http://44.208.234.65:7777 \\\n      // --secret-key ./staking_contract/keys/secret_keyls.pem \\\n      // --session-path ./staking_contract/target/wasm32-unknown-unknown/release/staking_contract.wasm \\\n      // --payment-amount 200000000000 \\\n      // --session-arg \"name:string='FerrumX'\" \\\n      // --session-arg \"address:string='782fe4b0bb944e6b1fd2c5a1456a78f0e2193d47dee9b1af5711d6b6e6aaca60'\" \\\n      // --session-arg \"staking_starts:u64='0'\" \\\n      // --session-arg \"staking_ends:u64='1755994649'\" \\\n      // --session-arg \"withdraw_starts:u64='0'\" \\\n      // --session-arg \"withdraw_ends:u64='1755994649'\" \\\n      // --session-arg \"staking_total:U256='500000'\" \\\n      // --session-arg \"erc20_contract_hash:string='2934370f0a53457987d4dba9d68d71e7ee45b676677fbc66653bd15ea58db60f'\"\n\n      const args = RuntimeArgs.fromMap({\n        \"amount\": CLValueBuilder.u256(amount)\n      });\n      const session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(decodeBase16(stakingId), 'stake', args);\n      const payment = DeployUtil.standardPayment(10000000000000);\n      const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n      const deployJson = DeployUtil.deployToJson(deploy);\n      Signer.sign(deployJson, publicKeyHex).then(async signedDeployJson => {\n        const signedDeploy = DeployUtil.deployFromJson(signedDeployJson);\n        console.log(signedDeploy);\n        if (signedDeploy.ok) {\n          const res = await casperClient.putDeploy(signedDeploy.val);\n          console.log(res, 'resres');\n          setProcessMsg(res);\n          setLoading(false);\n          setShowConfirmation(true);\n        }\n      });\n      // navigate.push(`/${config._id}`);\n      //toast.success(`${amount} tokens are staked successfully`);\n    } catch (e) {\n      console.log(\"ERROR : \", e);\n      toast.error(\"An error occured please see console for details\");\n      navigate.push(`/${config._id}`);\n    } finally {\n      //setLoading(false)\n    }\n    // console.log(values.stakingStarts); // pick by date time picker\n    // console.log(moment.utc(values.stakingStarts).format(\"YYYY-MM-DD HH:mm:ss Z\")); //Local to UTC\n    // var stillUtc = moment.utc(moment.utc(values.stakingStarts).format(\"YYYY-MM-DD HH:mm:ss Z\")).toDate();\n    // console.log(moment(stillUtc).local().format(\"YYYY-MM-DD HH:mm:ss\")); // UTC to Local\n\n    // dispatch(\n    //   stakingActions.createStaking({\n    //     ...values,\n    //     stakingStarts: moment(values.stakingStarts).format(\"yyyy-MM-DD HH:mm:ss.SSS\"),\n    //     stakingEnds: moment(values.stakingEnds).format(\"yyyy-MM-DD HH:mm:ss.SSS\"),\n    //     withdrawStarts: moment(values.withdrawStarts).format(\"yyyy-MM-DD HH:mm:ss.SSS\"),\n    //     withdrawEnds: moment(values.withdrawEnds).format(\"yyyy-MM-DD HH:mm:ss.SSS\"),\n    //   })\n    // );\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Toaster, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FContainer, {\n      width: 1200,\n      children: /*#__PURE__*/_jsxDEV(FCard, {\n        variant: \"primary\",\n        className: \"f-mt-2 f-mb-2\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          autoComplete: \"false\",\n          onSubmit: handleSubmit(onSubmit),\n          children: /*#__PURE__*/_jsxDEV(FGrid, {\n            className: \"f-mt-1\",\n            children: [/*#__PURE__*/_jsxDEV(FGridItem, {\n              size: [6, 6, 6],\n              children: /*#__PURE__*/_jsxDEV(FInputText, {\n                label: \"Token Address\",\n                name: \"tokenAddress\",\n                type: \"text\",\n                className: \"w-100\",\n                placeholder: \"0\",\n                register: register,\n                validations: {\n                  required: {\n                    value: true,\n                    message: \"Token Address is required\"\n                  }\n                },\n                error: (_errors$tokenAddress = errors[\"tokenAddress\"]) !== null && _errors$tokenAddress !== void 0 && _errors$tokenAddress.message ? (_errors$tokenAddress2 = errors[\"tokenAddress\"]) === null || _errors$tokenAddress2 === void 0 ? void 0 : _errors$tokenAddress2.message : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FGridItem, {\n              size: [6, 6, 6],\n              children: /*#__PURE__*/_jsxDEV(FInputText, {\n                label: \"stakingCap\",\n                name: \"stakingCap\",\n                type: \"text\",\n                placeholder: \"0\",\n                register: register,\n                validations: {\n                  required: {\n                    value: true,\n                    message: \"Staking Cap is required\"\n                  }\n                },\n                error: (_errors$stakingCap = errors[\"stakingCap\"]) !== null && _errors$stakingCap !== void 0 && _errors$stakingCap.message ? (_errors$stakingCap2 = errors[\"stakingCap\"]) === null || _errors$stakingCap2 === void 0 ? void 0 : _errors$stakingCap2.message : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FGridItem, {\n              size: [6, 6, 6],\n              children: /*#__PURE__*/_jsxDEV(FDatepicker, {\n                label: \"Staking Starts\",\n                name: \"stakingStarts\",\n                className: \"f-mt-1\",\n                placeholderText: \"MM-DD-YYYY\",\n                register: register,\n                showTimeSelect: true,\n                control: control,\n                validations: {\n                  required: {\n                    value: true,\n                    message: \"Staking Starts is required\"\n                  }\n                },\n                error: (_errors$stakingStarts = errors[\"stakingStarts\"]) !== null && _errors$stakingStarts !== void 0 && _errors$stakingStarts.message ? (_errors$stakingStarts2 = errors[\"stakingStarts\"]) === null || _errors$stakingStarts2 === void 0 ? void 0 : _errors$stakingStarts2.message : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FGridItem, {\n              size: [6, 6, 6],\n              children: /*#__PURE__*/_jsxDEV(FDatepicker, {\n                label: \"Staking Ends\",\n                name: \"stakingEnds\",\n                className: \"f-mt-1\",\n                placeholderText: \"MM-DD-YYYY\",\n                register: register,\n                showTimeSelect: true,\n                control: control,\n                validations: {\n                  required: {\n                    value: true,\n                    message: \"Staking Ends is required\"\n                  }\n                },\n                error: (_errors$stakingEnds = errors[\"stakingEnds\"]) !== null && _errors$stakingEnds !== void 0 && _errors$stakingEnds.message ? (_errors$stakingEnds2 = errors[\"stakingEnds\"]) === null || _errors$stakingEnds2 === void 0 ? void 0 : _errors$stakingEnds2.message : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FGridItem, {\n              size: [6, 6, 6],\n              children: /*#__PURE__*/_jsxDEV(FDatepicker, {\n                label: \"Withdraw Starts\",\n                name: \"withdrawStarts\",\n                className: \"f-mt-1\",\n                placeholderText: \"MM-DD-YYYY\",\n                register: register,\n                showTimeSelect: true,\n                control: control,\n                validations: {\n                  required: {\n                    value: true,\n                    message: \"Withdraw Starts is required\"\n                  }\n                },\n                error: (_errors$withdrawStart = errors[\"withdrawStarts\"]) !== null && _errors$withdrawStart !== void 0 && _errors$withdrawStart.message ? (_errors$withdrawStart2 = errors[\"withdrawStarts\"]) === null || _errors$withdrawStart2 === void 0 ? void 0 : _errors$withdrawStart2.message : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FGridItem, {\n              size: [6, 6, 6],\n              children: /*#__PURE__*/_jsxDEV(FDatepicker, {\n                label: \"Withdraw Ends\",\n                name: \"withdrawEnds\",\n                className: \"f-mt-1\",\n                placeholderText: \"MM-DD-YYYY\",\n                register: register,\n                showTimeSelect: true,\n                control: control,\n                validations: {\n                  required: {\n                    value: true,\n                    message: \"Withdraw Ends is required\"\n                  }\n                },\n                error: (_errors$withdrawEnds = errors[\"withdrawEnds\"]) !== null && _errors$withdrawEnds !== void 0 && _errors$withdrawEnds.message ? (_errors$withdrawEnds2 = errors[\"withdrawEnds\"]) === null || _errors$withdrawEnds2 === void 0 ? void 0 : _errors$withdrawEnds2.message : \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FGridItem, {\n              alignX: \"end\",\n              children: /*#__PURE__*/_jsxDEV(FButton, {\n                type: \"submit\",\n                disabled: !connection.connectedAccounts.length,\n                title: !!connection.connectedAccounts.length ? \"Create Staking\" : 'Connect wallet to create',\n                className: \"f-mt-1 f-mb-2\"\n                // postfix={isSubmitting && <ClipLoader color=\"#fff\" size={20} />}\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(InputForm, \"ARegFR5oD1e2u7Y8Y2dQqzuk+Co=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useForm];\n});\n_c = InputForm;\nvar _c;\n$RefreshReg$(_c, \"InputForm\");","map":{"version":3,"names":["React","FGrid","FCard","FGridItem","FContainer","FInputText","FButton","FDatepicker","useForm","Toaster","useDispatch","useSelector","CLPublicKey","CLValueBuilder","decodeBase16","DeployUtil","RuntimeArgs","Signer","toast","InputForm","dispatch","connection","state","casper","connect","config","selectedAccount","isWalletConnected","signedAddresses","console","log","initialValues","tokenAddress","stakingCap","stakingStarts","stakingEnds","withdrawStarts","withdrawEnds","register","control","handleSubmit","formState","errors","defaultValues","onSubmit","values","publicKeyHex","address","senderPublicKey","fromHex","deployParams","DeployParams","args","fromMap","u256","amount","session","ExecutableDeployItem","newStoredContractByHash","stakingId","payment","standardPayment","deploy","makeDeploy","deployJson","deployToJson","sign","then","signedDeployJson","signedDeploy","deployFromJson","ok","res","casperClient","putDeploy","val","setProcessMsg","setLoading","setShowConfirmation","e","error","navigate","push","_id","required","value","message","connectedAccounts","length"],"sources":["/Users/kabiribraheem/Documents/staking-casper-frontend/src/components/admin/inputForm.tsx"],"sourcesContent":["import React from \"react\";\nimport { FGrid, FCard, FGridItem, FContainer, FInputText, FButton, FDatepicker } from \"ferrum-design-system\";\nimport moment from \"moment\";\nimport { useForm } from \"react-hook-form\";\nimport { Toaster } from \"react-hot-toast\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CLPublicKey, CasperClient, CasperServiceByJsonRPC, CLValueBuilder, decodeBase16, DeployUtil, RuntimeArgs, Signer } from \"casper-js-sdk\";\n// import * as stakingActions from \"../redux/reducers/staking/stakingAction\";\nimport toast from \"react-hot-toast\";\n\nexport const InputForm = () => {\n  const dispatch: any = useDispatch();\n  const connection = useSelector((state: any) => state.casper.connect)\n  const { connect: { config, selectedAccount, isWalletConnected, signedAddresses } } = useSelector((state: any) => state.casper);\n\n  console.log(connection, 'connectionconnection')\n  // const { actionLoading } = useSelector((state: any) => state.staking);\n\n  const initialValues = {\n    tokenAddress: \"\",\n    stakingCap: \"\",\n    stakingStarts: \"\",\n    stakingEnds: \"\",\n    withdrawStarts: \"\",\n    withdrawEnds: \"\",\n  };\n\n  const {\n    // reset,\n    register,\n    control,\n    handleSubmit,\n    formState: {\n      errors,\n      //  isSubmitting\n    },\n    // watch,\n  } = useForm({ defaultValues: initialValues });\n\n  const onSubmit = async (values: any) => {\n    console.log(values, 'valuesss');\n    try {\n      // console.log(selectedAccount?.address, Number(amount));\n      const publicKeyHex = selectedAccount?.address;\n      const senderPublicKey = CLPublicKey.fromHex(publicKeyHex);\n\n      const deployParams = new DeployUtil.DeployParams(\n        senderPublicKey,\n        'casper-test'\n      );\n\n      // casper-client put-deploy \\\n      // --chain-name casper-test \\\n      // --node-address http://44.208.234.65:7777 \\\n      // --secret-key ./staking_contract/keys/secret_keyls.pem \\\n      // --session-path ./staking_contract/target/wasm32-unknown-unknown/release/staking_contract.wasm \\\n      // --payment-amount 200000000000 \\\n      // --session-arg \"name:string='FerrumX'\" \\\n      // --session-arg \"address:string='782fe4b0bb944e6b1fd2c5a1456a78f0e2193d47dee9b1af5711d6b6e6aaca60'\" \\\n      // --session-arg \"staking_starts:u64='0'\" \\\n      // --session-arg \"staking_ends:u64='1755994649'\" \\\n      // --session-arg \"withdraw_starts:u64='0'\" \\\n      // --session-arg \"withdraw_ends:u64='1755994649'\" \\\n      // --session-arg \"staking_total:U256='500000'\" \\\n      // --session-arg \"erc20_contract_hash:string='2934370f0a53457987d4dba9d68d71e7ee45b676677fbc66653bd15ea58db60f'\"\n\n      const args = RuntimeArgs.fromMap({\n        \"amount\": CLValueBuilder.u256(amount),\n      });\n\n      const session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(\n        decodeBase16(stakingId),\n        'stake',\n        args\n      );\n\n      const payment = DeployUtil.standardPayment(10000000000000);\n\n      const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n\n      const deployJson: any = DeployUtil.deployToJson(deploy);\n    \n      Signer.sign(deployJson, publicKeyHex).then(async (signedDeployJson) => {\n        const signedDeploy = DeployUtil.deployFromJson(signedDeployJson);\n        console.log(signedDeploy)\n        if (signedDeploy.ok) {\n          const res = await casperClient.putDeploy(signedDeploy.val);\n          console.log(res, 'resres');\n          setProcessMsg(res)\n          setLoading(false)\n          setShowConfirmation(true)\n        }\n        \n      });\n        // navigate.push(`/${config._id}`);\n        //toast.success(`${amount} tokens are staked successfully`);\n    } catch (e) {\n      console.log(\"ERROR : \", e);\n      toast.error(\"An error occured please see console for details\");\n      navigate.push(`/${config._id}`);\n    } finally {\n      //setLoading(false)\n    }\n    // console.log(values.stakingStarts); // pick by date time picker\n    // console.log(moment.utc(values.stakingStarts).format(\"YYYY-MM-DD HH:mm:ss Z\")); //Local to UTC\n    // var stillUtc = moment.utc(moment.utc(values.stakingStarts).format(\"YYYY-MM-DD HH:mm:ss Z\")).toDate();\n    // console.log(moment(stillUtc).local().format(\"YYYY-MM-DD HH:mm:ss\")); // UTC to Local\n\n    // dispatch(\n    //   stakingActions.createStaking({\n    //     ...values,\n    //     stakingStarts: moment(values.stakingStarts).format(\"yyyy-MM-DD HH:mm:ss.SSS\"),\n    //     stakingEnds: moment(values.stakingEnds).format(\"yyyy-MM-DD HH:mm:ss.SSS\"),\n    //     withdrawStarts: moment(values.withdrawStarts).format(\"yyyy-MM-DD HH:mm:ss.SSS\"),\n    //     withdrawEnds: moment(values.withdrawEnds).format(\"yyyy-MM-DD HH:mm:ss.SSS\"),\n    //   })\n    // );\n  };\n\n  return (\n    <>\n      <Toaster />\n      <FContainer width={1200}>\n        <FCard variant={\"primary\"} className=\"f-mt-2 f-mb-2\">\n          <form autoComplete=\"false\" onSubmit={handleSubmit(onSubmit)}>\n            <FGrid className={\"f-mt-1\"}>\n              <FGridItem size={[6, 6, 6]}>\n                <FInputText\n                  label=\"Token Address\"\n                  name=\"tokenAddress\"\n                  type=\"text\"\n                  className={\"w-100\"}\n                  placeholder=\"0\"\n                  register={register}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"Token Address is required\",\n                    },\n                  }}\n                  error={errors[\"tokenAddress\"]?.message ? errors[\"tokenAddress\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem size={[6, 6, 6]}>\n                <FInputText\n                  label=\"stakingCap\"\n                  name=\"stakingCap\"\n                  type=\"text\"\n                  placeholder=\"0\"\n                  register={register}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"Staking Cap is required\",\n                    },\n                  }}\n                  error={errors[\"stakingCap\"]?.message ? errors[\"stakingCap\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem size={[6, 6, 6]}>\n                <FDatepicker\n                  label=\"Staking Starts\"\n                  name=\"stakingStarts\"\n                  className={\"f-mt-1\"}\n                  placeholderText=\"MM-DD-YYYY\"\n                  register={register}\n                  showTimeSelect={true}\n                  control={control}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"Staking Starts is required\",\n                    },\n                  }}\n                  error={errors[\"stakingStarts\"]?.message ? errors[\"stakingStarts\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem size={[6, 6, 6]}>\n                <FDatepicker\n                  label=\"Staking Ends\"\n                  name=\"stakingEnds\"\n                  className={\"f-mt-1\"}\n                  placeholderText=\"MM-DD-YYYY\"\n                  register={register}\n                  showTimeSelect={true}\n                  control={control}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"Staking Ends is required\",\n                    },\n                  }}\n                  error={errors[\"stakingEnds\"]?.message ? errors[\"stakingEnds\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem size={[6, 6, 6]}>\n                <FDatepicker\n                  label=\"Withdraw Starts\"\n                  name=\"withdrawStarts\"\n                  className={\"f-mt-1\"}\n                  placeholderText=\"MM-DD-YYYY\"\n                  register={register}\n                  showTimeSelect={true}\n                  control={control}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"Withdraw Starts is required\",\n                    },\n                  }}\n                  error={errors[\"withdrawStarts\"]?.message ? errors[\"withdrawStarts\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem size={[6, 6, 6]}>\n                <FDatepicker\n                  label=\"Withdraw Ends\"\n                  name=\"withdrawEnds\"\n                  className={\"f-mt-1\"}\n                  placeholderText=\"MM-DD-YYYY\"\n                  register={register}\n                  showTimeSelect={true}\n                  control={control}\n                  validations={{\n                    required: {\n                      value: true,\n                      message: \"Withdraw Ends is required\",\n                    },\n                  }}\n                  error={errors[\"withdrawEnds\"]?.message ? errors[\"withdrawEnds\"]?.message : \"\"}\n                />\n              </FGridItem>\n              <FGridItem alignX={\"end\"}>\n                <FButton\n                  type=\"submit\"\n                  disabled={!connection.connectedAccounts.length}\n                  title={!!connection.connectedAccounts.length ? \"Create Staking\" : 'Connect wallet to create' }\n                  className={\"f-mt-1 f-mb-2\"}\n                  // postfix={isSubmitting && <ClipLoader color=\"#fff\" size={20} />}\n                ></FButton>\n              </FGridItem>\n            </FGrid>\n          </form>\n        </FCard>\n      </FContainer>\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}