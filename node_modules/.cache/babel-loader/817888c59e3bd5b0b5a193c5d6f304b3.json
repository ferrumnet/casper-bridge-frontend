{"ast":null,"code":"var _jsxFileName = \"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/walletApplicationWrapper.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as applicationWrapperActions from \"./redux/walletApplicationWrapperActions\";\nimport FerrumJson from \"../../../utils/FerrumToken.json\";\n// import { Networks } from \"ferrum-plumbing\";\n// import { FRM } from \"../../helper/bridgeHelpers\";\n\nimport Web3 from \"web3\";\nimport { Big } from \"big.js\";\nimport { Web3ReactProvider } from \"@web3-react/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getLibrary = provider => {\n  return new Web3(provider); // this will vary according to whether you use e.g. ethers or web3.js\n};\n\nexport const ApplicationWrapper = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const dispatch = useDispatch();\n  const {\n    isConnected,\n    walletAddress,\n    currentWalletNetwork,\n    // walletBalance,\n    networkClient,\n    isWeb3Initialized\n  } = useSelector(state => state.walletConnector);\n  const {\n    tokenList,\n    walletWrapperInitialized,\n    // supportedCurrencies,\n    groupInfo\n  } = useSelector(state => state.walletApplicationWrapper);\n  useEffect(() => {\n    // console.log(\"Attempt to intialize app\");\n    // dispatch(applicationWrapperActions.loadWalletDefaults(\"frm\", tokenList));\n  }, []);\n  useEffect(() => {\n    // console.log(\"intiialalalal\");\n    if (isConnected && isWeb3Initialized && networkClient && walletWrapperInitialized) {\n      signIntoServer();\n    } else if (!isConnected || !isWeb3Initialized || !networkClient || !walletWrapperInitialized) {\n      dispatch(applicationWrapperActions.resetUserProfile());\n    }\n    // eslint-disable-next-line\n  }, [isConnected, walletWrapperInitialized]);\n  const signIntoServer = async () => {\n    await getUserProfile();\n    // dispatch(applicationWrapperActions.getUserProfile(user));\n  };\n\n  const getUserProfile = async () => {\n    if (networkClient !== undefined) {\n      var _userTokens$;\n      const userTokens = tokenList.filter(item => {\n        return item.chainId === currentWalletNetwork;\n      });\n      const currentNetwork = (_userTokens$ = userTokens[0]) === null || _userTokens$ === void 0 ? void 0 : _userTokens$.currency.split(\":\")[0];\n      const currencies = groupInfo.bridgeCurrencies.filter(currency => currency.split(\":\")[0] === currentNetwork);\n      const addressesF = currencies.map(async c => {\n        const [network, tokenAddr] = c.split(\":\");\n        let symbol = \"\";\n        let decimals = \"\";\n        let name = \"\";\n        let amount = 0;\n        let balance = 0;\n        // let decimalFactor;\n        // const netObj = Networks.for(network);\n        if (network === currentNetwork) {\n          // if (netObj.baseSymbol === tokenAddr) {\n          //   symbol = \"\";\n          //   if (!!networkClient) {\n          //     balance = Web3.utils.fromWei(\n          //       await networkClient!.eth.getBalance(walletAddress as string)\n          //     );\n          //     // console.log(balance, \"==================\");\n          //   } else {\n          //     balance = \"0\";\n          //   }\n          // } else {\n          // const token = TokenInfo[c];\n          // symbol = token.tokenSymbol;\n          const tokenContract = new networkClient.eth.Contract(FerrumJson.abi, tokenAddr);\n          symbol = await tokenContract.methods.symbol().call();\n          decimals = await tokenContract.methods.decimals().call();\n          name = await tokenContract.methods.name().call();\n          balance = await tokenContract.methods.balanceOf(walletAddress).call();\n          const decimalFactor = 10 ** Number(decimals);\n          balance = new Big(balance).div(decimalFactor).toFixed();\n          // }\n        }\n\n        return {\n          address: walletAddress.toLocaleLowerCase(),\n          addressType: \"ADDRESS\",\n          balance: balance,\n          currency: c,\n          amount,\n          humanReadableAddress: walletAddress,\n          network: currentNetwork || undefined,\n          pendingForDeposit: \"0\",\n          pendingForWithdrawal: \"0\",\n          symbol,\n          decimals,\n          name,\n          addressWithChecksum: walletAddress\n        };\n      });\n      const addresses = await Promise.all(addressesF);\n      const accountGroups = {\n        id: \"ag1\",\n        addresses\n      };\n      const up = {\n        appId: \"base\",\n        displayName: \"\",\n        userId: walletAddress,\n        accountGroups: [accountGroups],\n        currentNetwork\n      };\n      return up;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Web3ReactProvider, {\n    getLibrary: getLibrary,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(ApplicationWrapper, \"PxmtMp3424d15fNSLl57KINtST0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = ApplicationWrapper;\nvar _c;\n$RefreshReg$(_c, \"ApplicationWrapper\");","map":{"version":3,"names":["React","useEffect","useSelector","useDispatch","applicationWrapperActions","FerrumJson","Web3","Big","Web3ReactProvider","getLibrary","provider","ApplicationWrapper","children","dispatch","isConnected","walletAddress","currentWalletNetwork","networkClient","isWeb3Initialized","state","walletConnector","tokenList","walletWrapperInitialized","groupInfo","walletApplicationWrapper","signIntoServer","resetUserProfile","getUserProfile","undefined","userTokens","filter","item","chainId","currentNetwork","currency","split","currencies","bridgeCurrencies","addressesF","map","c","network","tokenAddr","symbol","decimals","name","amount","balance","tokenContract","eth","Contract","abi","methods","call","balanceOf","decimalFactor","Number","div","toFixed","address","toLocaleLowerCase","addressType","humanReadableAddress","pendingForDeposit","pendingForWithdrawal","addressWithChecksum","addresses","Promise","all","accountGroups","id","up","appId","displayName","userId"],"sources":["/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/walletApplicationWrapper.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as applicationWrapperActions from \"./redux/walletApplicationWrapperActions\";\nimport FerrumJson from \"../../../utils/FerrumToken.json\";\n// import { Networks } from \"ferrum-plumbing\";\n// import { FRM } from \"../../helper/bridgeHelpers\";\nimport { RootState } from \"../../../redux/rootReducer\";\nimport Web3 from \"web3\";\nimport { Big } from \"big.js\";\nimport { AbiItem } from \"web3-utils\";\nimport { Web3ReactProvider } from \"@web3-react/core\";\n\nconst getLibrary = (provider: any) => {\n  return new Web3(provider); // this will vary according to whether you use e.g. ethers or web3.js\n};\n\nexport const ApplicationWrapper = ({ children }: any) => {\n  const dispatch = useDispatch();\n\n  const {\n    isConnected,\n    walletAddress,\n    currentWalletNetwork,\n    // walletBalance,\n    networkClient,\n    isWeb3Initialized,\n  } = useSelector((state: RootState) => state.walletConnector);\n\n  const {\n    tokenList,\n    walletWrapperInitialized,\n    // supportedCurrencies,\n    groupInfo,\n  } = useSelector((state: RootState) => state.walletApplicationWrapper);\n\n  useEffect(() => {\n    // console.log(\"Attempt to intialize app\");\n    // dispatch(applicationWrapperActions.loadWalletDefaults(\"frm\", tokenList));\n  }, []);\n\n  useEffect(() => {\n    // console.log(\"intiialalalal\");\n    if (\n      isConnected &&\n      isWeb3Initialized &&\n      networkClient &&\n      walletWrapperInitialized\n    ) { \n      signIntoServer();\n    } else if (\n      !isConnected ||\n      !isWeb3Initialized ||\n      !networkClient ||\n      !walletWrapperInitialized\n    ) { \n      dispatch(applicationWrapperActions.resetUserProfile());\n    }\n    // eslint-disable-next-line\n  }, [isConnected, walletWrapperInitialized]);\n\n  const signIntoServer = async () => { \n     await getUserProfile(); \n    // dispatch(applicationWrapperActions.getUserProfile(user));\n  };\n\n  const getUserProfile = async () => {\n    if (networkClient !== undefined) {\n      const userTokens = tokenList.filter((item: any) => {\n        return item.chainId === currentWalletNetwork;\n      });\n      const currentNetwork = userTokens[0]?.currency.split(\":\")[0];\n      const currencies = groupInfo.bridgeCurrencies.filter(\n        (currency: any) => currency.split(\":\")[0] === currentNetwork\n      );\n      const addressesF = currencies.map(async (c: any) => {\n        const [network, tokenAddr] = c.split(\":\");\n        let symbol: string = \"\";\n        let decimals: string = \"\";\n        let name: string = \"\";\n        let amount: number | string = 0;\n        let balance: number | string = 0;\n        // let decimalFactor;\n        // const netObj = Networks.for(network);\n        if (network === currentNetwork) {\n          // if (netObj.baseSymbol === tokenAddr) {\n          //   symbol = \"\";\n          //   if (!!networkClient) {\n          //     balance = Web3.utils.fromWei(\n          //       await networkClient!.eth.getBalance(walletAddress as string)\n          //     );\n          //     // console.log(balance, \"==================\");\n          //   } else {\n          //     balance = \"0\";\n          //   }\n          // } else {\n          // const token = TokenInfo[c];\n          // symbol = token.tokenSymbol;\n          const tokenContract = new networkClient.eth.Contract(\n            FerrumJson.abi as AbiItem[],\n            tokenAddr\n          );\n          symbol = await tokenContract.methods.symbol().call();\n          decimals = (await tokenContract.methods.decimals().call()) as any;\n          name = await tokenContract.methods.name().call();\n          balance = await tokenContract.methods.balanceOf(walletAddress).call();\n          const decimalFactor = 10 ** Number(decimals);\n          balance = new Big(balance).div(decimalFactor).toFixed();  \n          // }\n        }\n\n        return {\n          address: walletAddress.toLocaleLowerCase(),\n          addressType: \"ADDRESS\",\n          balance: balance,\n          currency: c,\n          amount,\n          humanReadableAddress: walletAddress,\n          network: currentNetwork || undefined,\n          pendingForDeposit: \"0\",\n          pendingForWithdrawal: \"0\",\n          symbol,\n          decimals,\n          name,\n          addressWithChecksum: walletAddress,\n        };\n      });\n      const addresses = await Promise.all(addressesF);\n      const accountGroups = {\n        id: \"ag1\",\n        addresses,\n      };\n      const up = {\n        appId: \"base\",\n        displayName: \"\",\n        userId: walletAddress,\n        accountGroups: [accountGroups],\n        currentNetwork,\n      };\n      return up;\n    }\n  };\n\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>{children}</Web3ReactProvider>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}