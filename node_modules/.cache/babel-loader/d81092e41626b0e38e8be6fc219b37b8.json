{"ast":null,"code":"var _jsxFileName = \"/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/wallet-connector.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { walletConnectorActions } from \".\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"./web3React/connectors\";\nimport { AiOutlineDisconnect, AiOutlineLoading3Quarters } from \"react-icons/ai\";\nimport { VscDebugDisconnect } from \"react-icons/vsc\";\nimport toast from \"react-hot-toast\";\n// import { WalletAuthencationOnSignIn } from \"../../components/common/wallet-authentication/WalletAuthenticationSignIn\";\nimport * as walletAuthenticatorActions from \"./walletAuthenticationActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const WalletConnector = _ref => {\n  _s();\n  let {\n    WalletConnectView,\n    WalletConnectModal,\n    WalletConnectViewProps\n  } = _ref;\n  const [showWalletDialog, setShowWalletDialog] = useState(false);\n  const [reconnect, setReconnect] = useState(false);\n  const [networkClient, setNetworkClient] = useState(undefined);\n  const state = useSelector(state => state);\n  console.log(state);\n  const dispatch = useDispatch();\n  const {\n    active,\n    activate,\n    deactivate,\n    library,\n    account,\n    chainId,\n    error\n  } = useWeb3React();\n  const {\n    isConnected,\n    isConnecting,\n    currentWalletNetwork,\n    walletAddress\n  } = useSelector(state => state.walletConnector);\n  const {\n    // nonce,\n    applicationUserToken\n    //  signature, isAllowedonGateway, allowedNetworksonGateway, getSignatureFromMetamask, tokenV2, meV2\n  } = useSelector(state => state.walletAuthenticator);\n  useEffect(() => {\n    if (account && walletAddress && walletAddress !== account && isConnected && active) {\n      // console.log(\"Account Changed reconnect wallet\");\n      activate(injected);\n      setReconnect(true);\n    }\n    // eslint-disable-next-line\n  }, [walletAddress, account, isConnected, active]);\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      // console.log(isAuthorized, active, \"isAuthorized\");\n      if (isAuthorized && !active && !error && isConnected) {\n        activate(injected);\n      }\n    }).catch(() => {});\n    // eslint-disable-next-line\n  }, [activate, active, error, isConnected]);\n  useEffect(() => {\n    if (chainId && currentWalletNetwork && currentWalletNetwork !== chainId && isConnected && active) {\n      // console.log(\"Chain Changed reconnect wallet\");\n      activate(injected);\n      setReconnect(true);\n    }\n    // eslint-disable-next-line\n  }, [currentWalletNetwork, chainId, isConnected, active]);\n  useEffect(() => {\n    if (active && !isConnected && library && !networkClient) {\n      // console.log(\"web3 react connect set network client\");\n      dispatch(walletConnectorActions.connectWallet());\n      setNetworkClient(library);\n    }\n    if (!active && isConnected && !library && !isConnecting) {\n      // console.log(\"connected in currenct browser session reconnect wallet\");\n      activate(injected);\n      setReconnect(true);\n    }\n    // eslint-disable-next-line\n  }, [isConnected, active, library, isConnecting, networkClient]);\n  useEffect(() => {\n    if (reconnect && active) {\n      // console.log(\n      //   \"reconnect called and web3 is active again reset network client to set again\"\n      // );\n      dispatch(walletConnectorActions.reconnectWallet());\n      setNetworkClient(undefined);\n      setReconnect(false);\n    }\n    // eslint-disable-next-line\n  }, [reconnect, active]);\n  useEffect(() => {\n    if (active && networkClient && library && !isConnected && account && chainId && isConnecting) {\n      // console.log(\n      //   \"network client is set, web3 react is also active test by fetching account balance\"\n      // );\n      networkClient.eth.getBalance(account === null || account === void 0 ? void 0 : account.toString()).then(balance => {\n        // console.log(\n        //   \"newtork ping completed successfully update redux with wallet and network client information\",\n        //   balance,\n        //   account?.toString()\n        // );\n        dispatch(walletConnectorActions.walletConnected({\n          chainId,\n          account,\n          balance,\n          currentWallet: undefined,\n          networkClient\n        }));\n      }).catch(err => {\n        // console.log(\"newtork ping failed reset wallet state\");\n        // console.log(err, \" : error connecting wallet\");\n        toast.error(err || \"Error connecting wallet\");\n        dispatch(walletConnectorActions.resetWalletConnector());\n      });\n    }\n    // eslint-disable-next-line\n  }, [networkClient, library, isConnected, active, account, chainId, isConnecting]);\n  const openWalletSelectorDialog = () => {\n    // console.log(\"open wallet selector to connect\");\n    if (!isConnecting) {\n      if (!isConnected) {\n        setShowWalletDialog(true);\n      } else {\n        // console.log(\"wallet is already connect disconnect wallet\");\n        dispatch(walletConnectorActions.resetWalletConnector());\n        dispatch(walletAuthenticatorActions.resetWalletAuthentication({\n          userToken: applicationUserToken\n        }));\n        dispatch(walletAuthenticatorActions.removeSession({\n          userToken: applicationUserToken\n        }));\n        setNetworkClient(undefined);\n        deactivate();\n      }\n    } else {\n      // console.log(\"wallet is already in connect state\");\n    }\n  };\n\n  // // console.log(isConnecting, \"isConnecting\");\n  // // console.log(isConnected, \"isConnected\");\n  // // console.log(active, \"active\");\n  // // console.log(library, \"library\");\n  // // console.log(networkClient, \"networkClient\");\n  // // console.log(walletAddress, \"walletAddress\");\n  // // console.log(account, \"account\");\n  // // console.log(walletAddress === account);\n  // // console.log(chainId, \"chainId\");\n  // // console.log(currentWalletNetwork, \"currentWalletNetwork\");\n  // // console.log(currentWalletNetwork === chainId);\n  // // console.log(error);\n\n  const connectMetaMask = () => {\n    if (isConnected) {\n      // console.log(\"wallet is already connect disconnect wallet\");\n      dispatch(walletConnectorActions.resetWalletConnector());\n      setNetworkClient(undefined);\n      deactivate();\n    } else {\n      // console.log(\"intialize web3 wallet connect for meta mask\");\n      activate(injected);\n      setShowWalletDialog(false);\n      setNetworkClient(undefined);\n    }\n  };\n  useEffect(() => {\n    if (error) {\n      dispatch(walletConnectorActions.resetWalletConnector());\n      // console.log(error);\n      toast.error((error === null || error === void 0 ? void 0 : error.message) || \"Error connecting wallet\");\n    }\n    // eslint-disable-next-line\n  }, [error]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(WalletConnectView, {\n      ...WalletConnectViewProps,\n      prefix: {\n        ...(isConnecting ? /*#__PURE__*/_jsxDEV(AiOutlineLoading3Quarters, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 15\n        }, this) : !isConnected ? /*#__PURE__*/_jsxDEV(VscDebugDisconnect, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(AiOutlineDisconnect, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 15\n        }, this))\n      },\n      title: isConnecting ? \"Connecting...\" : !isConnected ? \"Connect\" : \"Disconnect\",\n      disabled: isConnecting,\n      onClick: () => {\n        openWalletSelectorDialog();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WalletConnectModal, {\n      show: showWalletDialog,\n      metaMaskClickEvent: () => {\n        connectMetaMask();\n      },\n      onHide: () => setShowWalletDialog(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(WalletConnector, \"d2gliR5H068l5LK9h0LYvry6vlM=\", false, function () {\n  return [useSelector, useDispatch, useWeb3React, useSelector, useSelector];\n});\n_c = WalletConnector;\nvar _c;\n$RefreshReg$(_c, \"WalletConnector\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useDispatch","walletConnectorActions","useWeb3React","injected","AiOutlineDisconnect","AiOutlineLoading3Quarters","VscDebugDisconnect","toast","walletAuthenticatorActions","WalletConnector","WalletConnectView","WalletConnectModal","WalletConnectViewProps","showWalletDialog","setShowWalletDialog","reconnect","setReconnect","networkClient","setNetworkClient","undefined","state","console","log","dispatch","active","activate","deactivate","library","account","chainId","error","isConnected","isConnecting","currentWalletNetwork","walletAddress","walletConnector","applicationUserToken","walletAuthenticator","isAuthorized","then","catch","connectWallet","reconnectWallet","eth","getBalance","toString","balance","walletConnected","currentWallet","err","resetWalletConnector","openWalletSelectorDialog","resetWalletAuthentication","userToken","removeSession","connectMetaMask","message","prefix","title","disabled"],"sources":["/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-connector/wallet-connector.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { WalletConnectorProps } from \"./walletConnectorInterfaces\";\nimport { walletConnectorActions } from \".\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"./web3React/connectors\";\nimport Web3 from \"web3\";\nimport { RootState } from \"../../../redux/rootReducer\";\nimport { AiOutlineDisconnect, AiOutlineLoading3Quarters } from \"react-icons/ai\";\nimport { VscDebugDisconnect } from \"react-icons/vsc\";\nimport toast from \"react-hot-toast\";\n// import { WalletAuthencationOnSignIn } from \"../../components/common/wallet-authentication/WalletAuthenticationSignIn\";\nimport * as walletAuthenticatorActions from \"./walletAuthenticationActions\";\n\nexport const WalletConnector = ({\n  WalletConnectView,\n  WalletConnectModal, \n  WalletConnectViewProps,\n}: WalletConnectorProps) => {\n  const [showWalletDialog, setShowWalletDialog] = useState<boolean>(false);\n  const [reconnect, setReconnect] = useState<boolean>(false);\n  const [networkClient, setNetworkClient] = useState<Web3 | undefined>(\n    undefined\n  );\n  const state =  useSelector((state: RootState) => state);\n  console.log(state);\n\n  const dispatch = useDispatch();\n  const { active, activate, deactivate, library, account, chainId, error } =\n    useWeb3React();\n  const { isConnected, isConnecting, currentWalletNetwork, walletAddress } =\n    useSelector((state: RootState) => state.walletConnector);\n  const {\n    // nonce,\n    applicationUserToken,\n    //  signature, isAllowedonGateway, allowedNetworksonGateway, getSignatureFromMetamask, tokenV2, meV2\n  } = useSelector((state: RootState) => state.walletAuthenticator);\n\n  \n  useEffect(() => {\n    if (\n      account &&\n      walletAddress &&\n      walletAddress !== account &&\n      isConnected &&\n      active\n    ) {\n      // console.log(\"Account Changed reconnect wallet\");\n      activate(injected);\n      setReconnect(true);\n    }\n    // eslint-disable-next-line\n  }, [walletAddress, account, isConnected, active]);\n\n  useEffect(() => {\n    injected\n      .isAuthorized()\n      .then((isAuthorized) => {\n        // console.log(isAuthorized, active, \"isAuthorized\");\n        if (isAuthorized && !active && !error && isConnected) {\n          activate(injected);\n        }\n      })\n      .catch(() => {});\n    // eslint-disable-next-line\n  }, [activate, active, error, isConnected]);\n\n  useEffect(() => {\n    if (\n      chainId &&\n      currentWalletNetwork &&\n      currentWalletNetwork !== chainId &&\n      isConnected &&\n      active\n    ) {\n      // console.log(\"Chain Changed reconnect wallet\");\n      activate(injected);\n      setReconnect(true);\n    }\n    // eslint-disable-next-line\n  }, [currentWalletNetwork, chainId, isConnected, active]);\n\n  useEffect(() => {\n    if (active && !isConnected && library && !networkClient) {\n      // console.log(\"web3 react connect set network client\");\n      dispatch(walletConnectorActions.connectWallet());\n      setNetworkClient(library);\n    }\n    if (!active && isConnected && !library && !isConnecting) {\n      // console.log(\"connected in currenct browser session reconnect wallet\");\n      activate(injected);\n      setReconnect(true);\n    }\n    // eslint-disable-next-line\n  }, [isConnected, active, library, isConnecting, networkClient]);\n\n  useEffect(() => {\n    if (reconnect && active) {\n      // console.log(\n      //   \"reconnect called and web3 is active again reset network client to set again\"\n      // );\n      dispatch(walletConnectorActions.reconnectWallet());\n      setNetworkClient(undefined);\n      setReconnect(false);\n    }\n    // eslint-disable-next-line\n  }, [reconnect, active]);\n\n  useEffect(() => {\n    if (\n      active &&\n      networkClient &&\n      library &&\n      !isConnected &&\n      account &&\n      chainId &&\n      isConnecting\n    ) {\n      // console.log(\n      //   \"network client is set, web3 react is also active test by fetching account balance\"\n      // );\n      networkClient.eth\n        .getBalance(account?.toString())\n        .then((balance: String) => {\n          // console.log(\n          //   \"newtork ping completed successfully update redux with wallet and network client information\",\n          //   balance,\n          //   account?.toString()\n          // );\n          dispatch(\n            walletConnectorActions.walletConnected({\n              chainId,\n              account,\n              balance,\n              currentWallet: undefined,\n              networkClient,\n            })\n          );\n        })\n        .catch((err) => {\n          // console.log(\"newtork ping failed reset wallet state\");\n          // console.log(err, \" : error connecting wallet\");\n          toast.error(err || \"Error connecting wallet\");\n          dispatch(walletConnectorActions.resetWalletConnector());\n        });\n    }\n    // eslint-disable-next-line\n  }, [\n    networkClient,\n    library,\n    isConnected,\n    active,\n    account,\n    chainId,\n    isConnecting,\n  ]);\n\n  const openWalletSelectorDialog = () => {\n    // console.log(\"open wallet selector to connect\");\n    if (!isConnecting) {\n      if (!isConnected) {\n        setShowWalletDialog(true);\n      } else {\n        // console.log(\"wallet is already connect disconnect wallet\");\n        dispatch(walletConnectorActions.resetWalletConnector());\n        dispatch(\n          walletAuthenticatorActions.resetWalletAuthentication({\n            userToken: applicationUserToken,\n          })\n        );\n        dispatch(\n          walletAuthenticatorActions.removeSession({\n            userToken: applicationUserToken,\n          })\n        );\n        setNetworkClient(undefined);\n        deactivate();\n      }\n    } else {\n      // console.log(\"wallet is already in connect state\");\n    }\n  };\n\n  // // console.log(isConnecting, \"isConnecting\");\n  // // console.log(isConnected, \"isConnected\");\n  // // console.log(active, \"active\");\n  // // console.log(library, \"library\");\n  // // console.log(networkClient, \"networkClient\");\n  // // console.log(walletAddress, \"walletAddress\");\n  // // console.log(account, \"account\");\n  // // console.log(walletAddress === account);\n  // // console.log(chainId, \"chainId\");\n  // // console.log(currentWalletNetwork, \"currentWalletNetwork\");\n  // // console.log(currentWalletNetwork === chainId);\n  // // console.log(error);\n\n  const connectMetaMask = () => {\n    if (isConnected) {\n      // console.log(\"wallet is already connect disconnect wallet\");\n      dispatch(walletConnectorActions.resetWalletConnector());\n      setNetworkClient(undefined);\n      deactivate();\n    } else {\n      // console.log(\"intialize web3 wallet connect for meta mask\");\n      activate(injected);\n      setShowWalletDialog(false);\n      setNetworkClient(undefined);\n    }\n  };\n\n  useEffect(() => {\n    if (error) {\n      dispatch(walletConnectorActions.resetWalletConnector());\n      // console.log(error);\n      toast.error(error?.message || \"Error connecting wallet\");\n    }\n    // eslint-disable-next-line\n  }, [error]);\n\n  return (\n    <>\n      <WalletConnectView\n        {...{\n          ...WalletConnectViewProps,\n          prefix: {\n            ...(isConnecting ? (\n              <AiOutlineLoading3Quarters />\n            ) : !isConnected ? (\n              <VscDebugDisconnect />\n            ) : (\n              <AiOutlineDisconnect />\n            )),\n          },\n\n          title: isConnecting\n            ? \"Connecting...\"\n            : !isConnected\n            ? \"Connect\"\n            : \"Disconnect\",\n          disabled: isConnecting,\n        }}\n        onClick={() => {\n          openWalletSelectorDialog();\n        }}\n      />\n      <WalletConnectModal\n        show={showWalletDialog}\n        metaMaskClickEvent={() => {\n          connectMetaMask();\n        }}\n        onHide={() => setShowWalletDialog(false)}\n      />\n      {/* { isAuthenticationNeeded && <WalletAuthencationOnSignIn account={account} networkClient={networkClient} isAuthenticationNeeded={isAuthenticationNeeded} /> } */}\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}