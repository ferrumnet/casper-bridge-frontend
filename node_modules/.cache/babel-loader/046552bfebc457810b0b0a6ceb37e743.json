{"ast":null,"code":"import { applicationWrapperSlice } from \"./walletApplicationWrapperSlice\";\n// import * as serverRequest from \"../../../common-client/axiosApiClient\";\n// import { getFilteredAssets } from \"../walletApplicationWrapperHelper\";\nconst {\n  actions\n} = applicationWrapperSlice;\n\n// export const loadWalletDefaults =\n//   (groupId: any, existingTokenList: Array<any>) => async (dispatch: any) => {\n//     //load bridge group info\n//     const groupInfo = await serverRequest.loadGroupInfo(groupId);\n\n//     //load bridge global token listing\n//     const tokenList = existingTokenList?.length\n//       ? existingTokenList\n//       : await serverRequest.getTokenList();\n\n//     //load bridge group currencies token configuration\n//     const currencyPairs = await serverRequest.getTokenConfigsForGroup(\n//       groupInfo?.bridgeCurrencies\n//     );\n\n//     //calculate filtered listing\n//     const filteredAssets = getFilteredAssets(\n//       tokenList,\n//       groupInfo?.bridgeCurrencies\n//     );\n\n//     const supportedNetworks = groupInfo?.bridgeCurrencies.map(\n//       (c: any) => c.split(\":\")[0]\n//     );\n\n//     const supportedCurrencies = groupInfo.bridgeCurrencies.map(\n//       (c: any) => c.split(\":\")[1]\n//     );\n\n//     dispatch(\n//       actions.walletApplicationDefaultsLoaded({\n//         groupInfo,\n//         tokenList,\n//         currencyPairs,\n//         filteredAssets,\n//         supportedNetworks,\n//         supportedCurrencies,\n//       })\n//     );\n//   };\n\nexport const loadUserProfileDetails = () => async dispatch => {\n  // const [client, connect, currencyList, api, provider] =\n  //       inject5<UnifyreExtensionWeb3Client, Connect, CurrencyList, ApiClient, Web3ModalProvider>(\n  //           UnifyreExtensionWeb3Client, Connect, CurrencyList, ApiClient, 'Web3ModalProvider');\n  // connect.setProvider(provider);\n  // const net = await connect.getProvider()!.netId();\n  // console.log(net);\n};\n\n// export const getUserProfile = (userProfile: any) => async (dispatch: any) => {\n//   const authToken = await serverRequest.signInToServer(userProfile.userId);\n//   console.log(\"sign to server successfull user token authToken : \", authToken);\n//   // console.log({ userProfile, authToken });\n//   dispatch(actions.walletApplicationUser({ userProfile, authToken }));\n// };\n\nexport const resetUserProfile = () => async dispatch => {\n  dispatch(actions.resetWalletApplicationUser());\n};\nexport const swapToAndFromToken = toAndFromTokens => async dispatch => {\n  dispatch(actions.swapToAndFromToken(toAndFromTokens));\n};\nexport const updateToInfo = toInfo => async dispatch => {\n  dispatch(actions.updateToInfo(toInfo));\n};\nexport const updateFromInfo = fromInfo => async dispatch => {\n  dispatch(actions.updateFromInfo(fromInfo));\n};\n\n// export const getAvailableLiquidity =\n//   (targetNetwork: string, targetCurrency: string, authToken: string) =>\n//   async (dispatch: any) => {\n//     await serverRequest\n//       .getAvailableLiquidity(targetNetwork, targetCurrency, authToken)\n//       .then((response: any) => {\n//         dispatch(actions.availableLiquidity({ availableLiquidity: response }));\n//       })\n//       .catch((err: any) => {\n//         console.log(err);\n//       });\n//   };\n\nexport const updateAmount = amount => async dispatch => {\n  dispatch(actions.updateAmount({\n    amount\n  }));\n};\nexport const updateFee = fee => async dispatch => {\n  dispatch(actions.updateFee({\n    fee\n  }));\n};\nexport const updateMaxBalance = maxBalance => async dispatch => {\n  dispatch(actions.updateMaxBalance({\n    maxBalance\n  }));\n};\n\n// export const getNetworkTransactions = () => async (dispatch: any) => {\n//   const transactionResponse = await serverRequest.getNetworkTransactions();\n//   dispatch(\n//     actions.getNetworkTransactions({\n//       networkTransactions: transactionResponse.data,\n//     })\n//   );\n// };","map":{"version":3,"names":["applicationWrapperSlice","actions","loadUserProfileDetails","dispatch","resetUserProfile","resetWalletApplicationUser","swapToAndFromToken","toAndFromTokens","updateToInfo","toInfo","updateFromInfo","fromInfo","updateAmount","amount","updateFee","fee","updateMaxBalance","maxBalance"],"sources":["/Users/kabiribraheem/Documents/casper-bridge-frontend/src/components/connector/wallet-application-wrapper/redux/walletApplicationWrapperActions.ts"],"sourcesContent":["import { applicationWrapperSlice } from \"./walletApplicationWrapperSlice\";\n// import * as serverRequest from \"../../../common-client/axiosApiClient\";\n// import { getFilteredAssets } from \"../walletApplicationWrapperHelper\";\nconst { actions } = applicationWrapperSlice;\n\n// export const loadWalletDefaults =\n//   (groupId: any, existingTokenList: Array<any>) => async (dispatch: any) => {\n//     //load bridge group info\n//     const groupInfo = await serverRequest.loadGroupInfo(groupId);\n\n//     //load bridge global token listing\n//     const tokenList = existingTokenList?.length\n//       ? existingTokenList\n//       : await serverRequest.getTokenList();\n\n//     //load bridge group currencies token configuration\n//     const currencyPairs = await serverRequest.getTokenConfigsForGroup(\n//       groupInfo?.bridgeCurrencies\n//     );\n\n//     //calculate filtered listing\n//     const filteredAssets = getFilteredAssets(\n//       tokenList,\n//       groupInfo?.bridgeCurrencies\n//     );\n\n//     const supportedNetworks = groupInfo?.bridgeCurrencies.map(\n//       (c: any) => c.split(\":\")[0]\n//     );\n\n//     const supportedCurrencies = groupInfo.bridgeCurrencies.map(\n//       (c: any) => c.split(\":\")[1]\n//     );\n\n//     dispatch(\n//       actions.walletApplicationDefaultsLoaded({\n//         groupInfo,\n//         tokenList,\n//         currencyPairs,\n//         filteredAssets,\n//         supportedNetworks,\n//         supportedCurrencies,\n//       })\n//     );\n//   };\n\nexport const loadUserProfileDetails = () => async (dispatch: any) => {\n  // const [client, connect, currencyList, api, provider] =\n  //       inject5<UnifyreExtensionWeb3Client, Connect, CurrencyList, ApiClient, Web3ModalProvider>(\n  //           UnifyreExtensionWeb3Client, Connect, CurrencyList, ApiClient, 'Web3ModalProvider');\n  // connect.setProvider(provider);\n  // const net = await connect.getProvider()!.netId();\n  // console.log(net);\n};\n\n// export const getUserProfile = (userProfile: any) => async (dispatch: any) => {\n//   const authToken = await serverRequest.signInToServer(userProfile.userId);\n//   console.log(\"sign to server successfull user token authToken : \", authToken);\n//   // console.log({ userProfile, authToken });\n//   dispatch(actions.walletApplicationUser({ userProfile, authToken }));\n// };\n\nexport const resetUserProfile = () => async (dispatch: any) => {\n  dispatch(actions.resetWalletApplicationUser());\n};\n\nexport const swapToAndFromToken = (toAndFromTokens: any) => async (dispatch: any) => {\n  dispatch(actions.swapToAndFromToken(toAndFromTokens));\n};\n\nexport const updateToInfo = (toInfo: any) => async (dispatch: any) => {\n  dispatch(actions.updateToInfo(toInfo));\n};\n\nexport const updateFromInfo = (fromInfo: any) => async (dispatch: any) => {\n  dispatch(actions.updateFromInfo(fromInfo));\n};\n\n// export const getAvailableLiquidity =\n//   (targetNetwork: string, targetCurrency: string, authToken: string) =>\n//   async (dispatch: any) => {\n//     await serverRequest\n//       .getAvailableLiquidity(targetNetwork, targetCurrency, authToken)\n//       .then((response: any) => {\n//         dispatch(actions.availableLiquidity({ availableLiquidity: response }));\n//       })\n//       .catch((err: any) => {\n//         console.log(err);\n//       });\n//   };\n\nexport const updateAmount = (amount: any) => async (dispatch: any) => {\n  dispatch(actions.updateAmount({ amount }));\n};\n\nexport const updateFee = (fee: any) => async (dispatch: any) => {\n  dispatch(actions.updateFee({ fee }));\n};\n\nexport const updateMaxBalance = (maxBalance: any) => async (dispatch: any) => {\n  dispatch(actions.updateMaxBalance({ maxBalance }));\n};\n\n// export const getNetworkTransactions = () => async (dispatch: any) => {\n//   const transactionResponse = await serverRequest.getNetworkTransactions();\n//   dispatch(\n//     actions.getNetworkTransactions({\n//       networkTransactions: transactionResponse.data,\n//     })\n//   );\n// };\n"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,iCAAiC;AACzE;AACA;AACA,MAAM;EAAEC;AAAQ,CAAC,GAAGD,uBAAuB;;AAE3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAME,sBAAsB,GAAG,MAAM,MAAOC,QAAa,IAAK;EACnE;EACA;EACA;EACA;EACA;EACA;AAAA,CACD;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAM,MAAOD,QAAa,IAAK;EAC7DA,QAAQ,CAACF,OAAO,CAACI,0BAA0B,EAAE,CAAC;AAChD,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAIC,eAAoB,IAAK,MAAOJ,QAAa,IAAK;EACnFA,QAAQ,CAACF,OAAO,CAACK,kBAAkB,CAACC,eAAe,CAAC,CAAC;AACvD,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIC,MAAW,IAAK,MAAON,QAAa,IAAK;EACpEA,QAAQ,CAACF,OAAO,CAACO,YAAY,CAACC,MAAM,CAAC,CAAC;AACxC,CAAC;AAED,OAAO,MAAMC,cAAc,GAAIC,QAAa,IAAK,MAAOR,QAAa,IAAK;EACxEA,QAAQ,CAACF,OAAO,CAACS,cAAc,CAACC,QAAQ,CAAC,CAAC;AAC5C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAIC,MAAW,IAAK,MAAOV,QAAa,IAAK;EACpEA,QAAQ,CAACF,OAAO,CAACW,YAAY,CAAC;IAAEC;EAAO,CAAC,CAAC,CAAC;AAC5C,CAAC;AAED,OAAO,MAAMC,SAAS,GAAIC,GAAQ,IAAK,MAAOZ,QAAa,IAAK;EAC9DA,QAAQ,CAACF,OAAO,CAACa,SAAS,CAAC;IAAEC;EAAI,CAAC,CAAC,CAAC;AACtC,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAIC,UAAe,IAAK,MAAOd,QAAa,IAAK;EAC5EA,QAAQ,CAACF,OAAO,CAACe,gBAAgB,CAAC;IAAEC;EAAW,CAAC,CAAC,CAAC;AACpD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}