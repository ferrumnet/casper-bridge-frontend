{"ast":null,"code":"import moment from \"moment\";\nexport const getMaturityInfo = (wsd, wed) => {\n  const maturityAt = moment(wed, \"YYYY-MM-DD HH:mm:ss.SSSS\");\n  // const earlyWithdrawDate = moment(wsd, \"YYYY-MM-DD HH:mm:ss.SSSS\");\n  var stillUtc = moment.utc(moment.utc(wsd).format(\"YYYY-MM-DD HH:mm:ss Z\")).toDate();\n  // console.log(moment(stillUtc).local().format(\"YYYY-MM-DD HH:mm:ss\")); // UTC to Local\n  // console.log({ maturityAt, wsd });\n  // maturityAt.add(1, \"minutes\");\n\n  const now = moment(new Date(), \"YYYY-MM-DD HH:mm:ss.SSSS\");\n  let toReturn = {\n    maturityAt: maturityAt.format(\"DD MMMM YYYY HH:mm:ss\"),\n    minutes: 0,\n    hours: 0,\n    days: 0,\n    months: 0,\n    earlyWithdrawDate: moment(stillUtc).local().format(\"YYYY-MM-DD HH:mm:ss\")\n  };\n  if (now.isBefore(maturityAt)) {\n    const months = moment.duration(maturityAt.diff(now)).asMonths();\n    const days = moment.duration(maturityAt.diff(now)).asDays();\n    const hours = moment.duration(maturityAt.diff(now)).asHours();\n    const minutes = moment.duration(maturityAt.diff(now)).asMinutes();\n\n    // console.log(months, days, hours, minutes % 60);\n\n    if (minutes % 60 > 0) {\n      toReturn.minutes = Math.round(minutes % 60);\n    }\n    if (hours % 24 > 0 && hours % 24 < 24) {\n      toReturn.hours = Math.round(hours % 24);\n    }\n    if (days % 30 > 0 && days % 30 < 30) {\n      toReturn.days = Math.round(days % 24);\n    }\n    toReturn.months = Math.round(months);\n  }\n  return toReturn;\n};\nexport const getStakingInfo = (sed, ssd, wsd, wed) => {\n  let start = moment(sed, \"YYYY-MM-DD HH:mm:ss.SSSS\");\n  let end = moment(new Date(), \"YYYY-MM-DD HH:mm:ss.SSSS\");\n  const months = moment.duration(start.diff(end)).asMonths();\n  const days = moment.duration(start.diff(end)).asDays();\n  const hours = moment.duration(start.diff(end)).asHours();\n  const minutes = moment.duration(start.diff(end)).asMinutes();\n  let toReturn = {\n    isStakingOpen: false,\n    stakingClosesIn: \"\",\n    isLockPeriod: false,\n    lockPeriod: \"\",\n    stakingOpensIn: \"\",\n    isWithdrawOpen: false,\n    isEarlyWithdraw: false\n  };\n  if (minutes < 60) {\n    toReturn.stakingClosesIn = minutes > 1 ? Math.round(minutes) + \" MINUTES\" : Math.round(minutes) + \" MINUTE\";\n  } else if (hours < 24) {\n    toReturn.stakingClosesIn = hours > 1 ? Math.round(hours) + \" HOURS\" : Math.round(hours) + \" HOUR\";\n  } else if (days < 30) {\n    toReturn.stakingClosesIn = days > 1 ? Math.round(days) + \" DAYS\" : Math.round(days) + \" DAY\";\n  } else {\n    toReturn.stakingClosesIn = months > 1 ? Math.round(months) + \" MONTHS\" : Math.round(minutes) + \" MONTH\";\n  }\n  const stakeStart = moment(ssd, \"YYYY-MM-DD HH:mm:ss.SSSS\");\n  const stakeEnd = moment(sed, \"YYYY-MM-DD HH:mm:ss.SSSS\");\n  const withdrawStart = moment(wsd, \"YYYY-MM-DD HH:mm:ss.SSSS\");\n  const withdrawEnd = moment(wed, \"YYYY-MM-DD HH:mm:ss.SSSS\");\n  const now = moment(new Date(), \"YYYY-MM-DD HH:mm:ss.SSSS\");\n\n  //   console.log(now.isAfter(stakeStart) && now.isBefore(stakeEnd));\n\n  if (now.isAfter(stakeStart) && now.isBefore(stakeEnd)) {\n    toReturn.isStakingOpen = true;\n  }\n  if (now.isBefore(stakeStart)) {\n    const months2 = moment.duration(stakeStart.diff(now)).asMonths();\n    const days2 = moment.duration(stakeStart.diff(now)).asDays();\n    const hours2 = moment.duration(stakeStart.diff(now)).asHours();\n    const minutes2 = moment.duration(stakeStart.diff(now)).asMinutes();\n\n    // console.log(months2, days2, hours2, minutes2);\n    if (minutes2 < 60) {\n      toReturn.stakingOpensIn = hours2 > 1 ? Math.round(minutes2) + \" MINUTES\" : Math.round(minutes2) + \" MINUTE\";\n    } else if (hours2 < 24) {\n      toReturn.stakingOpensIn = hours2 > 1 ? Math.round(hours2) + \" HOURS\" : Math.round(hours2) + \" HOUR\";\n    } else if (days2 < 30) {\n      toReturn.stakingOpensIn = days2 > 1 ? Math.round(days2) + \" DAYS\" : Math.round(days2) + \" DAY\";\n    } else {\n      toReturn.stakingOpensIn = months2 > 1 ? Math.round(months2) + \" MONTHS\" : Math.round(months2) + \" MONTH\";\n    }\n  }\n  if (now.isAfter(stakeEnd) && now.isBefore(withdrawStart)) {\n    toReturn.isLockPeriod = true;\n    const months1 = moment.duration(withdrawStart.diff(now)).asMonths();\n    const days1 = moment.duration(withdrawStart.diff(now)).asDays();\n    const hours1 = moment.duration(withdrawStart.diff(now)).asHours();\n    const minutes1 = moment.duration(withdrawStart.diff(now)).asMinutes();\n    if (minutes < 60) {\n      toReturn.lockPeriod = minutes1 > 1 ? Math.round(minutes1) + \" MINUTES\" : Math.round(minutes1) + \" MINUTE(S)\";\n    } else if (hours < 24) {\n      toReturn.lockPeriod = hours1 > 1 ? Math.round(hours1) + \" HOURS\" : Math.round(hours1) + \" HOUR\";\n    } else if (days < 30) {\n      toReturn.lockPeriod = days1 > 1 ? Math.round(days1) + \" DAYS\" : Math.round(days1) + \" DAY\";\n    } else {\n      toReturn.lockPeriod = months1 > 1 ? Math.round(months1) + \" MONTHS\" : Math.round(minutes1) + \" MONTH\";\n    }\n  }\n  if (now.isAfter(withdrawEnd)) {\n    toReturn.isWithdrawOpen = true;\n  }\n  if (now.isAfter(withdrawStart) && now.isBefore(withdrawEnd)) {\n    toReturn.isEarlyWithdraw = true;\n  }\n  return toReturn;\n};","map":{"version":3,"names":["moment","getMaturityInfo","wsd","wed","maturityAt","stillUtc","utc","format","toDate","now","Date","toReturn","minutes","hours","days","months","earlyWithdrawDate","local","isBefore","duration","diff","asMonths","asDays","asHours","asMinutes","Math","round","getStakingInfo","sed","ssd","start","end","isStakingOpen","stakingClosesIn","isLockPeriod","lockPeriod","stakingOpensIn","isWithdrawOpen","isEarlyWithdraw","stakeStart","stakeEnd","withdrawStart","withdrawEnd","isAfter","months2","days2","hours2","minutes2","months1","days1","hours1","minutes1"],"sources":["/Users/kabiribraheem/Documents/staking-casper-frontend/src/utils/DateUtil.ts"],"sourcesContent":["import moment from \"moment\";\n\nexport const getMaturityInfo = (wsd: any, wed: any) => {\n  const maturityAt = moment(wed, \"YYYY-MM-DD HH:mm:ss.SSSS\");\n  // const earlyWithdrawDate = moment(wsd, \"YYYY-MM-DD HH:mm:ss.SSSS\");\n  var stillUtc = moment\n    .utc(moment.utc(wsd).format(\"YYYY-MM-DD HH:mm:ss Z\"))\n    .toDate();\n  // console.log(moment(stillUtc).local().format(\"YYYY-MM-DD HH:mm:ss\")); // UTC to Local\n  // console.log({ maturityAt, wsd });\n  // maturityAt.add(1, \"minutes\");\n\n  const now = moment(new Date(), \"YYYY-MM-DD HH:mm:ss.SSSS\");\n\n  let toReturn = {\n    maturityAt: maturityAt.format(\"DD MMMM YYYY HH:mm:ss\"),\n    minutes: 0,\n    hours: 0,\n    days: 0,\n    months: 0,\n    earlyWithdrawDate: moment(stillUtc).local().format(\"YYYY-MM-DD HH:mm:ss\"),\n  };\n\n  if (now.isBefore(maturityAt)) {\n    const months = moment.duration(maturityAt.diff(now)).asMonths();\n    const days = moment.duration(maturityAt.diff(now)).asDays();\n    const hours = moment.duration(maturityAt.diff(now)).asHours();\n    const minutes = moment.duration(maturityAt.diff(now)).asMinutes();\n\n    // console.log(months, days, hours, minutes % 60);\n\n    if (minutes % 60 > 0) {\n      toReturn.minutes = Math.round(minutes % 60);\n    }\n\n    if (hours % 24 > 0 && hours % 24 < 24) {\n      toReturn.hours = Math.round(hours % 24);\n    }\n\n    if (days % 30 > 0 && days % 30 < 30) {\n      toReturn.days = Math.round(days % 24);\n    }\n\n    toReturn.months = Math.round(months);\n  }\n\n  return toReturn;\n};\n\nexport const getStakingInfo = (sed: any, ssd: any, wsd: any, wed: any) => {\n  let start = moment(sed, \"YYYY-MM-DD HH:mm:ss.SSSS\");\n  let end = moment(new Date(), \"YYYY-MM-DD HH:mm:ss.SSSS\");\n\n  const months = moment.duration(start.diff(end)).asMonths();\n  const days = moment.duration(start.diff(end)).asDays();\n  const hours = moment.duration(start.diff(end)).asHours();\n  const minutes = moment.duration(start.diff(end)).asMinutes();\n  let toReturn = {\n    isStakingOpen: false,\n    stakingClosesIn: \"\",\n    isLockPeriod: false,\n    lockPeriod: \"\",\n    stakingOpensIn: \"\",\n    isWithdrawOpen: false,\n    isEarlyWithdraw: false,\n  };\n\n  if (minutes < 60) {\n    toReturn.stakingClosesIn =\n      minutes > 1\n        ? Math.round(minutes) + \" MINUTES\"\n        : Math.round(minutes) + \" MINUTE\";\n  } else if (hours < 24) {\n    toReturn.stakingClosesIn =\n      hours > 1 ? Math.round(hours) + \" HOURS\" : Math.round(hours) + \" HOUR\";\n  } else if (days < 30) {\n    toReturn.stakingClosesIn =\n      days > 1 ? Math.round(days) + \" DAYS\" : Math.round(days) + \" DAY\";\n  } else {\n    toReturn.stakingClosesIn =\n      months > 1\n        ? Math.round(months) + \" MONTHS\"\n        : Math.round(minutes) + \" MONTH\";\n  }\n\n  const stakeStart = moment(ssd, \"YYYY-MM-DD HH:mm:ss.SSSS\");\n  const stakeEnd = moment(sed, \"YYYY-MM-DD HH:mm:ss.SSSS\");\n\n  const withdrawStart = moment(wsd, \"YYYY-MM-DD HH:mm:ss.SSSS\");\n\n  const withdrawEnd = moment(wed, \"YYYY-MM-DD HH:mm:ss.SSSS\");\n  const now = moment(new Date(), \"YYYY-MM-DD HH:mm:ss.SSSS\");\n\n  //   console.log(now.isAfter(stakeStart) && now.isBefore(stakeEnd));\n\n  if (now.isAfter(stakeStart) && now.isBefore(stakeEnd)) {\n    toReturn.isStakingOpen = true;\n  }\n\n  if (now.isBefore(stakeStart)) {\n    const months2 = moment.duration(stakeStart.diff(now)).asMonths();\n    const days2 = moment.duration(stakeStart.diff(now)).asDays();\n    const hours2 = moment.duration(stakeStart.diff(now)).asHours();\n    const minutes2 = moment.duration(stakeStart.diff(now)).asMinutes();\n\n    // console.log(months2, days2, hours2, minutes2);\n    if (minutes2 < 60) {\n      toReturn.stakingOpensIn =\n        hours2 > 1\n          ? Math.round(minutes2) + \" MINUTES\"\n          : Math.round(minutes2) + \" MINUTE\";\n    } else if (hours2 < 24) {\n      toReturn.stakingOpensIn =\n        hours2 > 1\n          ? Math.round(hours2) + \" HOURS\"\n          : Math.round(hours2) + \" HOUR\";\n    } else if (days2 < 30) {\n      toReturn.stakingOpensIn =\n        days2 > 1 ? Math.round(days2) + \" DAYS\" : Math.round(days2) + \" DAY\";\n    } else {\n      toReturn.stakingOpensIn =\n        months2 > 1\n          ? Math.round(months2) + \" MONTHS\"\n          : Math.round(months2) + \" MONTH\";\n    }\n  }\n\n  if (now.isAfter(stakeEnd) && now.isBefore(withdrawStart)) {\n    toReturn.isLockPeriod = true;\n\n    const months1 = moment.duration(withdrawStart.diff(now)).asMonths();\n    const days1 = moment.duration(withdrawStart.diff(now)).asDays();\n    const hours1 = moment.duration(withdrawStart.diff(now)).asHours();\n    const minutes1 = moment.duration(withdrawStart.diff(now)).asMinutes();\n\n    if (minutes < 60) {\n      toReturn.lockPeriod =\n        minutes1 > 1\n          ? Math.round(minutes1) + \" MINUTES\"\n          : Math.round(minutes1) + \" MINUTE(S)\";\n    } else if (hours < 24) {\n      toReturn.lockPeriod =\n        hours1 > 1\n          ? Math.round(hours1) + \" HOURS\"\n          : Math.round(hours1) + \" HOUR\";\n    } else if (days < 30) {\n      toReturn.lockPeriod =\n        days1 > 1 ? Math.round(days1) + \" DAYS\" : Math.round(days1) + \" DAY\";\n    } else {\n      toReturn.lockPeriod =\n        months1 > 1\n          ? Math.round(months1) + \" MONTHS\"\n          : Math.round(minutes1) + \" MONTH\";\n    }\n  }\n\n  if (now.isAfter(withdrawEnd)) {\n    toReturn.isWithdrawOpen = true;\n  }\n\n  if (now.isAfter(withdrawStart) && now.isBefore(withdrawEnd)) {\n    toReturn.isEarlyWithdraw = true;\n  }\n\n  return toReturn;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}