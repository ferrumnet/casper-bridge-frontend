{"version":3,"sources":["assets/images/casper.svg","components/connector/wallet-connector/walletConnectorInterfaces.ts","assets/images/logo-light.svg","redux/casper/casperSlice.js","redux/casper/casperActions.js","dialogs/AddressSelector.tsx","assets/images/loading2.gif","dialogs/TxProcessingDialog.tsx","header/header.tsx","assets/images/loaderIcon.svg","assets/images/SuccessIcon.svg","assets/images/FailureIcon.svg","client/index.ts","dialogs/ConfirmationDialog.tsx","components/connector/wallet-connector/web3React/connectors.ts","components/connector/wallet-connector/WalletAuthenticationInterfaces.ts","components/connector/wallet-connector/walletAuthenticationSlice.ts","components/connector/wallet-connector/walletAuthenticationActions.ts","components/connector/wallet-connector/wallet-connector.tsx","components/connector/wallet-connector/redux/walletConnectorSlice.ts","components/connector/wallet-connector/redux/walletConnectorActions.ts","components/connector/wallet-application-wrapper/walletApplicationWrapperInterfaces.ts","components/connector/wallet-application-wrapper/redux/walletApplicationWrapperSlice.ts","components/connector/wallet-application-wrapper/redux/walletApplicationWrapperActions.ts","components/connector/wallet-application-wrapper/walletApplicationWrapper.tsx","assets/images/icon-metamask.svg","utils/connect-wallet/ConnectWalletDialog.tsx","utils/web3Helper.ts","pages/CasperSwap.tsx","utils/stringUtils.ts","components/Withdrawals.tsx","Routes.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["_style","_g","_excluded","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgCasper","_ref","svgRef","title","titleId","props","id","xmlns","xmlnsXlink","x","y","viewBox","style","enableBackground","xmlSpace","ref","type","className","d","WALLET_TYPES","ForwardRef","initialState","isWalletConnected","connectedAccounts","withdrawalItems","selectedAccount","undefined","shouldStake","isStaked","stakeTransaction","signedAddresses","stakeWithdrawSucess","config","tokenInfo","symbol","name","casperSlice","createSlice","reducers","connectWallet","state","action","payload","fetchWithdrawals","console","log","resetWallet","selectedAddress","selectAccount","setShouldStake","signed","staked","configLoaded","actions","dispatch","signedAddress","data","forEach","e","parsed","stakingTotal","staking_total","stakingEnds","moment","unix","staking_ends","format","stakingStarts","staking_starts","withdrawStarts","withdraw_starts","withdrawEnds","withdraw_ends","AddressSelector","show","onHide","onAccountSelect","variant","size","showClose","display","map","account","index","onClick","color","weight","address","TxProcessingDialog","message","src","Loader","width","RPC_API","casperService","CasperServiceByJsonRPC","Header","CasperClient","useDispatch","par","useParams","bridgePoolAddress","navigate","useHistory","connection","useSelector","casper","connect","useState","loading","setLoading","casperWalletInstance","showAddressSelectorDlg","setShowAddressSelectorDlg","getCasperWalletInstance","window","CasperWalletProvider","err","Error","requestConnection","isConnected","AccountInformation","disconnectWallet","disconnectFromSite","getActivePublicKey","publicKey","getLatestBlockInfo","latestBlock","getStateRootHash","block","hash","root","connectWalletDispatch","getAccountBalanceUrefByPublicKey","CLPublicKey","fromHex","balanceUref","getAccountBalance","header","state_root_hash","balance","toString","getDeployInfo","info","infoArguments","deploy","session","ModuleBytes","args","find","token","split","getBlockState","tokenName","tokenSymbol","CLValue","approvals","toast","error","showLogo","headerLogo","logo","align","alignY","push","prefix","btnInfo","text","crucibleApi","jwtToken","userAddress","axios","post","command","params","res","unsecureSession","headers","Authorization","ConfirmationDialog","transaction","amount","isSwap","processing","setProcessing","isSuccessful","setIsSuccessful","isDone","setIsDone","intervalId","setIntervalId","walletAddress","walletConnector","checkTransaction","execution_results","result","Failure","error_message","Success","Api","signInToServer","gatewayApi","receiveNetwork","sendAmount","sendAddress","sendNetwork","sendTimestamp","Date","now","sendCurrencyS","receiveCurrency","creator","logTransaction","useEffect","setInterval","clearInterval","LoaderGif","href","injected","InjectedConnector","supportedChainIds","defaultWalletAuthenticationState","nonce","signature","applicationUserToken","isAllowedonGateway","allowedNetworksonGateway","getSignatureFromMetamask","meV2","tokenV2","profileToken","currentNetworkInformation","initialWalletAUthenticationState","walletConnectorSlice","saveSignature","walletAuthenticator","saveNonce","saveApplicationUserToken","userToken","isAllowedOnGateway","saveME","saveToken","saveNetworkInformation","networkInformation","networkResponse","saveCommunityMemberProfileToken","resetWalletAuthentication","removeSession","WalletConnector","WalletConnectView","WalletConnectModal","WalletConnectViewProps","showWalletDialog","setShowWalletDialog","reconnect","setReconnect","networkClient","setNetworkClient","useWeb3React","active","activate","deactivate","library","chainId","isConnecting","currentWalletNetwork","isAuthorized","then","catch","walletConnectorActions","reconnectWallet","eth","getBalance","walletConnected","currentWallet","resetWalletConnector","openWalletSelectorDialog","walletAuthenticatorActions","disabled","metaMaskClickEvent","defaultWalletState","NONE","walletBalance","isWeb3Initialized","initialWalletConnectorState","catchWalletConnectError","userAccount","defaultWalletApplicationWrapper","groupInfo","supportedCurrencies","tokenList","supportedNetworks","currencyPairs","filteredAssets","userProfile","authToken","walletWrapperInitialized","fromInfo","toInfo","availableLiquidity","fee","maxBalance","networkTransactions","defaultWalletApplicationWrapperstate","applicationWrapperSlice","walletApplicationDefaultsLoaded","walletApplicationUser","resetWalletApplicationUser","swapToAndFromToken","updateToInfo","updateFromInfo","updateAmount","updateFee","updateMaxBalance","getNetworkTransactions","loadUserProfileDetails","resetUserProfile","toAndFromTokens","getLibrary","provider","Web3","ApplicationWrapper","children","walletApplicationWrapper","signIntoServer","applicationWrapperActions","getUserProfile","userTokens","filter","item","currentNetwork","currency","currencies","bridgeCurrencies","addressesF","c","network","tokenAddr","decimals","tokenContract","Contract","FerrumJson","abi","methods","balanceOf","decimalFactor","Number","Big","div","toFixed","toLocaleLowerCase","addressType","humanReadableAddress","pendingForDeposit","pendingForWithdrawal","addressWithChecksum","Promise","all","addresses","up","appId","displayName","userId","accountGroups","ConnectWalletDialog","IconMetaMask","alt","Web3Helper","web3","web3Client","transactions","txIds","tx","resolve","reject","sendTransaction","from","to","contract","value","gas","gasLimit","on","transactionHash","h","txId","join","JSON","stringify","casperClient","CasperSwap","setAmount","targetNetwork","targetToken","processMsg","setProcessMsg","showConfirmation","setShowConfirmation","targetCurrency","requests","helper","sendTransactionAsync","performSwap","publicKeyHex","senderPublicKey","deployParams","DeployUtil","DeployParams","RuntimeArgs","fromMap","CLValueBuilder","u256","string","ExecutableDeployItem","newStoredContractByHash","decodeBase16","payment","standardPayment","makeDeploy","deployJson","deployToJson","Signer","sign","signedDeployJson","signedDeploy","deployFromJson","ok","putDeploy","val","_id","alignX","label","placeholder","onChange","preventDefault","test","postfix","swapEvm","FButton","isAuthenticationNeeded","Networks","Withdrawals","fetchEvmWithdrawalItems","receiveAddress","userWithdrawals","withdrawableBalanceItems","performCasperWithdraw","body","sourceNetwork","withdrawEvm","tableBody","tableHeaders","prop","rowsPerPage","BaseRoutes","path","component","spacing","App","position","themeBuilder","FsiderLayoutState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","combineReducers","MetaMaskConnector","WalletApplicationWrapper","middleware","getDefaultMiddleware","concat","devTools","process","enhancers","reduxBatch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64f77559.chunk.js","sourcesContent":["var _style, _g;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgCasper(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 241 276.3\",\n    style: {\n      enableBackground: \"new 0 0 241 276.3\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _style || (_style = /*#__PURE__*/React.createElement(\"style\", {\n    type: \"text/css\"\n  }, \"\\n\\t.st0{fill:#FF473E;}\\n\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Page-1\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Path_3_\",\n    className: \"st0\",\n    d: \"M227.1,213.8c-6.6,0-12.2,4.6-13.6,11l-52.5-2.5c0.2-1,0.3-2,0.3-3c0-1.8-0.3-3.6-0.8-5.4 l19.1-11c4.7,5.8,13.2,7,19.3,2.6s7.7-12.8,3.6-19.1s-12.4-8.3-18.9-4.6s-9,11.9-5.6,18.6l-18.5,10.7c-4.4-9.3-15.3-13.5-24.8-9.6 s-14.3,14.6-10.9,24.3l-34.4,8.3c-0.2-4.7-2.2-9.1-5.5-12.5l6.2-8.6c7,2.4,14.7-1.1,17.5-8s-0.3-14.8-7-17.9 c-6.7-3.2-14.8-0.5-18.3,6c-3.5,6.5-1.3,14.7,5,18.6l-5.7,7.9c-4-3-9.1-4.3-14.1-3.7l-5.9-33.7c7.4-1.6,13.1-7.4,14.7-14.7 c1.6-7.4-1.2-15-7.2-19.5c-6-4.6-14.1-5.2-20.7-1.7l-14.9-29.1c3.2-1.6,5.8-4.1,7.7-7.1l12.4,3.3c-0.1,0.7-0.2,1.3-0.2,2 c0,7.2,5.5,13.3,12.7,14s13.8-4.2,15.1-11.4s-3-14.1-10-16c-7-2-14.3,1.7-16.9,8.5l-11.7-3.1c1.6-3.8,1.9-8,0.9-12L78,79.5 c6.4,8,18,9.7,26.4,3.7s10.6-17.5,5-26.1l22-21.5c2.7,1.7,5.8,2.8,8.9,3v9.5c-7.3,0.8-12.8,7.2-12.4,14.6s6.5,13.2,13.9,13.2 s13.5-5.8,13.9-13.2s-5-13.8-12.4-14.6v-9.5c2.8-0.2,5.4-1,7.8-2.3l24.1,27.5c-5.6,7.4-5.2,17.7,0.9,24.6 c6.2,6.9,16.4,8.5,24.4,3.7s11.4-14.5,8.3-23.2l7.5-4.2c4.8,5.6,13.1,6.6,19,2.1c5.9-4.4,7.3-12.7,3.2-18.8s-12.3-8-18.6-4.2 s-8.6,11.8-5.2,18.4l-7.1,4c-2.9-5.3-8.1-8.9-14-9.8c-5.9-0.9-12,1-16.3,5.2l-23.6-26.9c2.3-1.8,4.2-4.2,5.5-6.8l20.7,3.4 c1.6,7.2,8.6,11.9,15.8,10.6c7.3-1.2,12.3-7.9,11.5-15.2s-7.2-12.8-14.5-12.4c-7.4,0.4-13.1,6.4-13.2,13.8l-19.2-3.2 c2.7-9.2-1.7-19-10.4-23.1s-19-1.1-24.3,6.9s-3.9,18.7,3.3,25.1l-21.4,20.9c-3.3-3.8-8-6.2-13-6.6V33.5c7.3-0.8,12.8-7.2,12.4-14.6 S100.5,5.8,93.1,5.8S79.6,11.6,79.2,19s5,13.8,12.4,14.6v14.5C85,48.6,79.1,52.5,76,58.3c-3.1,5.9-3,12.9,0.3,18.7L42.7,92.4 c-1.2-2.9-3.1-5.4-5.5-7.4l13.1-23.6c1.2,0.3,2.3,0.5,3.5,0.5c7.1,0,13-5.3,13.9-12.3S64,36.1,57.2,34.4c-6.9-1.7-13.9,2-16.4,8.6 s0.4,14,6.6,17.3l-12.7,23C27,78.7,17.3,80,11,86.4c-6.2,6.4-7.3,16.1-2.6,23.7s13.9,11,22.4,8.3l15.1,29.5 c-3.8,2.8-6.5,7-7.4,11.6l-11-3.2c0.3-1.1,0.4-2.3,0.4-3.4c0-7.1-5.3-13-12.3-13.8s-13.5,3.7-15.2,10.6s2.1,13.9,8.8,16.3 c6.6,2.4,14-0.5,17.2-6.8l11.7,3.4c0,0.3,0,0.6,0,0.9c0,6.6,3.3,12.7,8.9,16.2l-7.5,9.8c-5.5-4.9-13.9-4.6-19.1,0.7 S15,203.8,20,209.3s13.3,6.1,19.1,1.4s6.8-13,2.5-19l8.1-10.6c2.4,1.1,5.1,1.6,7.8,1.6c0.4,0,0.8,0,1.2-0.1l6,33.9 c-8,2.4-13.6,9.7-13.9,18c-0.2,8.4,5,15.9,12.9,18.7c7.9,2.8,16.7,0.2,21.8-6.5l28,12.5c-0.2,1-0.4,2.1-0.4,3.1 c0,7.1,5.3,13.1,12.4,13.9c7.1,0.8,13.6-3.8,15.2-10.7c1.6-6.9-2.3-13.9-9-16.3c-6.7-2.4-14.1,0.7-17.2,7.1l-27.3-12.2 c1.2-2.2,2-4.6,2.2-7.1l35.6-8.7c2.7,5,7.5,8.5,13.1,9.7c5.6,1.1,11.4-0.3,15.8-3.8l13.3,11.5c-3.1,6.8-0.4,14.8,6.2,18.2 c6.6,3.5,14.7,1.2,18.5-5.2c3.8-6.4,2-14.6-4.1-18.8c-6.2-4.2-14.5-2.8-19,3.1l-12.7-10.9c1.9-2,3.3-4.5,4.2-7.1l52.9,2.6 c0.1,7.7,6.3,13.8,14,13.8s13.9-6.3,13.8-13.9C241,220,234.8,213.8,227.1,213.8L227.1,213.8z\"\n  }))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgCasper);\nexport default __webpack_public_path__ + \"static/media/casper.abb949ef.svg\";\nexport { ForwardRef as ReactComponent };","import Web3 from \"web3\";\n\nexport enum WALLET_TYPES {\n  NONE,\n  META_MASK,\n}\n\nexport interface WALLET_CONNECTOR_STATE {\n  isConnected: Boolean;\n  isConnecting: Boolean;\n  currentWallet: WALLET_TYPES;\n  walletAddress: String;\n  currentWalletNetwork: number;\n  walletBalance: String;\n  error: String;\n  networkClient: Web3 | undefined;\n  isWeb3Initialized: Boolean;\n}\n\nexport const defaultWalletState: WALLET_CONNECTOR_STATE = {\n  isConnected: false,\n  isConnecting: false,\n  currentWallet: WALLET_TYPES.NONE,\n  walletAddress: \"\",\n  currentWalletNetwork: 0,\n  walletBalance: \"\",\n  error: \"\",\n  networkClient: undefined,\n  isWeb3Initialized: false,\n};\n\nexport interface WalletConnectorProps {\n  WalletConnectView: any;\n  WalletConnectModal: any;\n  WalletConnectViewProps?: any;\n  isAuthenticationNeeded?: boolean;\n}\n","export default __webpack_public_path__ + \"static/media/logo-light.ea3934d4.svg\";","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    isWalletConnected: false,\n    connectedAccounts: [],\n    withdrawalItems: [],\n    selectedAccount: undefined,\n    shouldStake: false,\n    isStaked: false,\n    stakeTransaction: undefined,\n    signedAddresses: [],\n    stakeWithdrawSucess: 0,\n    config: undefined,\n    tokenInfo: {\n      symbol: 'TOKEN_SYMBOL',\n      name: 'TOKEN_NAME',\n    }\n  };\n  \n  export const casperSlice = createSlice({\n    name: \"casper\",\n    initialState: initialState,\n    reducers: {\n      connectWallet: (state, action) => {\n        state.isWalletConnected = true;\n        state.connectedAccounts = action.payload.connectedAccounts;\n        state.selectedAccount = action.payload.connectedAccounts?.length\n          ? action.payload.connectedAccounts[0]\n          : undefined;\n      },\n      fetchWithdrawals: (state, action) => {\n        console.log(action, 'actionaction')\n        state.withdrawalItems = action.payload.withdrawalItems;\n      },\n      resetWallet: (state, action) => {\n        state.isWalletConnected = false;\n        state.connectedAccounts = [];\n        state.selectedAddress = undefined;\n        state.isStaked = false;\n      },\n      selectAccount: (state, action) => {\n        state.selectedAccount = action.payload.selectedAccount;\n      },\n      setShouldStake: (state) => {\n        state.shouldStake = true;\n      },\n      signed: (state, action) => {\n        console.log(action)\n        state.signedAddresses = action.payload\n      },\n      staked: (state, action) => {\n        state.selectedAccount = action.payload.selectedAccount;\n        state.isStaked = true;\n        state.stakeTransaction = action.payload.stakeTransaction;\n      },\n      stakeWithdrawSucess: (state) => {\n        state.stakeWithdrawSucess = state.stakeWithdrawSucess + 1;\n      },\n      configLoaded: (state, action) => {\n        state.config = action.payload.config;\n        state.tokenInfo = action.payload.tokenInfo;\n      },\n    },\n  });\n  ","import { casperSlice } from \"./casperSlice\";\nimport moment from \"moment\";\nconst { actions } = casperSlice;\n\nexport const connectWallet = (connectedAccounts) => async (dispatch) => {\n  dispatch(\n    actions.connectWallet({\n      connectedAccounts: connectedAccounts,\n    })\n  );\n};\n\nexport const resetWallet = (connectedAccounts) => async (dispatch) => {\n  dispatch(actions.resetWallet());\n};\n\n\nexport const fetchWithdrawals = (withdrawalItems) => async (dispatch) => {\n  console.log(withdrawalItems)\n  dispatch(actions.fetchWithdrawals({ withdrawalItems }));\n};\n\nexport const staked = (selectedAddress) => async (dispatch) => {\n  dispatch(actions.staked({ selectedAddress }));\n};\n\nexport const signed = (signedAddress) => async (dispatch) => {\n  dispatch(actions.signed(signedAddress));\n};\n\nexport const selectAccount = (selectedAccount) => async (dispatch) => {\n  dispatch(actions.selectAccount({ selectedAccount }));\n};\n\nexport const shouldStake = () => async (dispatch) => {\n  dispatch(actions.setShouldStake());\n};\n\nexport const stakeWithdrawSucess = () => async (dispatch) => {\n  dispatch(actions.stakeWithdrawSucess());\n};\n\nexport const configLoaded = (config) => async (dispatch) => {\n  console.log(config.config, 'configgggg');\n  let data = {}\n  if (config.config.length) {\n    config.config.forEach(\n      e => {\n        console.log(e[1])\n        data[e[0]] = e[1].parsed\n      }\n    )\n  }\n\n  data = {\n    ...data,\n    stakingTotal: data?.staking_total,\n    stakingEnds: moment.unix(data.staking_ends).format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingStarts: moment.unix(data.staking_starts).format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdrawStarts: moment.unix(data.withdraw_starts).format(\"YYYY-MM-DD HH:mm:ss\"),\n    withdrawEnds: moment.unix(data.withdraw_ends).format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingEnds: moment.unix(data.staking_ends).format(\"YYYY-MM-DD HH:mm:ss\"),\n    stakingStarts: moment.unix(data.staking_starts).format(\"YYYY-MM-DD HH:mm:ss\")\n  };\n\n  console.log(data, config);\n  dispatch(actions.configLoaded({ config: data, tokenInfo: config.tokenInfo }));\n};\n","import React from \"react\";\nimport {\n  // FButton,\n  FDialog,\n  FList,\n  FListItem,\n  FTypo,\n} from \"ferrum-design-system\";\n\nconst AddressSelector = ({\n  show,\n  onHide,\n  connectedAccounts,\n  onAccountSelect,\n}: any) => {\n  return (\n    <FDialog\n      variant={\"dark\"}\n      size={\"large\"}\n      onHide={() => onHide()}\n      show={show}\n      className=\"connect-wallet-dialog text-center\"\n      showClose={true}\n      title={\"Select Account\"}\n    >\n      <FList display=\"block\" type=\"number\" variant=\"connect-wallet\">\n        {connectedAccounts?.length &&\n          connectedAccounts.map((account: any, index: any) => (\n            <FListItem\n              className={\"zHigher f-p--5\"}\n              onClick={() => onAccountSelect(account)}\n              key={index}\n            >\n              <FTypo\n                size={15}\n                color=\"#ffffff\"\n                weight={600}\n                className=\"f-mb--5 f-mt--5\"\n              >\n                {account.address}\n              </FTypo>\n            </FListItem>\n          ))}\n      </FList>\n      {/* <FButton onClick={onHide} title={\"Close\"}></FButton> */}\n    </FDialog>\n  );\n};\n\nexport default AddressSelector;\n","export default __webpack_public_path__ + \"static/media/loading2.6fadeae9.gif\";","import React from \"react\";\nimport {\n  // FButton,\n  FDialog,\n  FList,\n  FLoader,\n  FTypo,\n} from \"ferrum-design-system\";\nimport Loader from \"./../assets/images/loading2.gif\";\n\nconst TxProcessingDialog = ({\n  show,\n  showClose = true,\n  onHide,\n  message\n}: any) => {\n  return (\n    <FDialog\n      variant={\"dark\"}\n      size={\"medium\"}\n      onHide={() => onHide()}\n      show={show}\n      className=\"connect-wallet-dialog text-center\"\n      showClose={showClose}\n      title={\"\"}\n    >\n      <FList display=\"block\" type=\"number\" variant=\"connect-wallet\">\n        <img src={Loader} width={\"170px\"} />\n        <FTypo size={20} className={\"f-mb--5 f-mt--9\"}> {message || 'Loading'} </FTypo>\n      </FList>\n      {/* <FButton onClick={onHide} title={\"Close\"}></FButton> */}\n    </FDialog>\n  );\n};\n\nexport default TxProcessingDialog;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  FHeader,\n  // FHeaderCollapse,\n  FButton,\n  FItem,\n  FTruncateText,\n  // FHeaderMenuItem,\n} from \"ferrum-design-system\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ReactComponent as IconNetwork } from \"../assets/images/casper.svg\";\n\nimport logo from \"../assets/images/logo-light.svg\";\nimport { CgArrowsExchangeAlt } from \"react-icons/cg\";\nimport { CasperClient, CasperServiceByJsonRPC, CLPublicKey } from \"casper-js-sdk\";\nimport { \n  connectWallet as connectWalletDispatch,\n  resetWallet,\n  configLoaded,\n  signed\n} from '../redux/casper/casperActions';\nimport toast from \"react-hot-toast\";\nimport AddressSelector from \"../dialogs/AddressSelector\";\nimport { useHistory, useParams } from \"react-router\";\nimport TxProcessingDialog from \"../dialogs/TxProcessingDialog\";\n\nconst RPC_API = \"https://rpc.testnet.casperlabs.io/rpc\";\nconst STATUS_API = \"https://4211-2a01-4b00-832a-3100-f467-7086-4cda-bb21.eu.ngrok.io/http://159.65.203.12:8888\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\nconst casperClient = new CasperClient(RPC_API);\n\nconst Header = () => {\n  const dispatch = useDispatch();\n  const par = useParams();\n  const { bridgePoolAddress }: any = useParams();\n  console.log(bridgePoolAddress, par, 'bridgePoolAddress');\n  const navigate = useHistory();\n  const connection = useSelector((state: any) => state.casper.connect)\n  const [loading, setLoading] = useState(false);\n\n  console.log(connection)\n\n  const [showAddressSelectorDlg, setShowAddressSelectorDlg] =  useState<boolean>(false);\n\n  const selectedAccount: { address?: string } = {};\n  let casperWalletInstance: any;\n  const getCasperWalletInstance = () => {\n    try {\n      if (casperWalletInstance == null) {\n        casperWalletInstance = (window as any).CasperWalletProvider();\n      }\n      return casperWalletInstance;\n    } catch (err) {}\n    throw Error('Please install the Casper Wallet Extension.');\n  };\n\n  const connectWallet = async () => {\n    console.log(window, 'windowwindow');\n    await getCasperWalletInstance().requestConnection()\n\n    const isConnected = await getCasperWalletInstance().isConnected();\n\n    if (isConnected) {\n      setLoading(true)\n      await AccountInformation();\n      setLoading(false)\n    }\n \n    return;\n  };\n\n  const disconnectWallet = async () => {\n    getCasperWalletInstance().disconnectFromSite();\n    await resetWallet()(dispatch)\n  };\n\n  async function AccountInformation() {\n    const isConnected = await getCasperWalletInstance().isConnected();\n\n    if (isConnected) {\n      try {\n        const publicKey = await getCasperWalletInstance().getActivePublicKey();\n        console.log(publicKey, bridgePoolAddress, 'stakingIdstakingId');\n        //textAddress.textContent += publicKey;\n\n        const latestBlock = await casperService.getLatestBlockInfo();\n        console.log(latestBlock);\n\n        const root = await casperService.getStateRootHash(latestBlock?.block?.hash);\n        console.log(latestBlock, root)\n\n        await connectWalletDispatch([ { \"address\": publicKey } ])(dispatch)\n\n        const balanceUref = await casperService.getAccountBalanceUrefByPublicKey(root, CLPublicKey.fromHex(publicKey));\n        \n        // @ts-ignore\n        const balance = await casperService.getAccountBalance(latestBlock?.block?.header?.state_root_hash, balanceUref);\n        console.log(balance.toString())\n\n        const info = await casperService.getDeployInfo(\n          bridgePoolAddress\n        )\n\n        // @ts-ignore\n        const infoArguments = (info.deploy.session.ModuleBytes.args || []).find(\n          (e: any) => e[0] === 'erc20_contract_hash'\n        )\n\n        if (infoArguments) {\n          console.log(infoArguments, 'infoArguments', infoArguments[1].parsed)\n          const token = infoArguments[1].parsed.split('-')[1]\n\n          console.log(token, latestBlock?.block?.header?.state_root_hash, 'latestBlock?.block?.header?.state_root_hash,latestBlock?.block?.header?.state_root_hash,');\n\n          const tokenName = await casperService.getBlockState(\n            //@ts-ignore\n            latestBlock?.block?.header?.state_root_hash,\n            `hash-${token}`,\n            ['name']\n          )\n  \n          const tokenSymbol = await casperService.getBlockState(\n             //@ts-ignore\n             latestBlock?.block?.header?.state_root_hash,\n             `hash-${token}`,\n             ['symbol']\n          )\n  \n          console.log(tokenName.CLValue?.data, tokenSymbol.CLValue?.data, 'info2info2')\n\n          if(info.deploy.session) {\n            // @ts-ignore\n            configLoaded({\n              // @ts-ignore\n              config: info.deploy.session.ModuleBytes.args,\n              tokenInfo: {\n                tokenSymbol: tokenSymbol.CLValue?.data,\n                tokenName: tokenName.CLValue?.data\n              }\n            })(dispatch);\n            //@ts-ignore\n            signed(info.deploy.approvals)(dispatch)\n            //@ts-ignore\n            console.log(info.deploy, 'infoooo');\n          }\n        }\n        \n      } catch (error) {\n        toast.error(`An error occured Error: ${error}`);\n        console.log(error, 'Error occured')\n      }\n    }\n  }\n\n  return (\n    <div>\n      <FHeader showLogo={true} headerLogo={logo} className=\"bg-none\">\n        <FItem display={\"flex\"} align=\"right\" alignY={\"center\"}>\n          <FItem display={\"flex\"} align=\"right\" alignY={\"center\"}>\n            <span onClick={() => navigate.push(`/withdraw`)}>My Withdrawals</span>\n          </FItem>\n          {connection?.isWalletConnected ? (\n            <>\n              <FButton\n                prefix={<CgArrowsExchangeAlt />}\n                onClick={() => {\n                  setShowAddressSelectorDlg(true);\n                }}\n              ></FButton>\n              <FButton\n                className=\"f-mr-1\"\n                title={\"Disconnect Wallet\"}\n                onClick={disconnectWallet}\n                btnInfo={\n                  <FItem display={\"flex\"}>\n                    <IconNetwork width={20} />{\" \"}\n                    <FTruncateText\n                      className=\"f-ml-1\"\n                      text={connection?.selectedAccount?.address || ''}\n                    />\n                  </FItem>\n                }\n              />\n            </>\n          ) : (\n            <FButton\n              className=\"f-mr-1\"\n              title={\"Connect Wallet\"}\n              onClick={connectWallet}\n            ></FButton>\n          )}\n          {/* <FHeaderCollapse>\n            <FHeaderMenuItem to=\"/status-page\" title=\"Status Page\" />\n          </FHeaderCollapse> */}\n        </FItem>\n      </FHeader>\n      <TxProcessingDialog showClose={false} message={\"Loading Configuration\"} show={loading}/>\n      {showAddressSelectorDlg && (\n        <AddressSelector\n          show={showAddressSelectorDlg}\n          onHide={() => setShowAddressSelectorDlg(false)}\n          connectedAccounts={connection?.connectedAccounts || []}\n          onAccountSelect={(account: any) => {\n           // onAccountSelect(account);\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/loaderIcon.b8aab3a3.svg\";","export default __webpack_public_path__ + \"static/media/SuccessIcon.a9f9d80d.svg\";","export default __webpack_public_path__ + \"static/media/FailureIcon.1097889c.svg\";","import { Dispatch } from \"react\";\nimport { AnyAction } from \"redux\";\nimport axios from \"axios\";\n\nexport class crucibleApi {\n  jwtToken = \"\";\n  address = \"\"\n\n  async signInToServer(userAddress: string) {\n    const res = await axios.post('https://4ikenxgwge.execute-api.us-east-2.amazonaws.com/default/kb-staging-backend', {\n      command: \"signInUsingAddress\",\n      data: { userAddress },\n      params: [],\n    });\n    const { unsecureSession } = res.data;\n    this.address = userAddress;\n    this.jwtToken = unsecureSession;\n    return unsecureSession;\n  }\n\n  gatewayApi(data: any) {\n    return axios.post('https://4ikenxgwge.execute-api.us-east-2.amazonaws.com/default/kb-staging-backend', data, {\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Content-type\": \"Application/json\",\n        Authorization: `Bearer ${this.jwtToken}`,\n      },\n    });\n  }\n}\n\n","import { CasperClient, CasperServiceByJsonRPC } from \"casper-js-sdk\";\nimport { FDialog, FList, FTruncateText, FTypo, FLink } from \"ferrum-design-system\";\nimport { useEffect, useState } from \"react\";\nimport Loader from \"./../assets/images/loaderIcon.svg\";\nimport Success from \"./../assets/images/SuccessIcon.svg\";\nimport Failure from \"./../assets/images/FailureIcon.svg\";\nimport LoaderGif from \"./../assets/images/loading2.gif\";\nimport { crucibleApi } from \"../client\";\nimport { useSelector } from \"react-redux\";\n\nconst RPC_API = \"https://rpc.testnet.casperlabs.io/rpc\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\nconst casperClient = new CasperClient(RPC_API);\n\nconst ConfirmationDialog = ({\n    show,\n    onHide,\n    message,\n    transaction,\n    amount,\n    isSwap = false,\n  }: any) => {\n    const [processing, setProcessing] = useState(false)\n    const [isSuccessful, setIsSuccessful] = useState(false)\n    const [isDone, setIsDone] = useState(false)\n    const [intervalId, setIntervalId] = useState(null as any)\n    const { connect: { config, selectedAccount, isWalletConnected, signedAddresses, } } = useSelector((state: any) => state.casper);\n    const { walletAddress } = useSelector((state: any) => state.casper.walletConnector);\n\n    const checkTransaction = async () => {\n        setProcessing(true)\n        const res = await casperService.getDeployInfo(transaction)\n        console.log(res);\n        if(res.execution_results.length) {\n            console.log(res)\n           //@ts-ignore\n           if(res.execution_results[0].result.Failure) {\n            //@ts-ignore\n            console.log(res.execution_results[0].result.Failure.error_message, 'res[0].result.Failure')\n            setProcessing(false)\n            setIsDone(true)\n            setIsSuccessful(false)\n           }\n           //@ts-ignore\n           if(res.execution_results[0].result.Success) {\n            //@ts-ignore\n            console.log(res.execution_results[0].result.Success)\n            setProcessing(false)\n            setIsDone(true)\n            setIsSuccessful(true)\n            if (isSwap) {\n              const Api = new crucibleApi()\n              await Api.signInToServer(walletAddress)\n              const logTransaction = await Api.gatewayApi({\n                command: 'logEvmAndNonEvmTransaction', data: {\n                  receiveNetwork: '56',\n                  sendAmount: amount,\n                  sendAddress: `${selectedAccount?.address}`,\n                  sendNetwork: '109090',\n                  sendTimestamp: Date.now(),\n                  sendCurrencyS: `CSPR:222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473`,\n                  receiveCurrency: 'BSC_TESTNET:0xfe00ee6f00dd7ed533157f6250656b4e007e7179',\n                  creator: `cspr:${selectedAccount?.address}`,\n                  id: transaction\n              }, params: [] });\n              console.log(logTransaction);\n            }\n           \n           }\n        }\n    }\n    useEffect(() => {\n        console.log(transaction, isDone)\n        if (transaction && !isDone) {\n          let intervalId = setInterval(\n            () =>  checkTransaction()\n          , 5000)\n          setIntervalId(intervalId)\n        }\n\n        if (transaction && isDone) {\n          console.log(intervalId)\n          clearInterval(intervalId)\n        }\n    }, [transaction, isDone])\n\n    useEffect(() => {\n      return () => {\n        setIsDone(false)\n        setIsSuccessful(false)\n        setProcessing(false)\n      }\n    }, [])\n\n    return (\n      <FDialog\n        variant={\"dark\"}\n        size={\"medium\"}\n        onHide={() => onHide()}\n        show={show}\n        className=\"connect-wallet-dialog text-center\"\n        showClose={true}\n        title={\"\"}\n      >\n        <FList display=\"block\" type=\"number\" variant=\"connect-wallet\">\n          {\n            isDone && transaction ?\n              isSuccessful ?\n                <img src={Success} width={\"120px\"} />\n              : <img src={Failure} width={\"120px\"} />\n            : transaction && processing ?\n              <img src={LoaderGif} width={\"120px\"} />\n            : <img src={Loader} width={\"120px\"} />\n          }\n          <FTypo size={20} className={\"f-mb--5 f-mt--9\"}> \n            {\n              isDone && transaction ?\n               isSuccessful ?\n                  ('Transaction processed successfully')\n               : ('Transaction failed on chain')\n              :  (message || 'Loading')\n            }\n          </FTypo>\n          <a href={`https://testnet.cspr.live/deploy/${transaction}`} target=\"_blank\" style={{\"color\": \"white\"}}>\n            <FTypo size={15} className={\"f-mb--5 f-mt--9\"}>\n              <FTruncateText text={transaction} />\n            </FTypo>\n          </a>\n        </FList>\n        {/* <FButton onClick={onHide} title={\"Close\"}></FButton> */}\n      </FDialog>\n    );\n  };\n  \nexport default ConfirmationDialog\n  ","import { InjectedConnector } from \"@web3-react/injected-connector\";\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 6, 97, 137, 250, 336, 1285, 43113, 43114, 1666600000, 56, 80001, 42161],\n});\n","export interface WALLET_AUTHENTICATION_STATE {\n    nonce: String,\n    signature: String;\n    applicationUserToken: String;\n    isAllowedonGateway: Boolean | undefined;\n    allowedNetworksonGateway: Array<any>;\n    error: Boolean;\n    getSignatureFromMetamask: Boolean;\n    meV2: any;\n    tokenV2: String;\n    profileToken: string;\n    currentNetworkInformation: any\n  }\n  \n  export const defaultWalletAuthenticationState: WALLET_AUTHENTICATION_STATE = {\n    nonce: \"\",\n    signature: \"\",\n    applicationUserToken:\"\",\n    isAllowedonGateway:undefined,\n    allowedNetworksonGateway: [],\n    error: false,\n    getSignatureFromMetamask: false,\n    meV2: {},\n    tokenV2: \"\",\n    profileToken:\"\",\n    currentNetworkInformation:{}\n  };","import { createSlice } from \"@reduxjs/toolkit\";\n// import { ME_TAG } from \"../../../../utils/const.utils\";\nimport { WALLET_AUTHENTICATION_STATE, defaultWalletAuthenticationState } from \"./WalletAuthenticationInterfaces\";\n\nconst initialWalletAUthenticationState: WALLET_AUTHENTICATION_STATE = {\n    ...defaultWalletAuthenticationState,\n};\n\nexport const walletConnectorSlice = createSlice({\n    name: \"walletAuthenticator\",\n    initialState: initialWalletAUthenticationState,\n    reducers: { \n      saveSignature: (state, action) => { \n        state.signature = action.payload.walletAuthenticator.signature;\n      },\n      saveNonce: (state, action) => { \n        state.nonce = action.payload.walletAuthenticator.nonce;\n      },\n      saveApplicationUserToken: (state, action) => { \n        state.applicationUserToken = action.payload.walletAuthenticator.userToken;\n      },\n      isAllowedOnGateway: (state, action) => { \n        state.isAllowedonGateway = action.payload.walletAuthenticator.isAllowedOnGateway;\n      },\n      allowedNetworksonGateway: (state, action) => { \n        state.allowedNetworksonGateway = action.payload.walletAuthenticator.allowedNetworksonGateway;\n      },\n      getSignatureFromMetamask: (state, action) => { \n        state.getSignatureFromMetamask = action.payload.walletAuthenticator.getSignatureFromMetamask;\n      },\n      error: (state, action) => { \n        state.error = action.payload.walletAuthenticator.error;\n      },\n      saveME: (state, action) => { \n        state.meV2 = action.payload.walletAuthenticator.meV2;\n      },\n      saveToken: (state, action) => { \n        state.tokenV2 = action.payload.walletAuthenticator.tokenV2;\n      },\n      saveNetworkInformation: (state, action) => {  \n        state.currentNetworkInformation = action.payload.networkInformation.networkResponse;\n      },\n      saveCommunityMemberProfileToken: (state, action) => { \n        state.profileToken = action.payload.walletAuthenticator.profileToken;\n      },\n      resetWalletAuthentication: (state, action) => {\n        state.nonce = \"\";\n        state.signature = \"\";\n        state.applicationUserToken = action.payload.walletAuthenticator.userToken;\n        state.isAllowedonGateway = undefined;\n        state.allowedNetworksonGateway = [];\n        state.error = false;\n        state.getSignatureFromMetamask = false;\n        state.profileToken = \"\";\n      },\n      removeSession: (state, action) => {\n        state.tokenV2 = \"\";\n        state.meV2 = {};\n      }\n    }\n})\n  \n","import { walletConnectorSlice } from \"./walletAuthenticationSlice\";\nconst { actions } = walletConnectorSlice;\n\nexport const saveSignature = (walletAuthenticator: any) => (dispatch: any) => {\n\n    dispatch(actions.saveSignature({ walletAuthenticator }));\n};\n\nexport const saveNetworkInformation = (networkInformation: any) => (dispatch: any) => {\n    dispatch(actions.saveNetworkInformation({ networkInformation }));\n};\n\nexport const saveNonce = (walletAuthenticator: any) => (dispatch: any) => {\n    dispatch(actions.saveNonce({ walletAuthenticator }));\n};\n\nexport const saveApplicationUserToken = (walletAuthenticator: any) => (dispatch: any) => {\n    dispatch(actions.saveApplicationUserToken({ walletAuthenticator }));\n};\n\nexport const isAllowedOnGateway = (walletAuthenticator: any) => (dispatch: any) => {\n\n    dispatch(actions.isAllowedOnGateway({ walletAuthenticator }));\n};\n\nexport const allowedNetworksonGateway = (walletAuthenticator: any) => (dispatch: any) => {\n\n    dispatch(actions.allowedNetworksonGateway({ walletAuthenticator }));\n};\n\nexport const error = (walletAuthenticator: any) => (dispatch: any) => {\n    dispatch(actions.error({ walletAuthenticator }));\n};\n\nexport const resetWalletAuthentication = (walletAuthenticator: any) => (dispatch: any) => {\n\n    dispatch(actions.resetWalletAuthentication({ walletAuthenticator }));\n};\n\nexport const removeSession = (walletAuthenticator: any) => (dispatch: any) => {\n\n    dispatch(actions.removeSession({ walletAuthenticator }));\n};\n\nexport const getSignatureFromMetamask = (walletAuthenticator: any) => (dispatch: any) => {\n\n    dispatch(actions.getSignatureFromMetamask({ walletAuthenticator }));\n};\n\nexport const saveME = (walletAuthenticator: any) => (dispatch: any) => {\n    dispatch(actions.saveME({ walletAuthenticator }));\n};\n\nexport const saveToken = (walletAuthenticator: any) => (dispatch: any) => {\n    dispatch(actions.saveToken({ walletAuthenticator }));\n};\n\nexport const saveCommunityMemberProfileToken = (walletAuthenticator: any) => (dispatch: any) => {\n\n    dispatch(actions.saveCommunityMemberProfileToken({ walletAuthenticator }));\n};\n\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { WalletConnectorProps } from \"./walletConnectorInterfaces\";\nimport { walletConnectorActions } from \".\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"./web3React/connectors\";\nimport Web3 from \"web3\";\nimport { RootState } from \"../../../redux/rootReducer\";\nimport { AiOutlineDisconnect, AiOutlineLoading3Quarters } from \"react-icons/ai\";\nimport { VscDebugDisconnect } from \"react-icons/vsc\";\nimport toast from \"react-hot-toast\";\n// import { WalletAuthencationOnSignIn } from \"../../components/common/wallet-authentication/WalletAuthenticationSignIn\";\nimport * as walletAuthenticatorActions from \"./walletAuthenticationActions\";\n\nexport const WalletConnector = ({\n  WalletConnectView,\n  WalletConnectModal, \n  WalletConnectViewProps,\n}: WalletConnectorProps) => {\n  const [showWalletDialog, setShowWalletDialog] = useState<boolean>(false);\n  const [reconnect, setReconnect] = useState<boolean>(false);\n  const [networkClient, setNetworkClient] = useState<Web3 | undefined>(\n    undefined\n  );\n  const state =  useSelector((state: RootState) => state);\n  console.log(state);\n\n  const dispatch = useDispatch();\n  const { active, activate, deactivate, library, account, chainId, error } =\n    useWeb3React();\n  const { isConnected, isConnecting, currentWalletNetwork, walletAddress } =\n    useSelector((state: any) => state.casper.walletConnector);\n  const {\n    // nonce,\n    applicationUserToken,\n    //  signature, isAllowedonGateway, allowedNetworksonGateway, getSignatureFromMetamask, tokenV2, meV2\n  } = useSelector((state: any) => state.casper.walletAuthenticator);\n\n  \n  useEffect(() => {\n    if (\n      account &&\n      walletAddress &&\n      walletAddress !== account &&\n      isConnected &&\n      active\n    ) {\n      // console.log(\"Account Changed reconnect wallet\");\n      activate(injected);\n      setReconnect(true);\n    }\n    // eslint-disable-next-line\n  }, [walletAddress, account, isConnected, active]);\n\n  useEffect(() => {\n    injected\n      .isAuthorized()\n      .then((isAuthorized) => {\n        // console.log(isAuthorized, active, \"isAuthorized\");\n        if (isAuthorized && !active && !error && isConnected) {\n          activate(injected);\n        }\n      })\n      .catch(() => {});\n    // eslint-disable-next-line\n  }, [activate, active, error, isConnected]);\n\n  useEffect(() => {\n    if (\n      chainId &&\n      currentWalletNetwork &&\n      currentWalletNetwork !== chainId &&\n      isConnected &&\n      active\n    ) {\n      // console.log(\"Chain Changed reconnect wallet\");\n      activate(injected);\n      setReconnect(true);\n    }\n    // eslint-disable-next-line\n  }, [currentWalletNetwork, chainId, isConnected, active]);\n\n  useEffect(() => {\n    if (active && !isConnected && library && !networkClient) {\n      // console.log(\"web3 react connect set network client\");\n      dispatch(walletConnectorActions.connectWallet());\n      setNetworkClient(library);\n    }\n    if (!active && isConnected && !library && !isConnecting) {\n      // console.log(\"connected in currenct browser session reconnect wallet\");\n      activate(injected);\n      setReconnect(true);\n    }\n    // eslint-disable-next-line\n  }, [isConnected, active, library, isConnecting, networkClient]);\n\n  useEffect(() => {\n    if (reconnect && active) {\n      // console.log(\n      //   \"reconnect called and web3 is active again reset network client to set again\"\n      // );\n      dispatch(walletConnectorActions.reconnectWallet());\n      setNetworkClient(undefined);\n      setReconnect(false);\n    }\n    // eslint-disable-next-line\n  }, [reconnect, active]);\n\n  useEffect(() => {\n    if (\n      active &&\n      networkClient &&\n      library &&\n      !isConnected &&\n      account &&\n      chainId &&\n      isConnecting\n    ) {\n      // console.log(\n      //   \"network client is set, web3 react is also active test by fetching account balance\"\n      // );\n      networkClient.eth\n        .getBalance(account?.toString())\n        .then((balance: String) => {\n          // console.log(\n          //   \"newtork ping completed successfully update redux with wallet and network client information\",\n          //   balance,\n          //   account?.toString()\n          // );\n          dispatch(\n            walletConnectorActions.walletConnected({\n              chainId,\n              account,\n              balance,\n              currentWallet: undefined,\n              networkClient,\n            })\n          );\n        })\n        .catch((err) => {\n          // console.log(\"newtork ping failed reset wallet state\");\n          // console.log(err, \" : error connecting wallet\");\n          toast.error(err || \"Error connecting wallet\");\n          dispatch(walletConnectorActions.resetWalletConnector());\n        });\n    }\n    // eslint-disable-next-line\n  }, [\n    networkClient,\n    library,\n    isConnected,\n    active,\n    account,\n    chainId,\n    isConnecting,\n  ]);\n\n  const openWalletSelectorDialog = () => {\n    // console.log(\"open wallet selector to connect\");\n    if (!isConnecting) {\n      if (!isConnected) {\n        setShowWalletDialog(true);\n      } else {\n        // console.log(\"wallet is already connect disconnect wallet\");\n        dispatch(walletConnectorActions.resetWalletConnector());\n        dispatch(\n          walletAuthenticatorActions.resetWalletAuthentication({\n            userToken: applicationUserToken,\n          })\n        );\n        dispatch(\n          walletAuthenticatorActions.removeSession({\n            userToken: applicationUserToken,\n          })\n        );\n        setNetworkClient(undefined);\n        deactivate();\n      }\n    } else {\n      // console.log(\"wallet is already in connect state\");\n    }\n  };\n\n  // // console.log(isConnecting, \"isConnecting\");\n  // // console.log(isConnected, \"isConnected\");\n  // // console.log(active, \"active\");\n  // // console.log(library, \"library\");\n  // // console.log(networkClient, \"networkClient\");\n  // // console.log(walletAddress, \"walletAddress\");\n  // // console.log(account, \"account\");\n  // // console.log(walletAddress === account);\n  // // console.log(chainId, \"chainId\");\n  // // console.log(currentWalletNetwork, \"currentWalletNetwork\");\n  // // console.log(currentWalletNetwork === chainId);\n  // // console.log(error);\n\n  const connectMetaMask = () => {\n    if (isConnected) {\n      // console.log(\"wallet is already connect disconnect wallet\");\n      dispatch(walletConnectorActions.resetWalletConnector());\n      setNetworkClient(undefined);\n      deactivate();\n    } else {\n      // console.log(\"intialize web3 wallet connect for meta mask\");\n      activate(injected);\n      setShowWalletDialog(false);\n      setNetworkClient(undefined);\n    }\n  };\n\n  useEffect(() => {\n    if (error) {\n      dispatch(walletConnectorActions.resetWalletConnector());\n      // console.log(error);\n      toast.error(error?.message || \"Error connecting wallet\");\n    }\n    // eslint-disable-next-line\n  }, [error]);\n\n  return (\n    <>\n      <WalletConnectView\n        {...{\n          ...WalletConnectViewProps,\n          prefix: {\n            ...(isConnecting ? (\n              <AiOutlineLoading3Quarters />\n            ) : !isConnected ? (\n              <VscDebugDisconnect />\n            ) : (\n              <AiOutlineDisconnect />\n            )),\n          },\n\n          title: isConnecting\n            ? \"Connecting...\"\n            : !isConnected\n            ? \"Connect to Metamask\"\n            : \"Disconnect\",\n          disabled: isConnecting,\n        }}\n        onClick={() => {\n          console.log(\"helloooo-=====>><<<\")\n          openWalletSelectorDialog();\n        }}\n      />\n      <WalletConnectModal\n        show={showWalletDialog}\n        metaMaskClickEvent={() => {\n          connectMetaMask();\n        }}\n        onHide={() => setShowWalletDialog(false)}\n      />\n      {/* { isAuthenticationNeeded && <WalletAuthencationOnSignIn account={account} networkClient={networkClient} isAuthenticationNeeded={isAuthenticationNeeded} /> } */}\n    </>\n  );\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport {\n  defaultWalletState,\n  WALLET_CONNECTOR_STATE,\n} from \"../walletConnectorInterfaces\";\n\nconst initialWalletConnectorState: WALLET_CONNECTOR_STATE = {\n  ...defaultWalletState,\n};\n\nexport const walletConnectorSlice = createSlice({\n  name: \"walletConnector\",\n  initialState: initialWalletConnectorState,\n  reducers: {\n    //error occured while connecting\n    catchWalletConnectError: (state, action) => {\n      state = {\n        ...defaultWalletState,\n        error: `${action.type}: ${action.payload.error}`,\n      };\n    },\n    connectWallet: (state) => {\n      state.isConnected = false;\n      state.isConnecting = true;\n      state.walletAddress = \"\";\n      state.walletBalance = \"\";\n      state.currentWallet = defaultWalletState.currentWallet;\n      state.currentWalletNetwork = 0;\n      state.error = \"\";\n      state.networkClient = undefined;\n      state.isWeb3Initialized = false;\n    },\n    reconnectWallet: (state) => {\n      state.isConnected = false;\n      state.isConnecting = true;\n      state.walletAddress = \"\";\n      state.walletBalance = \"\";\n      state.currentWallet = defaultWalletState.currentWallet;\n      state.currentWalletNetwork = 0;\n      state.error = \"\";\n      state.networkClient = undefined;\n      state.isWeb3Initialized = false;\n    },\n    // getCustomerById\n    walletConnected: (state, action) => {\n      state.isConnected = true;\n      state.isConnecting = false;\n      state.walletAddress = action.payload.userAccount.account;\n      state.walletBalance = action.payload.userAccount.balance;\n      state.currentWallet = action.payload.currentWallet;\n      state.currentWalletNetwork = action.payload.userAccount.chainId;\n      state.error = \"\";\n      state.networkClient = action.payload.userAccount.networkClient;\n      state.isWeb3Initialized = true;\n    },\n    disconnectWallet: (state, action) => {\n      state.isConnected = false;\n      state.isConnecting = false;\n      state.walletAddress = \"\";\n      state.walletBalance = \"\";\n      state.currentWallet = defaultWalletState.currentWallet;\n      state.currentWalletNetwork = 0;\n      state.error = \"\";\n      state.networkClient = undefined;\n      state.isWeb3Initialized = false;\n    },\n  },\n});\n","import { walletConnectorSlice } from \"./walletConnectorSlice\";\nconst { actions } = walletConnectorSlice;\n\n\nexport const reconnectWallet = () => (dispatch: any) => {\n  dispatch(actions.reconnectWallet());\n};\n\nexport const connectWallet = () => (dispatch: any) => {\n  dispatch(actions.connectWallet());\n};\n\nexport const walletConnected = (userAccount: any) => (dispatch: any) => {\n  dispatch(actions.walletConnected({ userAccount }));\n};\n\nexport const catchWalletConnectError = () => (dispatch: any) => {\n  dispatch(actions.catchWalletConnectError({ payload: {} }));\n};\n\nexport const resetWalletConnector = () => (dispatch: any) => {\n  console.log('reset wallet connector')\n  dispatch(actions.disconnectWallet({ payload: {} }));\n};\n","// import { Network } from \"ferrum-plumbing\";\n\nexport interface WALLET_APPLICATION_WRAPPER_STATE {\n  groupInfo: any;\n  supportedCurrencies: Array<any>;\n  tokenList: Array<any>;\n  supportedNetworks: Array<any>;\n  currencyPairs: Array<any>;\n  filteredAssets: Array<any>;\n  userProfile: any;\n  authToken: string;\n  walletWrapperInitialized: boolean;\n  fromInfo: any;\n  toInfo: any;\n  availableLiquidity: string;\n  amount: number;\n  fee: number;\n  maxBalance: number;\n  networkTransactions: Array<any>;\n}\nexport const defaultWalletApplicationWrapper: WALLET_APPLICATION_WRAPPER_STATE =\n  {\n    groupInfo: {},\n    supportedCurrencies: [],\n    tokenList: [],\n    supportedNetworks: [],\n    currencyPairs: [],\n    filteredAssets: [],\n    userProfile: {},\n    authToken: \"\",\n    walletWrapperInitialized: false,\n    fromInfo: undefined,\n    toInfo: undefined,\n    availableLiquidity: \"\",\n    amount: 0,\n    fee: 0,\n    maxBalance: 0,\n    networkTransactions: [],\n  };\n\nexport interface AddressDetails {\n  // network: Network;\n  currency: string;\n  symbol: string;\n  address: string;\n  addressWithChecksum?: string;\n  humanReadableAddress: string;\n  addressType: string;\n  balance: string;\n  pendingForWithdrawal: string;\n  pendingForDeposit: string;\n}\n\nexport interface UserAccountGroup {\n  id: string;\n  addresses: AddressDetails[];\n}\n\nexport interface AppUserProfile {\n  userId: string;\n  displayName: string;\n  appId: string;\n  email?: string;\n  accountGroups: UserAccountGroup[];\n}\nexport type ChainEventStatus = \"\" | \"pending\" | \"failed\" | \"completed\";\n\nexport interface ChainEventBase {\n  id: string;\n  userAddress: string;\n  // network: Network;\n  application: string;\n  status: ChainEventStatus;\n  callback?: any;\n  eventType: string;\n  transactionType: string;\n  createdAt: number;\n  lastUpdate: number;\n  reason?: string;\n  retry: number;\n}\n\nexport interface AllocationSignature extends MultiSignable {\n  actor: MultiSigActor;\n  salt: string;\n  expirySeconds: number;\n  from: string;\n  to: string;\n}\n\nexport interface UserContractAllocation {\n  signature?: AllocationSignature;\n  network: string;\n  contractAddress: string;\n  method: string;\n  userAddress: string;\n  currency: string;\n  allocation: string;\n  expirySeconds: number;\n}\n\nexport interface TokenDetails {\n  currency: string;\n  address: string;\n  chainId: number;\n  name: string;\n  symbol: string;\n  decimals: number;\n  logoURI: string;\n}\n\nexport interface StoredAllocationCsv {\n  network: string;\n  contract: string;\n  csv: string;\n}\n\nexport interface CurrencyValue {\n  currency: string;\n  value: string;\n}\n\nexport interface MultiSigSignature {\n  creationTime: number;\n  creator: string;\n  signature: string;\n}\n\nexport interface MultiSigActor {\n  groupId: number;\n  quorum: string;\n  address: string;\n  contractAddress: string;\n}\n\nexport interface MultiSignable {\n  signatures: MultiSigSignature[];\n}\n\nexport interface TransactionTrackableItem {\n  network: string;\n  transactionId: string;\n  timestamp: number;\n  status: \"pending\" | \"failed\" | \"timedout\" | \"sucess\";\n  message?: string;\n}\n\nexport interface TransactionTrackable {\n  status: \"\" | \"pending\" | \"failed\" | \"timedout\" | \"sucess\";\n  transactions: TransactionTrackableItem[];\n}\n\nexport interface UserStakeSummary {\n  name: string;\n  network: string;\n  currency: string;\n  rewardCurrencies: string[];\n  stakeContractAddress: string;\n  lastUpdate: number;\n  stake: string;\n  rewards: string[];\n}\n\n// export interface DEFAULT_CURRENCIES {\n//   currencies: Array<any>;\n// }\n// export const defaultCurrencies: DEFAULT_CURRENCIES = {\n//   currencies: [],\n// };\n\n// export interface DEFAULT_TOKENS {\n//   tokens: Array<any>;\n// }\n// export const defaultTokens: DEFAULT_TOKENS = {\n//   tokens: [],\n// };\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport {\n  defaultWalletApplicationWrapper,\n  WALLET_APPLICATION_WRAPPER_STATE,\n} from \"../walletApplicationWrapperInterfaces\";\n\nconst defaultWalletApplicationWrapperstate: WALLET_APPLICATION_WRAPPER_STATE = {\n  ...defaultWalletApplicationWrapper,\n};\n\nexport const applicationWrapperSlice = createSlice({\n  name: \"applicationWrapper\",\n  initialState: defaultWalletApplicationWrapperstate,\n  reducers: {\n    walletApplicationDefaultsLoaded: (state, action) => {\n      state.groupInfo = action.payload.groupInfo;\n      state.supportedCurrencies = action.payload.supportedCurrencies;\n      state.tokenList = action.payload.tokenList;\n      state.supportedNetworks = action.payload.supportedNetworks;\n      state.filteredAssets = action.payload.filteredAssets;\n      state.currencyPairs = action.payload.currencyPairs;\n      state.walletWrapperInitialized = true;\n    },\n    walletApplicationUser: (state, action) => {\n      // console.log(action.payload);\n      state.userProfile = action.payload.userProfile;\n      state.authToken = action.payload.authToken;\n    },\n    resetWalletApplicationUser: (state) => {\n      state.userProfile = defaultWalletApplicationWrapper.userProfile;\n      state.authToken = defaultWalletApplicationWrapper.authToken;\n    },\n    swapToAndFromToken: (state, action) => {\n      state.fromInfo = action.payload.fromInfo;\n      state.toInfo = action.payload.toInfo;\n    },\n    updateToInfo: (state, action) => {\n      state.toInfo = action.payload.toInfo;\n    },\n    updateFromInfo: (state, action) => {\n      state.fromInfo = action.payload.fromInfo;\n    },\n    availableLiquidity: (state, action) => {\n      state.availableLiquidity = action.payload.availableLiquidity;\n    },\n    updateAmount: (state, action) => {\n      state.amount = action.payload.amount;\n    },\n    updateFee: (state, action) => {\n      state.fee = action.payload.fee;\n    },\n    updateMaxBalance: (state, action) => {\n      state.maxBalance = action.payload.maxBalance;\n    },\n    getNetworkTransactions: (state, action) => {\n      state.networkTransactions = action.payload.networkTransactions;\n    },\n  },\n});\n","import { applicationWrapperSlice } from \"./walletApplicationWrapperSlice\";\n// import * as serverRequest from \"../../../common-client/axiosApiClient\";\n// import { getFilteredAssets } from \"../walletApplicationWrapperHelper\";\nconst { actions } = applicationWrapperSlice;\n\n// export const loadWalletDefaults =\n//   (groupId: any, existingTokenList: Array<any>) => async (dispatch: any) => {\n//     //load bridge group info\n//     const groupInfo = await serverRequest.loadGroupInfo(groupId);\n\n//     //load bridge global token listing\n//     const tokenList = existingTokenList?.length\n//       ? existingTokenList\n//       : await serverRequest.getTokenList();\n\n//     //load bridge group currencies token configuration\n//     const currencyPairs = await serverRequest.getTokenConfigsForGroup(\n//       groupInfo?.bridgeCurrencies\n//     );\n\n//     //calculate filtered listing\n//     const filteredAssets = getFilteredAssets(\n//       tokenList,\n//       groupInfo?.bridgeCurrencies\n//     );\n\n//     const supportedNetworks = groupInfo?.bridgeCurrencies.map(\n//       (c: any) => c.split(\":\")[0]\n//     );\n\n//     const supportedCurrencies = groupInfo.bridgeCurrencies.map(\n//       (c: any) => c.split(\":\")[1]\n//     );\n\n//     dispatch(\n//       actions.walletApplicationDefaultsLoaded({\n//         groupInfo,\n//         tokenList,\n//         currencyPairs,\n//         filteredAssets,\n//         supportedNetworks,\n//         supportedCurrencies,\n//       })\n//     );\n//   };\n\nexport const loadUserProfileDetails = () => async (dispatch: any) => {\n  // const [client, connect, currencyList, api, provider] =\n  //       inject5<UnifyreExtensionWeb3Client, Connect, CurrencyList, ApiClient, Web3ModalProvider>(\n  //           UnifyreExtensionWeb3Client, Connect, CurrencyList, ApiClient, 'Web3ModalProvider');\n  // connect.setProvider(provider);\n  // const net = await connect.getProvider()!.netId();\n  // console.log(net);\n};\n\n// export const getUserProfile = (userProfile: any) => async (dispatch: any) => {\n//   const authToken = await serverRequest.signInToServer(userProfile.userId);\n//   console.log(\"sign to server successfull user token authToken : \", authToken);\n//   // console.log({ userProfile, authToken });\n//   dispatch(actions.walletApplicationUser({ userProfile, authToken }));\n// };\n\nexport const resetUserProfile = () => async (dispatch: any) => {\n  dispatch(actions.resetWalletApplicationUser());\n};\n\nexport const swapToAndFromToken = (toAndFromTokens: any) => async (dispatch: any) => {\n  dispatch(actions.swapToAndFromToken(toAndFromTokens));\n};\n\nexport const updateToInfo = (toInfo: any) => async (dispatch: any) => {\n  dispatch(actions.updateToInfo(toInfo));\n};\n\nexport const updateFromInfo = (fromInfo: any) => async (dispatch: any) => {\n  dispatch(actions.updateFromInfo(fromInfo));\n};\n\n// export const getAvailableLiquidity =\n//   (targetNetwork: string, targetCurrency: string, authToken: string) =>\n//   async (dispatch: any) => {\n//     await serverRequest\n//       .getAvailableLiquidity(targetNetwork, targetCurrency, authToken)\n//       .then((response: any) => {\n//         dispatch(actions.availableLiquidity({ availableLiquidity: response }));\n//       })\n//       .catch((err: any) => {\n//         console.log(err);\n//       });\n//   };\n\nexport const updateAmount = (amount: any) => async (dispatch: any) => {\n  dispatch(actions.updateAmount({ amount }));\n};\n\nexport const updateFee = (fee: any) => async (dispatch: any) => {\n  dispatch(actions.updateFee({ fee }));\n};\n\nexport const updateMaxBalance = (maxBalance: any) => async (dispatch: any) => {\n  dispatch(actions.updateMaxBalance({ maxBalance }));\n};\n\n// export const getNetworkTransactions = () => async (dispatch: any) => {\n//   const transactionResponse = await serverRequest.getNetworkTransactions();\n//   dispatch(\n//     actions.getNetworkTransactions({\n//       networkTransactions: transactionResponse.data,\n//     })\n//   );\n// };\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as applicationWrapperActions from \"./redux/walletApplicationWrapperActions\";\nimport FerrumJson from \"../../../utils/FerrumToken.json\";\n// import { Networks } from \"ferrum-plumbing\";\n// import { FRM } from \"../../helper/bridgeHelpers\";\nimport { RootState } from \"../../../redux/rootReducer\";\nimport Web3 from \"web3\";\nimport { Big } from \"big.js\";\nimport { AbiItem } from \"web3-utils\";\nimport { Web3ReactProvider } from \"@web3-react/core\";\n\nconst getLibrary = (provider: any) => {\n  return new Web3(provider); // this will vary according to whether you use e.g. ethers or web3.js\n};\n\nexport const ApplicationWrapper = ({ children }: any) => {\n  const dispatch = useDispatch();\n\n  const {\n    isConnected,\n    walletAddress,\n    currentWalletNetwork,\n    // walletBalance,\n    networkClient,\n    isWeb3Initialized,\n  } = useSelector((state: RootState) => state.casper.walletConnector);\n\n  const {\n    tokenList,\n    walletWrapperInitialized,\n    // supportedCurrencies,\n    groupInfo,\n  } = useSelector((state: RootState) => state.casper.walletApplicationWrapper);\n\n  useEffect(() => {\n    // console.log(\"Attempt to intialize app\");\n    // dispatch(applicationWrapperActions.loadWalletDefaults(\"frm\", tokenList));\n  }, []);\n\n  useEffect(() => {\n    // console.log(\"intiialalalal\");\n    if (\n      isConnected &&\n      isWeb3Initialized &&\n      networkClient &&\n      walletWrapperInitialized\n    ) { \n      signIntoServer();\n    } else if (\n      !isConnected ||\n      !isWeb3Initialized ||\n      !networkClient ||\n      !walletWrapperInitialized\n    ) { \n      dispatch(applicationWrapperActions.resetUserProfile());\n    }\n    // eslint-disable-next-line\n  }, [isConnected, walletWrapperInitialized]);\n\n  const signIntoServer = async () => { \n     await getUserProfile(); \n    // dispatch(applicationWrapperActions.getUserProfile(user));\n  };\n\n  const getUserProfile = async () => {\n    if (networkClient !== undefined) {\n      const userTokens = tokenList.filter((item: any) => {\n        return item.chainId === currentWalletNetwork;\n      });\n      const currentNetwork = userTokens[0]?.currency.split(\":\")[0];\n      const currencies = groupInfo.bridgeCurrencies.filter(\n        (currency: any) => currency.split(\":\")[0] === currentNetwork\n      );\n      const addressesF = currencies.map(async (c: any) => {\n        const [network, tokenAddr] = c.split(\":\");\n        let symbol: string = \"\";\n        let decimals: string = \"\";\n        let name: string = \"\";\n        let amount: number | string = 0;\n        let balance: number | string = 0;\n        // let decimalFactor;\n        // const netObj = Networks.for(network);\n        if (network === currentNetwork) {\n          // if (netObj.baseSymbol === tokenAddr) {\n          //   symbol = \"\";\n          //   if (!!networkClient) {\n          //     balance = Web3.utils.fromWei(\n          //       await networkClient!.eth.getBalance(walletAddress as string)\n          //     );\n          //     // console.log(balance, \"==================\");\n          //   } else {\n          //     balance = \"0\";\n          //   }\n          // } else {\n          // const token = TokenInfo[c];\n          // symbol = token.tokenSymbol;\n          const tokenContract = new networkClient.eth.Contract(\n            FerrumJson.abi as AbiItem[],\n            tokenAddr\n          );\n          symbol = await tokenContract.methods.symbol().call();\n          decimals = (await tokenContract.methods.decimals().call()) as any;\n          name = await tokenContract.methods.name().call();\n          balance = await tokenContract.methods.balanceOf(walletAddress).call();\n          const decimalFactor = 10 ** Number(decimals);\n          balance = new Big(balance).div(decimalFactor).toFixed();  \n          // }\n        }\n\n        return {\n          address: walletAddress.toLocaleLowerCase(),\n          addressType: \"ADDRESS\",\n          balance: balance,\n          currency: c,\n          amount,\n          humanReadableAddress: walletAddress,\n          network: currentNetwork || undefined,\n          pendingForDeposit: \"0\",\n          pendingForWithdrawal: \"0\",\n          symbol,\n          decimals,\n          name,\n          addressWithChecksum: walletAddress,\n        };\n      });\n      const addresses = await Promise.all(addressesF);\n      const accountGroups = {\n        id: \"ag1\",\n        addresses,\n      };\n      const up = {\n        appId: \"base\",\n        displayName: \"\",\n        userId: walletAddress,\n        accountGroups: [accountGroups],\n        currentNetwork,\n      };\n      return up;\n    }\n  };\n\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>{children}</Web3ReactProvider>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/icon-metamask.a8754af7.svg\";","import React from \"react\";\nimport IconMetaMask from \"../../assets/images/icon-metamask.svg\";\n// import IconCoinbase from \"../../assets/img/icon-coinbase.png\";\n// import IconWalletConnect from \"../../assets/img/icon-wallet-connect.svg\";\n// import { useApplicationUIContext } from \"../../ApplicationUiContext\";\nimport { FDialog, FList, FListItem } from \"ferrum-design-system\";\nimport \"./ConnectWalletDialog-styles.scss\";\n\nexport const ConnectWalletDialog = ({\n  show,\n  onHide,\n  metaMaskClickEvent,\n}: any) => {\n  return (\n    <FDialog\n      show={show}\n      onHide={onHide}\n      size=\"small\"\n      title=\"Connect Wallet\"\n      className=\"connect-wallet-dialog  f-mb-2\"\n    >\n      <FList\n        display=\"block\"\n        type=\"number\"\n        className={\"f-mt-2\"}\n        variant=\"connect-wallet\"\n      >\n        <FListItem display=\"flex\" onClick={metaMaskClickEvent}>\n          <strong>MetaMask</strong>\n          <span className=\"icon-wrap\">\n            <img src={IconMetaMask} alt={IconMetaMask}></img>\n          </span>\n        </FListItem>\n        {/* <FListItem display=\"flex\">\n          <strong>Coinbase wallet</strong>\n          <span className=\"icon-wrap\">\n            <img src={IconCoinbase} alt={IconCoinbase}></img>\n          </span>\n        </FListItem>\n        <FListItem display=\"flex\">\n          <strong>WalletConnect</strong>\n          <span className=\"icon-wrap\">\n            <img src={IconWalletConnect} alt={IconWalletConnect}></img>\n          </span>\n        </FListItem> */}\n      </FList>\n    </FDialog>\n  );\n};\n","import Web3 from \"web3\";\n\nexport class Web3Helper {\n  web3Client: Web3;\n\n  constructor(web3: Web3) {\n    this.web3Client = web3;\n  }\n\n  async sendTransactionAsync(\n    dispatch: any,\n    transactions: any[],\n    payload?: any\n  ): Promise<string> {\n    const txIds: string[] = [];\n    for (const tx of transactions) {\n      const txId = await new Promise<{ [k: string]: string }>(\n        (resolve, reject) =>\n          this.web3Client.eth\n            .sendTransaction({\n              from: tx.from,\n              to: tx.contract,\n              value: tx.value || \"0x\",\n              data: tx.data,\n              gas: tx.gas?.gasLimit,\n              // gasPrice: tx.gas?.gasPrice,\n              // chainId: this.connection.netId()\n            })\n            // .on(\"confirmation\", function (part1, part2) {\n            //   console.log(\"confirmation\", part1, part2);\n            // })\n            .on(\"transactionHash\", (transactionHash) => {\n              //dispatch(transactionHash);\n            })\n            .then((h: any) => {\n              resolve(h);\n            })\n            .catch(reject)\n      );\n      // console.log(txId);\n      txIds.push(txId.transactionHash);\n    }\n    // console.log(txIds, \"txIdstxIds\");\n    return txIds.join(\",\") + \"|\" + JSON.stringify(payload || \"\");\n  }\n\n}","import { useState } from \"react\";\nimport { FButton, FCard, FGrid, FGridItem, FInputText, FItem, FTypo } from \"ferrum-design-system\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getStakingInfo } from \"../utils/DateUtil\";\nimport { connectWallet, connectWallet as connectWalletDispatch } from '../redux/casper/casperActions';\nimport { useHistory, useParams } from \"react-router\";\nimport './layout.scss';\nimport { CasperServiceByJsonRPC, CLPublicKey, CLValue, \n  CLValueBuilder, \n  decodeBase16, \n  DeployUtil,\n  RuntimeArgs,\n  Signer,\n  CasperClient\n} from \"casper-js-sdk\";\nimport toast from \"react-hot-toast\";\nimport TxProcessingDialog from \"../dialogs/TxProcessingDialog\";\nimport ConfirmationDialog from \"../dialogs/ConfirmationDialog\";\nimport { MetaMaskConnector } from \"../components/connector\";\nimport { ConnectWalletDialog } from \"../utils/connect-wallet/ConnectWalletDialog\";\nimport { crucibleApi } from \"../client\";\nimport { Web3Helper } from \"../utils/web3Helper\";\n\nconst RPC_API = \"https://rpc.testnet.casperlabs.io/rpc\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\nconst casperClient = new CasperClient(RPC_API);\n\nexport const CasperSwap = () => {\n  const navigate = useHistory();\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const [amount, setAmount] = useState();\n  const [targetNetwork, setTargetNetwork] = useState('56');\n  const [targetToken, setTargetToken] = useState('BASE_FRM');\n  const [processMsg, setProcessMsg] = useState('');\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const connection = useSelector((state: any) => state.casper.connect)\n  const { connect: { config, selectedAccount, isWalletConnected, signedAddresses, } } = useSelector((state: any) => state.casper);\n\n  let casperWalletInstance: any;\n  const getCasperWalletInstance = () => {\n    try {\n      if (casperWalletInstance == null) {\n        casperWalletInstance = (window as any).CasperWalletProvider();\n      }\n      return casperWalletInstance;\n    } catch (err) {}\n    throw Error('Please install the Casper Wallet Extension.');\n  };\n\n  const { isConnected, isConnecting, currentWalletNetwork, walletAddress, networkClient } =\n    useSelector((state: any) => state.casper.walletConnector);\n\n  \n\n  async function swapEvm():Promise<any>{\n    const Api = new crucibleApi()\n    await Api.signInToServer(walletAddress)\n\t\tconst res = await Api.gatewayApi({\n            command: 'swapGetTransaction', data: {\n              amount: amount,\n              targetCurrency: `CSPR:222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473`,\n              currency: 'BSC_TESTNET:0xfe00ee6f00dd7ed533157f6250656b4e007e7179'\n          },\n\t\t\tparams: [] });\n    \n    if (res.data.requests) {\n      console.log(res.data.requests, 'res.data.requests')\n      const helper = new Web3Helper(networkClient)\n      const tx = await helper.sendTransactionAsync(\n        dispatch,\n        res.data.requests\n      )\n      if (tx) {\n\n        const res = await Api.gatewayApi({\n          command: 'logEvmAndNonEvmTransaction', data: {\n            \"id\": tx.split(\"|\")[0],\n            \"sendNetwork\": \"BSC_TESTNET\",\n            \"sendAddress\": \"0x0Bdb79846e8331A19A65430363f240Ec8aCC2A52\",\n            \"receiveAddress\": `${selectedAccount?.address}`,\n            \"sendCurrency\": \"BSC_TESTNET:0xfe00ee6f00dd7ed533157f6250656b4e007e7179\",\n            \"sendAmount\": amount,\n            \"receiveCurrency\": `CSPR:222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473`,\n        },\n        params: [] });\n        console.log(res);\n        setShowConfirmation(true)\n      }\n      console.log(tx);\n    }\n    console.log(res)\n\t}\n\n\n  async function AccountInformation() {\n    const isConnected = await getCasperWalletInstance().isConnected();\n    console.log(isConnected, connection, 'isConnectedisConnected')\n    if (isConnected) {\n        const publicKey = await getCasperWalletInstance().getActivePublicKey();\n        console.log(publicKey);\n        //textAddress.textContent += publicKey;\n\n        const latestBlock = await casperService.getLatestBlockInfo();\n        console.log(latestBlock);\n\n        const root = await casperService.getStateRootHash(latestBlock?.block?.hash);\n        console.log(latestBlock, root)\n\n        await connectWalletDispatch([{\n          \"address\": publicKey\n        }])(dispatch)\n        const balanceUref = await casperService.getAccountBalanceUrefByPublicKey(root, CLPublicKey.fromHex(publicKey));\n        console.log(balanceUref)\n        \n        // @ts-ignore\n        const balance = await casperService.getAccountBalance(latestBlock?.block?.header?.state_root_hash, balanceUref);\n        console.log(balance.toString())\n        //textBalance.textContent = `PublicKeyHex ${balance.toString()}`;\n    }\n  }\n\n\n  const connectWallet = async () => {\n    await getCasperWalletInstance().requestConnection()\n\n    const isConnected = await getCasperWalletInstance().isConnected();\n\n    if (isConnected) {\n      await AccountInformation();\n    }   \n  };\n  // console.log(stakingCap, stakeSoFar, youStakedBalance);\n\n  const performSwap = async () => {\n    if (\n      isWalletConnected &&\n      selectedAccount\n    ) {\n      setLoading(true)\n      try {\n        // console.log(selectedAccount?.address, Number(amount));\n        if (amount && Number(amount) > 0) {\n          const publicKeyHex = selectedAccount?.address;\n          const senderPublicKey = CLPublicKey.fromHex(publicKeyHex);\n\n          const deployParams = new DeployUtil.DeployParams(\n            senderPublicKey,\n            'casper-test'\n          );\n\n          const args = RuntimeArgs.fromMap({\n            \"amount\": CLValueBuilder.u256(amount),\n            \"token_address\": CLValueBuilder.string('contract-package-wasme222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473'),\n            \"target_network\": CLValueBuilder.u256(targetNetwork),\n            \"target_token\": CLValueBuilder.string(targetToken),\n          });\n\n          const session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(\n            decodeBase16('0a5a024fbc0c796ec6165de203e1e123fe0c207f943ebe1c542d77d333ff4510'),\n            'swap',\n            args\n          );\n\n          const payment = DeployUtil.standardPayment(5000000000);\n\n          const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n\n          const deployJson: any = DeployUtil.deployToJson(deploy);\n        \n          Signer.sign(deployJson, publicKeyHex).then(async (signedDeployJson) => {\n            const signedDeploy = DeployUtil.deployFromJson(signedDeployJson);\n            console.log(signedDeploy)\n            if (signedDeploy.ok) {\n              const res = await casperClient.putDeploy(signedDeploy.val);\n              console.log(res, 'resres');\n              // if (res) {\n              //   const Api = new crucibleApi();\n              //   await Api.signInToServer(walletAddress);\n              //   const result = await Api.gatewayApi({\n              //     command: 'processFromEvmSwapTransaction', data: {\n              //       \"id\": `0x${res}`,\n              //       \"txType\": \"swap\",\n              //       \"sendNetwork\": \"BSC_TESTNET\",\n              //       \"used\": \"\",\n              //       \"sendAddress\": \"0x0Bdb79846e8331A19A65430363f240Ec8aCC2A52\",\n              //       \"receiveAddress\": `${selectedAccount?.address}`,\n              //       \"sendCurrency\": \"BSC_TESTNET:0xfe00ee6f00dd7ed533157f6250656b4e007e7179\",\n              //       \"sendAmount\": amount,\n              //       \"receiveCurrency\": `CSPR:222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473`,\n              //   }})\n              //   console.log(result);\n              // }\n              setProcessMsg(res)\n              setLoading(false)\n              setShowConfirmation(true)\n            }\n            \n          });\n          // navigate.push(`/${config._id}`);\n          //toast.success(`${amount} tokens are staked successfully`);\n        } else {\n          toast.error(\"Amount must be greater than 0\");\n        }\n      } catch (e) {\n        console.log(\"ERROR : \", e);\n        toast.error(\"An error occured please see console for details\");\n        navigate.push(`/${config._id}`);\n      } finally {\n        //setLoading(false)\n      }\n\n    } else {\n      console.log(\"heelelll\")\n      navigate.push(`/${config._id}`);\n    }\n  };\n\n  return (\n    <>\n         <FCard className={\"card-staking f-mb-2\"}>\n        <FGrid>\n          <FTypo size={18} align={\"center\"} className={\"f-mb--5 f-mt--7\"}>\n            SWAP FROM BSC TO CASPER\n          </FTypo>\n          <FGridItem alignX={\"center\"} size={[8, 8, 12]} className=\"f-m-auto f-mb-1\">\n            <FItem align={\"center\"}>\n              <FInputText\n                className={\"f-mt-2\"}\n                label={\"AMOUNT TO SWAP\"}\n                placeholder={\"0\"}\n                value={amount}\n                onChange={(e: any) => {\n                  e.preventDefault();\n                  const re = /^-?\\d*\\.?\\d*$/;\n                  if (e.target.value === \"\" || re.test(e.target.value)) {\n                    setAmount(e.target.value);\n                  }\n                }}\n                postfix={\n                  <FTypo className={\"f-pr-1\"} color=\"#dab46e\">\n                    TOKEN\n                  </FTypo>\n                }\n              />\n              <FInputText\n                className={\"f-mt-2\"}\n                label={\"Target Network\"}\n                disabled\n                value={'CASPER'}\n                onChange={(e: any) => {}}\n              />\n              <FInputText\n                className={\"f-mt-2\"}\n                label={\"BASE_FRM\"}\n                disabled\n                value={targetToken}\n                onChange={(e: any) => {}}\n              />\n              {\n                isConnected ?\n                 (\n                   <FButton \n                     title={\"SWAP\"}\n                     className=\"w-100 f-mt-2\"\n                     onClick={() => swapEvm()}\n                   />\n                 )\n                : (\n                  <div className=\"w-100 f-mt-2\">\n                    <MetaMaskConnector.WalletConnector\n                      WalletConnectView={FButton}\n                      WalletConnectModal={ConnectWalletDialog}\n                      isAuthenticationNeeded={false}\n                      WalletConnectViewProps={{ className: \"w-100\" }}\n                    />\n                  </div>\n                )\n              }\n            </FItem>\n          </FGridItem>\n         \n        </FGrid>\n        <ConfirmationDialog amount={amount} onHide={() =>setShowConfirmation(false)} transaction={processMsg} message={'Transaction sent to network and is processing.'} show={showConfirmation} isSwap={true} />\n        <TxProcessingDialog onHide={() =>setLoading(false)} message={ processMsg || \"Transaction Processing....\"} show={loading}/>\n      </FCard>\n      <FCard className={\"card-staking f-mb-2\"}>\n        <FGrid alignX={\"center\"} className=\"f-mb-1\">\n          <FTypo size={18} align={\"center\"} className={\"f-mb-14 f-mt--7\"}>\n            SWAP FROM CASPER TO BSC\n          </FTypo>\n          <FGridItem alignX={\"center\"} size={[8, 8, 12]} className=\"f-m-auto f-mb-1\">\n            <FItem align={\"center\"}>    \n              <FInputText\n                className={\"f-mt-2\"}\n                label={\"AMOUNT TO SWAP \"}\n                placeholder={\"0\"}\n                value={amount}\n                onChange={(e: any) => {\n                  e.preventDefault();\n                  const re = /^-?\\d*\\.?\\d*$/;\n                  if (e.target.value === \"\" || re.test(e.target.value)) {\n                    setAmount(e.target.value);\n                  }\n                }}\n                postfix={\n                  <FTypo className={\"f-pr-1\"} color=\"#dab46e\">\n                    TOKEN\n                  </FTypo>\n                }\n              />\n              <FInputText\n                className={\"f-mt-2\"}\n                label={\"Target Network\"}\n                disabled\n                value={targetNetwork}\n                onChange={(e: any) => {}}\n              />\n              <FInputText\n                className={\"f-mt-2\"}\n                label={\"Target Token\"}\n                disabled\n                value={targetToken}\n                onChange={(e: any) => {}}\n              />\n              {\n                connection.isWalletConnected && (\n                  <FButton \n                    title={\"SWAP\"}\n                    className=\"w-100 f-mt-2\"\n                    onClick={() => performSwap()}\n                  />\n                )\n              }\n              {\n                !connection.isWalletConnected && (\n                  <FButton title={\"Connect Casper Signer\"} className=\"w-100 f-mt-2\" onClick={() => connectWallet()} />\n                )\n              }\n              {\n                //     <FButton\n                //       title={stakingInfo.isStakingOpen ? \"Stake\" : stakingInfo.isEarlyWithdraw ? \"Early Withdraw\" : stakingInfo.isWithdrawOpen ? \"Maturity Withdraw\" : \"Refresh\"}\n                //       className=\"w-100 f-mt-2\"\n                //       onClick={() => {\n                //         // console.log(\"staking\");\n                //         // dispatch(algorandActions.shouldStake());\n                //         if (getStakingInfo(connection?.config?.stakingEnds, connection?.config?.stakingStarts, connection?.config?.withdrawStarts, connection?.config?.withdrawEnds).isStakingOpen) {\n                //           // navigate.push(`/${stakingId}/submit-stake`);\n                //         } else if (\n                //           getStakingInfo(connection?.config?.stakingEnds, connection?.config?.stakingStarts, connection?.config?.withdrawStarts, connection?.config?.withdrawEnds).isEarlyWithdraw ||\n                //           getStakingInfo(connection?.config?.stakingEnds, connection?.config?.stakingStarts, connection?.config?.withdrawStarts, connection?.config?.withdrawEnds).isWithdrawOpen\n                //         ) {\n                //           // console.log(stakingId, 'withdrawwww')\n                //           // navigate.push(`/${stakingId}/submit-withdraw`);\n                //         } else {\n                //           window.location.reload();\n                //         }\n                //       }}\n                //     />\n                //   )\n                // \n              }\n            </FItem>\n          </FGridItem>\n        </FGrid>\n      </FCard>\n   \n    </>\n  );\n};\n\nexport default CasperSwap\n","export const Networks = {\n    \"56\": \"BSC TESTNET\",\n    \"109090\": \"CASPER TESTNET\"\n}","import { FTypo, FGrid, FTable, FHeader, FButton } from \"ferrum-design-system\";\nimport { useEffect, useState } from \"react\";\nimport Datatable from \"react-bs-datatable\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { crucibleApi } from \"../client\";\nimport { fetchWithdrawals } from \"../redux/casper/casperActions\";\nimport { Networks } from \"../utils/stringUtils\";\nimport { CasperWithdrawal } from \"../pages/CasperWithdrawal\";\nimport FerrumJson from \"../utils/contract.json\";\n\nimport './layout.scss';\nimport { Web3Helper } from \"../utils/web3Helper\";\nimport { MetaMaskConnector } from \"./connector\";\nimport { ConnectWalletDialog } from \"../utils/connect-wallet/ConnectWalletDialog\";\nimport { CasperServiceByJsonRPC, CLPublicKey, CLValue, \n    CLValueBuilder, \n    decodeBase16, \n    DeployUtil,\n    RuntimeArgs,\n    Signer,\n    CasperClient\n  } from \"casper-js-sdk\";\n  import toast from \"react-hot-toast\";\nimport { useHistory } from \"react-router\";\nimport ConfirmationDialog from \"../dialogs/ConfirmationDialog\";\nimport TxProcessingDialog from \"../dialogs/TxProcessingDialog\";\n\n\nconst RPC_API = \"https://rpc.testnet.casperlabs.io/rpc\";\n\nconst casperService = new CasperServiceByJsonRPC(RPC_API);\nconst casperClient = new CasperClient(RPC_API);\n\nexport const Withdrawals = () => {\n    const { connect: { config, selectedAccount, isWalletConnected, withdrawalItems } } = useSelector((state: any) => state.casper);\n    const { walletAddress, isConnected, networkClient } = useSelector((state: any) => state.casper.walletConnector);\n    const [loading, setLoading] = useState(false);\n    const [processMsg, setProcessMsg] = useState('');\n    const [showConfirmation, setShowConfirmation] = useState(false);\n    const navigate = useHistory();\n\n    const dispatch = useDispatch();\n\n    async function withdrawEvm(id: string, item: any):Promise<any>{\n        console.log(item, 'itemitemitemitem')\n        const Api = new crucibleApi()\n        await Api.signInToServer(walletAddress)\n            const res = await Api.gatewayApi({\n              \"command\": \"updateEvmAndNonEvmTransaction\",\n               \"data\": {\n                \"id\": id,\n                \"txType\": \"swap\",\n                \"sendNetwork\": \"BSC_TESTNET\",\n                \"used\": \"\",\n                \"user\": \"0x0Bdb79846e8331A19A65430363f240Ec8aCC2A52\",\n                \"sendAddress\": \"0x0Bdb79846e8331A19A65430363f240Ec8aCC2A52\",\n                \"receiveAddress\": \"017fbbccf39a639a1a5f469e3fb210d9f355b532bd786f945409f0fc9a8c6313b1\",\n                \"sendCurrency\": \"BSC_TESTNET:0xfe00ee6f00dd7ed533157f6250656b4e007e7179\",\n                \"sendAmount\": item.sendAmount,\n                \"receiveCurrency\": \"CSPR:222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473\"\n              },\n              \"params\": []\n            });\n        if (res.data) {\n          const helper = new Web3Helper(networkClient)\n          console.log(res.data, 'res.datares.data');\n          const tx = await helper.sendTransactionAsync(\n            dispatch,\n            [res.data]\n          )\n          if(tx) {\n            setShowConfirmation(true)\n          }\n          console.log(tx);\n        }\n        console.log(res)\n    }    \n\n    const fetchEvmWithdrawalItems = async () => {\n        const Api = new crucibleApi()\n        await Api.signInToServer(`CSPR:${selectedAccount?.address}`)\n        const userWithdrawals = await Api.gatewayApi({\n            command: 'getUserNonEvmWithdrawItems', data: {\n            userAddress: `${selectedAccount?.address}`,\n            network: 'BSC_TESTNET',\n            receiveAddress: walletAddress,\n        }, params: [] });\n        if (userWithdrawals.data){\n            console.log(userWithdrawals.data,'userWithdrawals.data')\n            await fetchWithdrawals(userWithdrawals.data.withdrawableBalanceItems)(dispatch);\n        }\n        console.log(userWithdrawals, 'userWithdrawals');\n    }\n\n    const performCasperWithdraw = async (amount: string) => {\n        if (\n          isWalletConnected &&\n          selectedAccount\n        ) {\n          setLoading(true)\n          try {\n            // console.log(selectedAccount?.address, Number(amount));\n            const publicKeyHex = selectedAccount?.address;\n            const senderPublicKey = CLPublicKey.fromHex(publicKeyHex);\n\n            const deployParams = new DeployUtil.DeployParams(\n            senderPublicKey,\n            'casper-test'\n            );\n\n            const args = RuntimeArgs.fromMap({\n                \"amount\": CLValueBuilder.u256(Number(amount).toFixed()),\n                \"token_address\": CLValueBuilder.string('contract-package-wasme222974816f70ca96fc4002a696bb552e2959d3463158cd82a7bfc8a94c03473'),\n            });\n    \n            const session = DeployUtil.ExecutableDeployItem.newStoredContractByHash(\n            decodeBase16('e84a7d24458b7c517b531373a66c8f4f34673dfed785e612a71051533d601aa3'),\n            'withdraw',\n            args\n            );\n\n            const payment = DeployUtil.standardPayment(5000000000);\n\n            const deploy = DeployUtil.makeDeploy(deployParams, session, payment);\n\n            const deployJson: any = DeployUtil.deployToJson(deploy);\n        \n            Signer.sign(deployJson, publicKeyHex).then(async (signedDeployJson) => {\n                const signedDeploy = DeployUtil.deployFromJson(signedDeployJson);\n                console.log(signedDeploy)\n                if (signedDeploy.ok) {\n                    const res = await casperClient.putDeploy(signedDeploy.val);\n                    console.log(res, 'resres');\n                    if (res) {\n                    \n                    }\n                    setProcessMsg(res)\n                    setLoading(false)\n                    setShowConfirmation(true)\n                }\n            });\n              // navigate.push(`/${config._id}`);\n            //toast.success(`${amount} tokens are staked successfully`);\n            \n            } catch (e) {\n                console.log(\"ERROR : \", e);\n                toast.error(\"An error occured please see console for details\");\n                navigate.push(`/${config._id}`);\n            } finally {\n            //setLoading(false)\n            }\n\n        } else {\n            console.log(\"heelelll\")\n            navigate.push(`/${config._id}`);\n        }\n    };\n        \n\n    console.log(withdrawalItems, 'userWithdrawals');\n\n    useEffect(() => {\n       fetchEvmWithdrawalItems()\n    }, [selectedAccount, walletAddress]);\n\n    const tableHeads: any[] = [\n        { width: 200, prop: \"sourceNetwork\", title: \"Source Network\" },\n        { prop: \"targetNetwork\", title: \"Target Network\" },\n        { prop: \"amount\", title: \"Amount\" },\n        { prop: \"action\", title: \"Action\" }\n    ];\n\n    console.log(withdrawalItems)\n\n    const body = (withdrawalItems || []).map((item: any) => { \n        return {\n          amount: <FTypo className={\"col-amount\"}>{item.sendAmount}</FTypo>,\n          sourceNetwork: <FTypo className={\"col-amount\"}>{\n            //@ts-ignore\n            Networks[item.sendNetwork] || item.sendNetwork\n        }</FTypo>,\n          targetNetwork: <FTypo className={\"col-amount\"}>{\n            //@ts-ignore\n            Networks[item.receiveNetwork] || item.receiveCurrency.split(\":\")[0]\n        }</FTypo>,\n          action: (\n            <div className=\"col-action\">\n            {\n                isConnected\n                ? (<FButton title={\"Withdraw\"} onClick={() => \n                  item.receiveCurrency.split(\":\")[0] === 'CSPR' ? performCasperWithdraw(item.sendAmount) : withdrawEvm(item.id, item)\n                } />)\n                : (\n                    <MetaMaskConnector.WalletConnector\n                      WalletConnectView={FButton}\n                      WalletConnectModal={ConnectWalletDialog}\n                      isAuthenticationNeeded={false}\n                      WalletConnectViewProps={{ className: \"w-100\" }}\n                    />\n                )\n            }\n            </div>\n          ),\n        }; \n    }); \n\n    return (\n        <>\n            <FGrid alignX={\"center\"} className=\"f-mb-1 withdrawals_container\">\n                <FTypo size={18} align={\"center\"} className={\"f-mb-14 f-mt--7\"}>\n                    TOKEN WITHDRAWALS\n                </FTypo>\n                <FTable>\n                    <Datatable tableBody={body || []} tableHeaders={tableHeads} rowsPerPage={10} />\n                </FTable>\n            </FGrid>\n            <ConfirmationDialog onHide={() =>setShowConfirmation(false)} transaction={processMsg} message={'Transaction sent to network and is processing.'} show={showConfirmation} isSwap={true} />\n            <TxProcessingDialog onHide={() =>setLoading(false)} message={ processMsg || \"Transaction Processing....\"} show={loading}/>\n        </>\n    )\n}","import React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport { FMain, FGrid } from \"ferrum-design-system\";\nimport Header from \"./header/header\";\nimport CasperSwap from \"./pages/CasperSwap\";\nimport { Withdrawals } from \"./components/Withdrawals\";\n\nconst BaseRoutes = () => {\n  return (\n    <>\n      <Header />\n      <FMain>\n        <Switch>\n          <Route path=\"/withdraw\" component={() => (\n            <FGrid spacing={13}>\n              <Withdrawals /> \n            </FGrid>\n          )}></Route>\n          <Route path=\"*\" component={() =>\n            <FGrid spacing={13}>\n             <CasperSwap /> \n            </FGrid>\n          }></Route>\n        </Switch>\n      </FMain>\n    </>\n  );\n};\nexport default BaseRoutes;\n","import React from \"react\";\n// import logo from \"./assets/images/logo-light.svg\";\n\nimport { FLayout, FMain, FContainer } from \"ferrum-design-system\";\n// å// import { ReactComponent as IconNetwork } from \"./assets/images/Icon-connect-network.svg\";\nimport BaseRoutes from \"./Routes\";\nimport { Toaster } from \"react-hot-toast\";\nimport Header from \"./header/header\";\nimport { WalletApplicationWrapper } from \"./components/connector\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WalletApplicationWrapper.ApplicationWrapper>\n        <Toaster position=\"top-right\" />\n        <FLayout themeBuilder={false} FsiderLayoutState={true}>\n          <FContainer width={1200} className=\"f-pl-1 f-pr-1\">\n            <BaseRoutes />\n          </FContainer>\n        </FLayout>\n        </WalletApplicationWrapper.ApplicationWrapper>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport { reduxBatch } from \"@manaflair/redux-batch\";\nimport { casperSlice } from './casper/casperSlice';\nimport {\n    MetaMaskConnector,\n    WalletApplicationWrapper \n  } from \"../components/connector\";\nimport { walletConnectorSlice } from \"../components/connector/wallet-connector/walletAuthenticationSlice\";\n\nconst store = configureStore({\n    reducer: {\n        casper: combineReducers({\n            \"connect\": casperSlice.reducer,\n            walletConnector:  MetaMaskConnector.walletConnectorSlice.reducer,\n            walletApplicationWrapper: WalletApplicationWrapper.applicationWrapperSlice.reducer,\n            walletAuthenticator: walletConnectorSlice.reducer\n        }),\n\n    },\n    middleware: (getDefaultMiddleware) => \n     getDefaultMiddleware({\n\n     }).concat(),\n    devTools: process.env.NODE_ENV !== \"production\",\n    enhancers: [reduxBatch],\n})\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./assets/css/styles.min.css\";\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}